
STM32-DevBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800bcc4  0800bcc4  0000ccc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c390  0800c390  0000e060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c390  0800c390  0000d390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c398  0800c398  0000e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c398  0800c398  0000d398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c39c  0800c39c  0000d39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c3a0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e060  2**0
                  CONTENTS
 10 .bss          00004f98  20000060  20000060  0000e060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ff8  20004ff8  0000e060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf25  00000000  00000000  0000e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000403e  00000000  00000000  0002afb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  0002eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b2  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ab1  00000000  00000000  00031f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb5a  00000000  00000000  000599f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011cf64  00000000  00000000  0007854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001954b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007774  00000000  00000000  001954f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0019cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcac 	.word	0x0800bcac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800bcac 	.word	0x0800bcac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <FusionDegreesToRadians>:
/**
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8000506:	edd7 7a01 	vldr	s15, [r7, #4]
 800050a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000520 <FusionDegreesToRadians+0x24>
 800050e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000512:	eeb0 0a67 	vmov.f32	s0, s15
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	3c8efa35 	.word	0x3c8efa35

08000524 <FusionFastInverseSqrt>:
 * @brief Calculates the reciprocal of the square root.
 * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 * @param x Operand.
 * @return Reciprocal of the square root of x.
 */
static inline float FusionFastInverseSqrt(const float x) {
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	ed87 0a01 	vstr	s0, [r7, #4]
    typedef union {
        float f;
        int32_t i;
    } Union32;

    Union32 union32 = {.f = x};
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	105a      	asrs	r2, r3, #1
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <FusionFastInverseSqrt+0x54>)
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 800053c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000540:	edd7 7a01 	vldr	s15, [r7, #4]
 8000544:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800057c <FusionFastInverseSqrt+0x58>
 8000548:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800054c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000550:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000554:	edd7 7a03 	vldr	s15, [r7, #12]
 8000558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800055c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000580 <FusionFastInverseSqrt+0x5c>
 8000560:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000564:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000568:	eeb0 0a67 	vmov.f32	s0, s15
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	5f1f1412 	.word	0x5f1f1412
 800057c:	3f36d312 	.word	0x3f36d312
 8000580:	3fd851ff 	.word	0x3fd851ff

08000584 <FusionVectorIsZero>:
/**
 * @brief Returns true if the vector is zero.
 * @param vector Vector.
 * @return True if the vector is zero.
 */
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	eef0 6a40 	vmov.f32	s13, s0
 800058e:	eeb0 7a60 	vmov.f32	s14, s1
 8000592:	eef0 7a41 	vmov.f32	s15, s2
 8000596:	edc7 6a01 	vstr	s13, [r7, #4]
 800059a:	ed87 7a02 	vstr	s14, [r7, #8]
 800059e:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 80005a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ae:	d10f      	bne.n	80005d0 <FusionVectorIsZero+0x4c>
 80005b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005bc:	d108      	bne.n	80005d0 <FusionVectorIsZero+0x4c>
 80005be:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80005c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ca:	d101      	bne.n	80005d0 <FusionVectorIsZero+0x4c>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e000      	b.n	80005d2 <FusionVectorIsZero+0x4e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3714      	adds	r7, #20
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <FusionVectorAdd>:
 * @brief Returns the sum of two vectors.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Sum of two vectors.
 */
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80005e4:	b480      	push	{r7}
 80005e6:	b091      	sub	sp, #68	@ 0x44
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	eeb0 5a40 	vmov.f32	s10, s0
 80005ee:	eef0 5a60 	vmov.f32	s11, s1
 80005f2:	eeb0 6a41 	vmov.f32	s12, s2
 80005f6:	eef0 6a61 	vmov.f32	s13, s3
 80005fa:	eeb0 7a42 	vmov.f32	s14, s4
 80005fe:	eef0 7a62 	vmov.f32	s15, s5
 8000602:	ed87 5a07 	vstr	s10, [r7, #28]
 8000606:	edc7 5a08 	vstr	s11, [r7, #32]
 800060a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800060e:	edc7 6a04 	vstr	s13, [r7, #16]
 8000612:	ed87 7a05 	vstr	s14, [r7, #20]
 8000616:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x + vectorB.axis.x,
 800061a:	ed97 7a07 	vldr	s14, [r7, #28]
 800061e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000622:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000626:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800062a:	ed97 7a08 	vldr	s14, [r7, #32]
 800062e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000632:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000636:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800063a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800063e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000642:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000646:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 800064a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800064e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000652:	ca07      	ldmia	r2, {r0, r1, r2}
 8000654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000658:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800065a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800065c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800065e:	ee06 1a90 	vmov	s13, r1
 8000662:	ee07 2a10 	vmov	s14, r2
 8000666:	ee07 3a90 	vmov	s15, r3
}
 800066a:	eeb0 0a66 	vmov.f32	s0, s13
 800066e:	eef0 0a47 	vmov.f32	s1, s14
 8000672:	eeb0 1a67 	vmov.f32	s2, s15
 8000676:	3744      	adds	r7, #68	@ 0x44
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <FusionVectorSum>:
/**
 * @brief Returns the sum of the elements.
 * @param vector Vector.
 * @return Sum of the elements.
 */
static inline float FusionVectorSum(const FusionVector vector) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	eef0 6a40 	vmov.f32	s13, s0
 800068a:	eeb0 7a60 	vmov.f32	s14, s1
 800068e:	eef0 7a41 	vmov.f32	s15, s2
 8000692:	edc7 6a01 	vstr	s13, [r7, #4]
 8000696:	ed87 7a02 	vstr	s14, [r7, #8]
 800069a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800069e:	ed97 7a01 	vldr	s14, [r7, #4]
 80006a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80006a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ae:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80006b2:	eeb0 0a67 	vmov.f32	s0, s15
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <FusionVectorMultiplyScalar>:
 * @brief Returns the multiplication of a vector by a scalar.
 * @param vector Vector.
 * @param scalar Scalar.
 * @return Multiplication of a vector by a scalar.
 */
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80006c0:	b480      	push	{r7}
 80006c2:	b08f      	sub	sp, #60	@ 0x3c
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	eef0 6a40 	vmov.f32	s13, s0
 80006ca:	eeb0 7a60 	vmov.f32	s14, s1
 80006ce:	eef0 7a41 	vmov.f32	s15, s2
 80006d2:	edc7 1a04 	vstr	s3, [r7, #16]
 80006d6:	edc7 6a05 	vstr	s13, [r7, #20]
 80006da:	ed87 7a06 	vstr	s14, [r7, #24]
 80006de:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionVector result = {.axis = {
            .x = vector.axis.x * scalar,
 80006e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80006e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80006ee:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80006f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80006f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80006fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .z = vector.axis.z * scalar,
 8000702:	ed97 7a07 	vldr	s14, [r7, #28]
 8000706:	edd7 7a04 	vldr	s15, [r7, #16]
 800070a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800070e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }};
    return result;
 8000712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000716:	f107 0220 	add.w	r2, r7, #32
 800071a:	ca07      	ldmia	r2, {r0, r1, r2}
 800071c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000726:	ee06 1a90 	vmov	s13, r1
 800072a:	ee07 2a10 	vmov	s14, r2
 800072e:	ee07 3a90 	vmov	s15, r3
}
 8000732:	eeb0 0a66 	vmov.f32	s0, s13
 8000736:	eef0 0a47 	vmov.f32	s1, s14
 800073a:	eeb0 1a67 	vmov.f32	s2, s15
 800073e:	373c      	adds	r7, #60	@ 0x3c
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000748:	b480      	push	{r7}
 800074a:	b091      	sub	sp, #68	@ 0x44
 800074c:	af00      	add	r7, sp, #0
 800074e:	eeb0 5a40 	vmov.f32	s10, s0
 8000752:	eef0 5a60 	vmov.f32	s11, s1
 8000756:	eeb0 6a41 	vmov.f32	s12, s2
 800075a:	eef0 6a61 	vmov.f32	s13, s3
 800075e:	eeb0 7a42 	vmov.f32	s14, s4
 8000762:	eef0 7a62 	vmov.f32	s15, s5
 8000766:	ed87 5a07 	vstr	s10, [r7, #28]
 800076a:	edc7 5a08 	vstr	s11, [r7, #32]
 800076e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8000772:	edc7 6a04 	vstr	s13, [r7, #16]
 8000776:	ed87 7a05 	vstr	s14, [r7, #20]
 800077a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800077e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000782:	edd7 7a04 	vldr	s15, [r7, #16]
 8000786:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800078a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800078e:	ed97 7a08 	vldr	s14, [r7, #32]
 8000792:	edd7 7a05 	vldr	s15, [r7, #20]
 8000796:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800079a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800079e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80007a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80007a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80007aa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 80007ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007b2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80007b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80007bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80007be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80007c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007c2:	ee06 1a90 	vmov	s13, r1
 80007c6:	ee07 2a10 	vmov	s14, r2
 80007ca:	ee07 3a90 	vmov	s15, r3
}
 80007ce:	eeb0 0a66 	vmov.f32	s0, s13
 80007d2:	eef0 0a47 	vmov.f32	s1, s14
 80007d6:	eeb0 1a67 	vmov.f32	s2, s15
 80007da:	3744      	adds	r7, #68	@ 0x44
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <FusionVectorCrossProduct>:
 * @brief Returns the cross product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Cross product.
 */
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80007e4:	b480      	push	{r7}
 80007e6:	b091      	sub	sp, #68	@ 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	eeb0 5a40 	vmov.f32	s10, s0
 80007ee:	eef0 5a60 	vmov.f32	s11, s1
 80007f2:	eeb0 6a41 	vmov.f32	s12, s2
 80007f6:	eef0 6a61 	vmov.f32	s13, s3
 80007fa:	eeb0 7a42 	vmov.f32	s14, s4
 80007fe:	eef0 7a62 	vmov.f32	s15, s5
 8000802:	ed87 5a07 	vstr	s10, [r7, #28]
 8000806:	edc7 5a08 	vstr	s11, [r7, #32]
 800080a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800080e:	edc7 6a04 	vstr	s13, [r7, #16]
 8000812:	ed87 7a05 	vstr	s14, [r7, #20]
 8000816:	edc7 7a06 	vstr	s15, [r7, #24]
#define A vectorA.axis
#define B vectorB.axis
    const FusionVector result = {.axis = {
            .x = A.y * B.z - A.z * B.y,
 800081a:	ed97 7a08 	vldr	s14, [r7, #32]
 800081e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000826:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800082a:	edd7 7a05 	vldr	s15, [r7, #20]
 800082e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000832:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000836:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = A.z * B.x - A.x * B.z,
 800083a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800083e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000846:	edd7 6a07 	vldr	s13, [r7, #28]
 800084a:	edd7 7a06 	vldr	s15, [r7, #24]
 800084e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000852:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000856:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = A.x * B.y - A.y * B.x,
 800085a:	ed97 7a07 	vldr	s14, [r7, #28]
 800085e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000862:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000866:	edd7 6a08 	vldr	s13, [r7, #32]
 800086a:	edd7 7a04 	vldr	s15, [r7, #16]
 800086e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000872:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000876:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 800087a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800087e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000882:	ca07      	ldmia	r2, {r0, r1, r2}
 8000884:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000888:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800088a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800088c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800088e:	ee06 1a90 	vmov	s13, r1
 8000892:	ee07 2a10 	vmov	s14, r2
 8000896:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 800089a:	eeb0 0a66 	vmov.f32	s0, s13
 800089e:	eef0 0a47 	vmov.f32	s1, s14
 80008a2:	eeb0 1a67 	vmov.f32	s2, s15
 80008a6:	3744      	adds	r7, #68	@ 0x44
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <FusionVectorDotProduct>:
 * @brief Returns the dot product.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Dot product.
 */
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	eeb0 5a40 	vmov.f32	s10, s0
 80008ba:	eef0 5a60 	vmov.f32	s11, s1
 80008be:	eeb0 6a41 	vmov.f32	s12, s2
 80008c2:	eef0 6a61 	vmov.f32	s13, s3
 80008c6:	eeb0 7a42 	vmov.f32	s14, s4
 80008ca:	eef0 7a62 	vmov.f32	s15, s5
 80008ce:	ed87 5a03 	vstr	s10, [r7, #12]
 80008d2:	edc7 5a04 	vstr	s11, [r7, #16]
 80008d6:	ed87 6a05 	vstr	s12, [r7, #20]
 80008da:	edc7 6a00 	vstr	s13, [r7]
 80008de:	ed87 7a01 	vstr	s14, [r7, #4]
 80008e2:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 80008e6:	ed97 5a00 	vldr	s10, [r7]
 80008ea:	edd7 5a01 	vldr	s11, [r7, #4]
 80008ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80008f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80008f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80008fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80008fe:	eef0 1a45 	vmov.f32	s3, s10
 8000902:	eeb0 2a65 	vmov.f32	s4, s11
 8000906:	eef0 2a46 	vmov.f32	s5, s12
 800090a:	eeb0 0a66 	vmov.f32	s0, s13
 800090e:	eef0 0a47 	vmov.f32	s1, s14
 8000912:	eeb0 1a67 	vmov.f32	s2, s15
 8000916:	f7ff ff17 	bl	8000748 <FusionVectorHadamardProduct>
 800091a:	eef0 6a40 	vmov.f32	s13, s0
 800091e:	eeb0 7a60 	vmov.f32	s14, s1
 8000922:	eef0 7a41 	vmov.f32	s15, s2
 8000926:	edc7 6a07 	vstr	s13, [r7, #28]
 800092a:	ed87 7a08 	vstr	s14, [r7, #32]
 800092e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8000932:	edd7 6a07 	vldr	s13, [r7, #28]
 8000936:	ed97 7a08 	vldr	s14, [r7, #32]
 800093a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800093e:	eeb0 0a66 	vmov.f32	s0, s13
 8000942:	eef0 0a47 	vmov.f32	s1, s14
 8000946:	eeb0 1a67 	vmov.f32	s2, s15
 800094a:	f7ff fe99 	bl	8000680 <FusionVectorSum>
 800094e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000952:	eeb0 0a67 	vmov.f32	s0, s15
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <FusionVectorMagnitudeSquared>:
/**
 * @brief Returns the vector magnitude squared.
 * @param vector Vector.
 * @return Vector magnitude squared.
 */
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	eef0 6a40 	vmov.f32	s13, s0
 8000966:	eeb0 7a60 	vmov.f32	s14, s1
 800096a:	eef0 7a41 	vmov.f32	s15, s2
 800096e:	edc7 6a01 	vstr	s13, [r7, #4]
 8000972:	ed87 7a02 	vstr	s14, [r7, #8]
 8000976:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 800097a:	ed97 5a01 	vldr	s10, [r7, #4]
 800097e:	edd7 5a02 	vldr	s11, [r7, #8]
 8000982:	ed97 6a03 	vldr	s12, [r7, #12]
 8000986:	edd7 6a01 	vldr	s13, [r7, #4]
 800098a:	ed97 7a02 	vldr	s14, [r7, #8]
 800098e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000992:	eef0 1a45 	vmov.f32	s3, s10
 8000996:	eeb0 2a65 	vmov.f32	s4, s11
 800099a:	eef0 2a46 	vmov.f32	s5, s12
 800099e:	eeb0 0a66 	vmov.f32	s0, s13
 80009a2:	eef0 0a47 	vmov.f32	s1, s14
 80009a6:	eeb0 1a67 	vmov.f32	s2, s15
 80009aa:	f7ff fecd 	bl	8000748 <FusionVectorHadamardProduct>
 80009ae:	eef0 6a40 	vmov.f32	s13, s0
 80009b2:	eeb0 7a60 	vmov.f32	s14, s1
 80009b6:	eef0 7a41 	vmov.f32	s15, s2
 80009ba:	edc7 6a05 	vstr	s13, [r7, #20]
 80009be:	ed87 7a06 	vstr	s14, [r7, #24]
 80009c2:	edc7 7a07 	vstr	s15, [r7, #28]
 80009c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80009ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80009ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80009d2:	eeb0 0a66 	vmov.f32	s0, s13
 80009d6:	eef0 0a47 	vmov.f32	s1, s14
 80009da:	eeb0 1a67 	vmov.f32	s2, s15
 80009de:	f7ff fe4f 	bl	8000680 <FusionVectorSum>
 80009e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80009e6:	eeb0 0a67 	vmov.f32	s0, s15
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <FusionVectorNormalise>:
/**
 * @brief Returns the normalised vector.
 * @param vector Vector.
 * @return Normalised vector.
 */
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	eef0 6a40 	vmov.f32	s13, s0
 80009fa:	eeb0 7a60 	vmov.f32	s14, s1
 80009fe:	eef0 7a41 	vmov.f32	s15, s2
 8000a02:	edc7 6a05 	vstr	s13, [r7, #20]
 8000a06:	ed87 7a06 	vstr	s14, [r7, #24]
 8000a0a:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8000a0e:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a12:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a16:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a1a:	eeb0 0a66 	vmov.f32	s0, s13
 8000a1e:	eef0 0a47 	vmov.f32	s1, s14
 8000a22:	eeb0 1a67 	vmov.f32	s2, s15
 8000a26:	f7ff ff99 	bl	800095c <FusionVectorMagnitudeSquared>
 8000a2a:	eef0 7a40 	vmov.f32	s15, s0
 8000a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a32:	f7ff fd77 	bl	8000524 <FusionFastInverseSqrt>
 8000a36:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
#endif
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8000a3a:	edd7 6a05 	vldr	s13, [r7, #20]
 8000a3e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a42:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a46:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 8000a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8000a4e:	eef0 0a47 	vmov.f32	s1, s14
 8000a52:	eeb0 1a67 	vmov.f32	s2, s15
 8000a56:	f7ff fe33 	bl	80006c0 <FusionVectorMultiplyScalar>
 8000a5a:	eef0 6a40 	vmov.f32	s13, s0
 8000a5e:	eeb0 7a60 	vmov.f32	s14, s1
 8000a62:	eef0 7a41 	vmov.f32	s15, s2
 8000a66:	edc7 6a08 	vstr	s13, [r7, #32]
 8000a6a:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8000a6e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8000a72:	6a39      	ldr	r1, [r7, #32]
 8000a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a78:	ee06 1a90 	vmov	s13, r1
 8000a7c:	ee07 2a10 	vmov	s14, r2
 8000a80:	ee07 3a90 	vmov	s15, r3
}
 8000a84:	eeb0 0a66 	vmov.f32	s0, s13
 8000a88:	eef0 0a47 	vmov.f32	s1, s14
 8000a8c:	eeb0 1a67 	vmov.f32	s2, s15
 8000a90:	3730      	adds	r7, #48	@ 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <FusionQuaternionAdd>:
 * @brief Returns the sum of two quaternions.
 * @param quaternionA Quaternion A.
 * @param quaternionB Quaternion B.
 * @return Sum of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8000a96:	b490      	push	{r4, r7}
 8000a98:	b094      	sub	sp, #80	@ 0x50
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	eeb0 4a40 	vmov.f32	s8, s0
 8000aa0:	eef0 4a60 	vmov.f32	s9, s1
 8000aa4:	eeb0 5a41 	vmov.f32	s10, s2
 8000aa8:	eef0 5a61 	vmov.f32	s11, s3
 8000aac:	eeb0 6a42 	vmov.f32	s12, s4
 8000ab0:	eef0 6a62 	vmov.f32	s13, s5
 8000ab4:	eeb0 7a43 	vmov.f32	s14, s6
 8000ab8:	eef0 7a63 	vmov.f32	s15, s7
 8000abc:	ed87 4a08 	vstr	s8, [r7, #32]
 8000ac0:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8000ac4:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8000ac8:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8000acc:	ed87 6a04 	vstr	s12, [r7, #16]
 8000ad0:	edc7 6a05 	vstr	s13, [r7, #20]
 8000ad4:	ed87 7a06 	vstr	s14, [r7, #24]
 8000ad8:	edc7 7a07 	vstr	s15, [r7, #28]
    const FusionQuaternion result = {.element = {
            .w = quaternionA.element.w + quaternionB.element.w,
 8000adc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ae0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000ae8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8000aec:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000af4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000af8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8000afc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000b00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b04:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000b08:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8000b0c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000b10:	edd7 7a07 	vldr	s15, [r7, #28]
 8000b14:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000b18:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8000b1c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000b20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b2a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b32:	ee06 0a10 	vmov	s12, r0
 8000b36:	ee06 1a90 	vmov	s13, r1
 8000b3a:	ee07 2a10 	vmov	s14, r2
 8000b3e:	ee07 3a90 	vmov	s15, r3
}
 8000b42:	eeb0 0a46 	vmov.f32	s0, s12
 8000b46:	eef0 0a66 	vmov.f32	s1, s13
 8000b4a:	eeb0 1a47 	vmov.f32	s2, s14
 8000b4e:	eef0 1a67 	vmov.f32	s3, s15
 8000b52:	3750      	adds	r7, #80	@ 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc90      	pop	{r4, r7}
 8000b58:	4770      	bx	lr

08000b5a <FusionQuaternionMultiply>:
 * @brief Returns the multiplication of two quaternions.
 * @param quaternionA Quaternion A (to be post-multiplied).
 * @param quaternionB Quaternion B (to be pre-multiplied).
 * @return Multiplication of two quaternions.
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8000b5a:	b490      	push	{r4, r7}
 8000b5c:	b094      	sub	sp, #80	@ 0x50
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	eeb0 4a40 	vmov.f32	s8, s0
 8000b64:	eef0 4a60 	vmov.f32	s9, s1
 8000b68:	eeb0 5a41 	vmov.f32	s10, s2
 8000b6c:	eef0 5a61 	vmov.f32	s11, s3
 8000b70:	eeb0 6a42 	vmov.f32	s12, s4
 8000b74:	eef0 6a62 	vmov.f32	s13, s5
 8000b78:	eeb0 7a43 	vmov.f32	s14, s6
 8000b7c:	eef0 7a63 	vmov.f32	s15, s7
 8000b80:	ed87 4a08 	vstr	s8, [r7, #32]
 8000b84:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8000b88:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8000b8c:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8000b90:	ed87 6a04 	vstr	s12, [r7, #16]
 8000b94:	edc7 6a05 	vstr	s13, [r7, #20]
 8000b98:	ed87 7a06 	vstr	s14, [r7, #24]
 8000b9c:	edc7 7a07 	vstr	s15, [r7, #28]
#define A quaternionA.element
#define B quaternionB.element
    const FusionQuaternion result = {.element = {
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8000ba0:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ba4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bbc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000bc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bcc:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000bd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8000be0:	ed97 7a08 	vldr	s14, [r7, #32]
 8000be4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000bf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bfc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c00:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c0c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c18:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000c1c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8000c20:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c2c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000c30:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c3c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c4c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c58:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000c5c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8000c60:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c6c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c7c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c8c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c98:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000c9c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8000ca0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000ca4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000cb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cb6:	ee06 0a10 	vmov	s12, r0
 8000cba:	ee06 1a90 	vmov	s13, r1
 8000cbe:	ee07 2a10 	vmov	s14, r2
 8000cc2:	ee07 3a90 	vmov	s15, r3
#undef A
#undef B
}
 8000cc6:	eeb0 0a46 	vmov.f32	s0, s12
 8000cca:	eef0 0a66 	vmov.f32	s1, s13
 8000cce:	eeb0 1a47 	vmov.f32	s2, s14
 8000cd2:	eef0 1a67 	vmov.f32	s3, s15
 8000cd6:	3750      	adds	r7, #80	@ 0x50
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc90      	pop	{r4, r7}
 8000cdc:	4770      	bx	lr

08000cde <FusionQuaternionMultiplyVector>:
 * multiplied by the vector.
 * @param quaternion Quaternion.
 * @param vector Vector.
 * @return Multiplication of a quaternion with a vector.
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8000cde:	b490      	push	{r4, r7}
 8000ce0:	b094      	sub	sp, #80	@ 0x50
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	eef0 4a40 	vmov.f32	s9, s0
 8000ce8:	eeb0 5a60 	vmov.f32	s10, s1
 8000cec:	eef0 5a41 	vmov.f32	s11, s2
 8000cf0:	eeb0 6a61 	vmov.f32	s12, s3
 8000cf4:	eef0 6a42 	vmov.f32	s13, s4
 8000cf8:	eeb0 7a62 	vmov.f32	s14, s5
 8000cfc:	eef0 7a43 	vmov.f32	s15, s6
 8000d00:	edc7 4a08 	vstr	s9, [r7, #32]
 8000d04:	ed87 5a09 	vstr	s10, [r7, #36]	@ 0x24
 8000d08:	edc7 5a0a 	vstr	s11, [r7, #40]	@ 0x28
 8000d0c:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 8000d10:	edc7 6a05 	vstr	s13, [r7, #20]
 8000d14:	ed87 7a06 	vstr	s14, [r7, #24]
 8000d18:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#define V vector.axis
    const FusionQuaternion result = {.element = {
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8000d1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d20:	eeb1 7a67 	vneg.f32	s14, s15
 8000d24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d2c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000d30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d3c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d48:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000d4c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8000d50:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d5c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000d60:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d6c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d78:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000d7c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8000d80:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d84:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000d90:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d9c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8000da0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da8:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000dac:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8000db0:	ed97 7a08 	vldr	s14, [r7, #32]
 8000db4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dbc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000dc0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dcc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000dd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000ddc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }};
    return result;
 8000de0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000de4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000df0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000df2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000df6:	ee06 0a10 	vmov	s12, r0
 8000dfa:	ee06 1a90 	vmov	s13, r1
 8000dfe:	ee07 2a10 	vmov	s14, r2
 8000e02:	ee07 3a90 	vmov	s15, r3
#undef Q
#undef V
}
 8000e06:	eeb0 0a46 	vmov.f32	s0, s12
 8000e0a:	eef0 0a66 	vmov.f32	s1, s13
 8000e0e:	eeb0 1a47 	vmov.f32	s2, s14
 8000e12:	eef0 1a67 	vmov.f32	s3, s15
 8000e16:	3750      	adds	r7, #80	@ 0x50
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc90      	pop	{r4, r7}
 8000e1c:	4770      	bx	lr

08000e1e <FusionQuaternionNormalise>:
/**
 * @brief Returns the normalised quaternion.
 * @param quaternion Quaternion.
 * @return Normalised quaternion.
 */
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8000e1e:	b590      	push	{r4, r7, lr}
 8000e20:	b093      	sub	sp, #76	@ 0x4c
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	eeb0 6a40 	vmov.f32	s12, s0
 8000e28:	eef0 6a60 	vmov.f32	s13, s1
 8000e2c:	eeb0 7a41 	vmov.f32	s14, s2
 8000e30:	eef0 7a61 	vmov.f32	s15, s3
 8000e34:	ed87 6a04 	vstr	s12, [r7, #16]
 8000e38:	edc7 6a05 	vstr	s13, [r7, #20]
 8000e3c:	ed87 7a06 	vstr	s14, [r7, #24]
 8000e40:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8000e44:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e50:	edd7 6a05 	vldr	s13, [r7, #20]
 8000e54:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e60:	edd7 6a06 	vldr	s13, [r7, #24]
 8000e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8000e74:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e80:	eeb0 0a67 	vmov.f32	s0, s15
 8000e84:	f7ff fb4e 	bl	8000524 <FusionFastInverseSqrt>
 8000e88:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
#endif
    const FusionQuaternion result = {.element = {
            .w = Q.w * magnitudeReciprocal,
 8000e8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e90:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e94:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000e98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .x = Q.x * magnitudeReciprocal,
 8000e9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ea0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000ea8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = Q.y * magnitudeReciprocal,
 8000eac:	ed97 7a06 	vldr	s14, [r7, #24]
 8000eb0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000eb8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = Q.z * magnitudeReciprocal,
 8000ebc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ec0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8000ec8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    }};
    return result;
 8000ecc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000eda:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000edc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ee2:	ee06 0a10 	vmov	s12, r0
 8000ee6:	ee06 1a90 	vmov	s13, r1
 8000eea:	ee07 2a10 	vmov	s14, r2
 8000eee:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8000ef2:	eeb0 0a46 	vmov.f32	s0, s12
 8000ef6:	eef0 0a66 	vmov.f32	s1, s13
 8000efa:	eeb0 1a47 	vmov.f32	s2, s14
 8000efe:	eef0 1a67 	vmov.f32	s3, s15
 8000f02:	374c      	adds	r7, #76	@ 0x4c
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <FusionAhrsInitialise+0x38>)
 8000f12:	f107 0408 	add.w	r4, r7, #8
 8000f16:	461d      	mov	r5, r3
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f20:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f86e 	bl	800100c <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f807 	bl	8000f44 <FusionAhrsReset>
}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0800bcc4 	.word	0x0800bcc4

08000f44 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm. This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8000f44:	b480      	push	{r7}
 8000f46:	b091      	sub	sp, #68	@ 0x44
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
    ahrs->initialising = true;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <FusionAhrsReset+0xc4>)
 8000f90:	639a      	str	r2, [r3, #56]	@ 0x38
    ahrs->angularRateRecovery = false;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f04f 0200 	mov.w	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	649a      	str	r2, [r3, #72]	@ 0x48
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	64da      	str	r2, [r3, #76]	@ 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	659a      	str	r2, [r3, #88]	@ 0x58
    ahrs->accelerometerIgnored = false;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	661a      	str	r2, [r3, #96]	@ 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magnetometerIgnored = false;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	66da      	str	r2, [r3, #108]	@ 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8000ffa:	bf00      	nop
 8000ffc:	3744      	adds	r7, #68	@ 0x44
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	41200000 	.word	0x41200000

0800100c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	edd3 7a02 	vldr	s15, [r3, #8]
 800102c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d007      	beq.n	8001046 <FusionAhrsSetSettings+0x3a>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	edd3 7a02 	vldr	s15, [r3, #8]
 800103c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001170 <FusionAhrsSetSettings+0x164>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	e001      	b.n	800104a <FusionAhrsSetSettings+0x3e>
 8001046:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8001174 <FusionAhrsSetSettings+0x168>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	edd3 7a03 	vldr	s15, [r3, #12]
 8001056:	eef5 7a40 	vcmp.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d01b      	beq.n	8001098 <FusionAhrsSetSettings+0x8c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	edd3 7a03 	vldr	s15, [r3, #12]
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f7ff fa47 	bl	80004fc <FusionDegreesToRadians>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	f009 fb91 	bl	800a79c <sinf>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001086:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800108a:	eeb0 0a67 	vmov.f32	s0, s15
 800108e:	f009 fae1 	bl	800a654 <powf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	e001      	b.n	800109c <FusionAhrsSetSettings+0x90>
 8001098:	eddf 7a36 	vldr	s15, [pc, #216]	@ 8001174 <FusionAhrsSetSettings+0x168>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	d01b      	beq.n	80010ea <FusionAhrsSetSettings+0xde>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	f7ff fa1e 	bl	80004fc <FusionDegreesToRadians>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	f009 fb68 	bl	800a79c <sinf>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f009 fab8 	bl	800a654 <powf>
 80010e4:	eef0 7a40 	vmov.f32	s15, s0
 80010e8:	e001      	b.n	80010ee <FusionAhrsSetSettings+0xe2>
 80010ea:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8001174 <FusionAhrsSetSettings+0x168>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	461a      	mov	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	665a      	str	r2, [r3, #100]	@ 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	edd3 7a01 	vldr	s15, [r3, #4]
 8001116:	eef5 7a40 	vcmp.f32	s15, #0.0
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	d003      	beq.n	8001128 <FusionAhrsSetSettings+0x11c>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <FusionAhrsSetSettings+0x16c>)
 800112c:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a11      	ldr	r2, [pc, #68]	@ (8001178 <FusionAhrsSetSettings+0x16c>)
 8001132:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001152:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800115e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	3f7ae148 	.word	0x3f7ae148
 8001174:	7f7fffff 	.word	0x7f7fffff
 8001178:	7f7fffff 	.word	0x7f7fffff

0800117c <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b0bf      	sub	sp, #252	@ 0xfc
 8001180:	af00      	add	r7, sp, #0
 8001182:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001184:	eeb0 5a61 	vmov.f32	s10, s3
 8001188:	eef0 5a42 	vmov.f32	s11, s4
 800118c:	eeb0 6a62 	vmov.f32	s12, s5
 8001190:	eef0 6a43 	vmov.f32	s13, s6
 8001194:	eeb0 7a63 	vmov.f32	s14, s7
 8001198:	eef0 7a44 	vmov.f32	s15, s8
 800119c:	edc7 4a01 	vstr	s9, [r7, #4]
 80011a0:	ed87 0a08 	vstr	s0, [r7, #32]
 80011a4:	edc7 0a09 	vstr	s1, [r7, #36]	@ 0x24
 80011a8:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 80011ac:	ed87 5a05 	vstr	s10, [r7, #20]
 80011b0:	edc7 5a06 	vstr	s11, [r7, #24]
 80011b4:	ed87 6a07 	vstr	s12, [r7, #28]
 80011b8:	edc7 6a02 	vstr	s13, [r7, #8]
 80011bc:	ed87 7a03 	vstr	s14, [r7, #12]
 80011c0:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 80011c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c6:	3328      	adds	r3, #40	@ 0x28
 80011c8:	f107 0214 	add.w	r2, r7, #20
 80011cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabsf(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabsf(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 80011d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80011d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80011da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e8:	dc17      	bgt.n	800121a <FusionAhrsUpdate+0x9e>
 80011ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011ee:	eeb0 7ae7 	vabs.f32	s14, s15
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	dc0b      	bgt.n	800121a <FusionAhrsUpdate+0x9e>
 8001202:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001206:	eeb0 7ae7 	vabs.f32	s14, s15
 800120a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800120c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001210:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	dd15      	ble.n	8001246 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001220:	3318      	adds	r3, #24
 8001222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001224:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 8001228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800122a:	f7ff fe8b 	bl	8000f44 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	f103 0418 	add.w	r4, r3, #24
 8001234:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 800123e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising) {
 8001246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001248:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800124c:	2b00      	cmp	r3, #0
 800124e:	d02d      	beq.n	80012ac <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8001250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001252:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001258:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 800126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001270:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001276:	edd3 7a01 	vldr	s15, [r3, #4]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d407      	bmi.n	8001294 <FusionAhrsUpdate+0x118>
 8001284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001286:	edd3 7a01 	vldr	s15, [r3, #4]
 800128a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d10b      	bne.n	80012ac <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8001294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129a:	639a      	str	r2, [r3, #56]	@ 0x38
            ahrs->initialising = false;
 800129c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
            ahrs->angularRateRecovery = false;
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80012ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012ae:	f000 faf4 	bl	800189a <HalfGravity>
 80012b2:	eef0 6a40 	vmov.f32	s13, s0
 80012b6:	eeb0 7a60 	vmov.f32	s14, s1
 80012ba:	eef0 7a41 	vmov.f32	s15, s2
 80012be:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80012c2:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80012c6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    ahrs->accelerometerIgnored = true;
 80012e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 80012ea:	edd7 6a05 	vldr	s13, [r7, #20]
 80012ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80012f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f6:	eeb0 0a66 	vmov.f32	s0, s13
 80012fa:	eef0 0a47 	vmov.f32	s1, s14
 80012fe:	eeb0 1a67 	vmov.f32	s2, s15
 8001302:	f7ff f93f 	bl	8000584 <FusionVectorIsZero>
 8001306:	4603      	mov	r3, r0
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 809c 	beq.w	800144c <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 8001314:	edd7 6a05 	vldr	s13, [r7, #20]
 8001318:	ed97 7a06 	vldr	s14, [r7, #24]
 800131c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001320:	eeb0 0a66 	vmov.f32	s0, s13
 8001324:	eef0 0a47 	vmov.f32	s1, s14
 8001328:	eeb0 1a67 	vmov.f32	s2, s15
 800132c:	f7ff fb60 	bl	80009f0 <FusionVectorNormalise>
 8001330:	eef0 6a40 	vmov.f32	s13, s0
 8001334:	eeb0 7a60 	vmov.f32	s14, s1
 8001338:	eef0 7a41 	vmov.f32	s15, s2
 800133c:	edc7 6a28 	vstr	s13, [r7, #160]	@ 0xa0
 8001340:	ed87 7a29 	vstr	s14, [r7, #164]	@ 0xa4
 8001344:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
 8001348:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800134a:	ed97 5a25 	vldr	s10, [r7, #148]	@ 0x94
 800134e:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001352:	ed97 6a27 	vldr	s12, [r7, #156]	@ 0x9c
 8001356:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 800135a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800135e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001362:	eef0 1a45 	vmov.f32	s3, s10
 8001366:	eeb0 2a65 	vmov.f32	s4, s11
 800136a:	eef0 2a46 	vmov.f32	s5, s12
 800136e:	eeb0 0a66 	vmov.f32	s0, s13
 8001372:	eef0 0a47 	vmov.f32	s1, s14
 8001376:	eeb0 1a67 	vmov.f32	s2, s15
 800137a:	f000 fc55 	bl	8001c28 <Feedback>
 800137e:	eef0 6a40 	vmov.f32	s13, s0
 8001382:	eeb0 7a60 	vmov.f32	s14, s1
 8001386:	eef0 7a41 	vmov.f32	s15, s2
 800138a:	edc4 6a11 	vstr	s13, [r4, #68]	@ 0x44
 800138e:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
 8001392:	edc4 7a13 	vstr	s15, [r4, #76]	@ 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8001396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001398:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800139c:	2b00      	cmp	r3, #0
 800139e:	d118      	bne.n	80013d2 <FusionAhrsUpdate+0x256>
 80013a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a2:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80013a6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80013aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80013ae:	eeb0 0a66 	vmov.f32	s0, s13
 80013b2:	eef0 0a47 	vmov.f32	s1, s14
 80013b6:	eeb0 1a67 	vmov.f32	s2, s15
 80013ba:	f7ff facf 	bl	800095c <FusionVectorMagnitudeSquared>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d0:	d80a      	bhi.n	80013e8 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 80013d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 80013da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013de:	f1a3 0209 	sub.w	r2, r3, #9
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80013e6:	e004      	b.n	80013f2 <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 80013e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 80013f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80013fa:	429a      	cmp	r2, r3
 80013fc:	dd07      	ble.n	800140e <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	2200      	movs	r2, #0
 8001402:	665a      	str	r2, [r3, #100]	@ 0x64
            ahrs->accelerometerIgnored = false;
 8001404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001406:	2200      	movs	r2, #0
 8001408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800140c:	e004      	b.n	8001418 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800140e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	461a      	mov	r2, r3
 8001414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001416:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 8001418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141a:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	461a      	mov	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f000 fcb5 	bl	8001d92 <Clamp>
 8001428:	4602      	mov	r2, r0
 800142a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142c:	661a      	str	r2, [r3, #96]	@ 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 800142e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001430:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001434:	f083 0301 	eor.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 800143e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001440:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001444:	3244      	adds	r2, #68	@ 0x44
 8001446:	ca07      	ldmia	r2, {r0, r1, r2}
 8001448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	673b      	str	r3, [r7, #112]	@ 0x70
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	677b      	str	r3, [r7, #116]	@ 0x74
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	67bb      	str	r3, [r7, #120]	@ 0x78
    ahrs->magnetometerIgnored = true;
 800145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 8001466:	edd7 6a02 	vldr	s13, [r7, #8]
 800146a:	ed97 7a03 	vldr	s14, [r7, #12]
 800146e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001472:	eeb0 0a66 	vmov.f32	s0, s13
 8001476:	eef0 0a47 	vmov.f32	s1, s14
 800147a:	eeb0 1a67 	vmov.f32	s2, s15
 800147e:	f7ff f881 	bl	8000584 <FusionVectorIsZero>
 8001482:	4603      	mov	r3, r0
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80d1 	beq.w	8001632 <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 8001490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001492:	f000 fabf 	bl	8001a14 <HalfMagnetic>
 8001496:	eef0 6a40 	vmov.f32	s13, s0
 800149a:	eeb0 7a60 	vmov.f32	s14, s1
 800149e:	eef0 7a41 	vmov.f32	s15, s2
 80014a2:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80014a6:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80014aa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 80014ae:	ed97 5a02 	vldr	s10, [r7, #8]
 80014b2:	edd7 5a03 	vldr	s11, [r7, #12]
 80014b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80014ba:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80014be:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80014c2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80014c6:	eef0 1a45 	vmov.f32	s3, s10
 80014ca:	eeb0 2a65 	vmov.f32	s4, s11
 80014ce:	eef0 2a46 	vmov.f32	s5, s12
 80014d2:	eeb0 0a66 	vmov.f32	s0, s13
 80014d6:	eef0 0a47 	vmov.f32	s1, s14
 80014da:	eeb0 1a67 	vmov.f32	s2, s15
 80014de:	f7ff f981 	bl	80007e4 <FusionVectorCrossProduct>
 80014e2:	eef0 6a40 	vmov.f32	s13, s0
 80014e6:	eeb0 7a60 	vmov.f32	s14, s1
 80014ea:	eef0 7a41 	vmov.f32	s15, s2
 80014ee:	edc7 6a2b 	vstr	s13, [r7, #172]	@ 0xac
 80014f2:	ed87 7a2c 	vstr	s14, [r7, #176]	@ 0xb0
 80014f6:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
 80014fa:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80014fe:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001502:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001506:	eeb0 0a66 	vmov.f32	s0, s13
 800150a:	eef0 0a47 	vmov.f32	s1, s14
 800150e:	eeb0 1a67 	vmov.f32	s2, s15
 8001512:	f7ff fa6d 	bl	80009f0 <FusionVectorNormalise>
 8001516:	eef0 6a40 	vmov.f32	s13, s0
 800151a:	eeb0 7a60 	vmov.f32	s14, s1
 800151e:	eef0 7a41 	vmov.f32	s15, s2
 8001522:	edc7 6a2e 	vstr	s13, [r7, #184]	@ 0xb8
 8001526:	ed87 7a2f 	vstr	s14, [r7, #188]	@ 0xbc
 800152a:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
 800152e:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8001530:	ed97 5a0c 	vldr	s10, [r7, #48]	@ 0x30
 8001534:	edd7 5a0d 	vldr	s11, [r7, #52]	@ 0x34
 8001538:	ed97 6a0e 	vldr	s12, [r7, #56]	@ 0x38
 800153c:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001540:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001544:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001548:	eef0 1a45 	vmov.f32	s3, s10
 800154c:	eeb0 2a65 	vmov.f32	s4, s11
 8001550:	eef0 2a46 	vmov.f32	s5, s12
 8001554:	eeb0 0a66 	vmov.f32	s0, s13
 8001558:	eef0 0a47 	vmov.f32	s1, s14
 800155c:	eeb0 1a67 	vmov.f32	s2, s15
 8001560:	f000 fb62 	bl	8001c28 <Feedback>
 8001564:	eef0 6a40 	vmov.f32	s13, s0
 8001568:	eeb0 7a60 	vmov.f32	s14, s1
 800156c:	eef0 7a41 	vmov.f32	s15, s2
 8001570:	edc4 6a14 	vstr	s13, [r4, #80]	@ 0x50
 8001574:	ed84 7a15 	vstr	s14, [r4, #84]	@ 0x54
 8001578:	edc4 7a16 	vstr	s15, [r4, #88]	@ 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if (ahrs->initialising || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <FusionAhrsUpdate+0x43c>
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800158c:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001590:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001594:	eeb0 0a66 	vmov.f32	s0, s13
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 1a67 	vmov.f32	s2, s15
 80015a0:	f7ff f9dc 	bl	800095c <FusionVectorMagnitudeSquared>
 80015a4:	eeb0 7a40 	vmov.f32	s14, s0
 80015a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80015ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b6:	d80a      	bhi.n	80015ce <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 80015b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 80015c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015c4:	f1a3 0209 	sub.w	r2, r3, #9
 80015c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ca:	66da      	str	r2, [r3, #108]	@ 0x6c
 80015cc:	e004      	b.n	80015d8 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 80015ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d6:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 80015d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dd07      	ble.n	80015f4 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 80015e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e6:	2200      	movs	r2, #0
 80015e8:	671a      	str	r2, [r3, #112]	@ 0x70
            ahrs->magnetometerIgnored = false;
 80015ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 80015f2:	e004      	b.n	80015fe <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	461a      	mov	r2, r3
 80015fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015fc:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 80015fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001600:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8001602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	461a      	mov	r2, r3
 8001608:	2100      	movs	r1, #0
 800160a:	f000 fbc2 	bl	8001d92 <Clamp>
 800160e:	4602      	mov	r2, r0
 8001610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001612:	66da      	str	r2, [r3, #108]	@ 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8001624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001626:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800162a:	3250      	adds	r2, #80	@ 0x50
 800162c:	ca07      	ldmia	r2, {r0, r1, r2}
 800162e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 8001632:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001636:	f7fe ff61 	bl	80004fc <FusionDegreesToRadians>
 800163a:	eeb0 6a40 	vmov.f32	s12, s0
 800163e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001642:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001646:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800164a:	eef0 1a46 	vmov.f32	s3, s12
 800164e:	eeb0 0a66 	vmov.f32	s0, s13
 8001652:	eef0 0a47 	vmov.f32	s1, s14
 8001656:	eeb0 1a67 	vmov.f32	s2, s15
 800165a:	f7ff f831 	bl	80006c0 <FusionVectorMultiplyScalar>
 800165e:	eef0 6a40 	vmov.f32	s13, s0
 8001662:	eeb0 7a60 	vmov.f32	s14, s1
 8001666:	eef0 7a41 	vmov.f32	s15, s2
 800166a:	edc7 6a16 	vstr	s13, [r7, #88]	@ 0x58
 800166e:	ed87 7a17 	vstr	s14, [r7, #92]	@ 0x5c
 8001672:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8001676:	ed97 5a1c 	vldr	s10, [r7, #112]	@ 0x70
 800167a:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 800167e:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 8001682:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8001686:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800168a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 800168e:	eef0 1a45 	vmov.f32	s3, s10
 8001692:	eeb0 2a65 	vmov.f32	s4, s11
 8001696:	eef0 2a46 	vmov.f32	s5, s12
 800169a:	eeb0 0a66 	vmov.f32	s0, s13
 800169e:	eef0 0a47 	vmov.f32	s1, s14
 80016a2:	eeb0 1a67 	vmov.f32	s2, s15
 80016a6:	f7fe ff9d 	bl	80005e4 <FusionVectorAdd>
 80016aa:	eef0 6a40 	vmov.f32	s13, s0
 80016ae:	eeb0 7a60 	vmov.f32	s14, s1
 80016b2:	eef0 7a41 	vmov.f32	s15, s2
 80016b6:	edc7 6a31 	vstr	s13, [r7, #196]	@ 0xc4
 80016ba:	ed87 7a32 	vstr	s14, [r7, #200]	@ 0xc8
 80016be:	edc7 7a33 	vstr	s15, [r7, #204]	@ 0xcc
 80016c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c4:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80016c8:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 80016cc:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 80016d0:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 80016d4:	eef0 1a46 	vmov.f32	s3, s12
 80016d8:	eeb0 0a66 	vmov.f32	s0, s13
 80016dc:	eef0 0a47 	vmov.f32	s1, s14
 80016e0:	eeb0 1a67 	vmov.f32	s2, s15
 80016e4:	f7fe ffec 	bl	80006c0 <FusionVectorMultiplyScalar>
 80016e8:	eef0 6a40 	vmov.f32	s13, s0
 80016ec:	eeb0 7a60 	vmov.f32	s14, s1
 80016f0:	eef0 7a41 	vmov.f32	s15, s2
 80016f4:	edc7 6a34 	vstr	s13, [r7, #208]	@ 0xd0
 80016f8:	ed87 7a35 	vstr	s14, [r7, #212]	@ 0xd4
 80016fc:	edc7 7a36 	vstr	s15, [r7, #216]	@ 0xd8
 8001700:	ed97 5a34 	vldr	s10, [r7, #208]	@ 0xd0
 8001704:	edd7 5a35 	vldr	s11, [r7, #212]	@ 0xd4
 8001708:	ed97 6a36 	vldr	s12, [r7, #216]	@ 0xd8
 800170c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001710:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001714:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001718:	eef0 1a45 	vmov.f32	s3, s10
 800171c:	eeb0 2a65 	vmov.f32	s4, s11
 8001720:	eef0 2a46 	vmov.f32	s5, s12
 8001724:	eeb0 0a66 	vmov.f32	s0, s13
 8001728:	eef0 0a47 	vmov.f32	s1, s14
 800172c:	eeb0 1a67 	vmov.f32	s2, s15
 8001730:	f7fe ff58 	bl	80005e4 <FusionVectorAdd>
 8001734:	eef0 6a40 	vmov.f32	s13, s0
 8001738:	eeb0 7a60 	vmov.f32	s14, s1
 800173c:	eef0 7a41 	vmov.f32	s15, s2
 8001740:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8001744:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8001748:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 800174c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001750:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001754:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001758:	edd7 1a01 	vldr	s3, [r7, #4]
 800175c:	eeb0 0a66 	vmov.f32	s0, s13
 8001760:	eef0 0a47 	vmov.f32	s1, s14
 8001764:	eeb0 1a67 	vmov.f32	s2, s15
 8001768:	f7fe ffaa 	bl	80006c0 <FusionVectorMultiplyScalar>
 800176c:	eef0 6a40 	vmov.f32	s13, s0
 8001770:	eeb0 7a60 	vmov.f32	s14, s1
 8001774:	eef0 7a41 	vmov.f32	s15, s2
 8001778:	edc7 6a37 	vstr	s13, [r7, #220]	@ 0xdc
 800177c:	ed87 7a38 	vstr	s14, [r7, #224]	@ 0xe0
 8001780:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
 8001784:	edd7 4a37 	vldr	s9, [r7, #220]	@ 0xdc
 8001788:	ed97 5a38 	vldr	s10, [r7, #224]	@ 0xe0
 800178c:	edd7 5a39 	vldr	s11, [r7, #228]	@ 0xe4
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	ed93 6a06 	vldr	s12, [r3, #24]
 8001796:	edd3 6a07 	vldr	s13, [r3, #28]
 800179a:	ed93 7a08 	vldr	s14, [r3, #32]
 800179e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017a2:	eeb0 2a64 	vmov.f32	s4, s9
 80017a6:	eef0 2a45 	vmov.f32	s5, s10
 80017aa:	eeb0 3a65 	vmov.f32	s6, s11
 80017ae:	eeb0 0a46 	vmov.f32	s0, s12
 80017b2:	eef0 0a66 	vmov.f32	s1, s13
 80017b6:	eeb0 1a47 	vmov.f32	s2, s14
 80017ba:	eef0 1a67 	vmov.f32	s3, s15
 80017be:	f7ff fa8e 	bl	8000cde <FusionQuaternionMultiplyVector>
 80017c2:	eeb0 6a40 	vmov.f32	s12, s0
 80017c6:	eef0 6a60 	vmov.f32	s13, s1
 80017ca:	eeb0 7a41 	vmov.f32	s14, s2
 80017ce:	eef0 7a61 	vmov.f32	s15, s3
 80017d2:	ed87 6a3a 	vstr	s12, [r7, #232]	@ 0xe8
 80017d6:	edc7 6a3b 	vstr	s13, [r7, #236]	@ 0xec
 80017da:	ed87 7a3c 	vstr	s14, [r7, #240]	@ 0xf0
 80017de:	edc7 7a3d 	vstr	s15, [r7, #244]	@ 0xf4
 80017e2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80017e4:	ed97 4a3a 	vldr	s8, [r7, #232]	@ 0xe8
 80017e8:	edd7 4a3b 	vldr	s9, [r7, #236]	@ 0xec
 80017ec:	ed97 5a3c 	vldr	s10, [r7, #240]	@ 0xf0
 80017f0:	edd7 5a3d 	vldr	s11, [r7, #244]	@ 0xf4
 80017f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f6:	ed93 6a06 	vldr	s12, [r3, #24]
 80017fa:	edd3 6a07 	vldr	s13, [r3, #28]
 80017fe:	ed93 7a08 	vldr	s14, [r3, #32]
 8001802:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001806:	eeb0 2a44 	vmov.f32	s4, s8
 800180a:	eef0 2a64 	vmov.f32	s5, s9
 800180e:	eeb0 3a45 	vmov.f32	s6, s10
 8001812:	eef0 3a65 	vmov.f32	s7, s11
 8001816:	eeb0 0a46 	vmov.f32	s0, s12
 800181a:	eef0 0a66 	vmov.f32	s1, s13
 800181e:	eeb0 1a47 	vmov.f32	s2, s14
 8001822:	eef0 1a67 	vmov.f32	s3, s15
 8001826:	f7ff f936 	bl	8000a96 <FusionQuaternionAdd>
 800182a:	eeb0 6a40 	vmov.f32	s12, s0
 800182e:	eef0 6a60 	vmov.f32	s13, s1
 8001832:	eeb0 7a41 	vmov.f32	s14, s2
 8001836:	eef0 7a61 	vmov.f32	s15, s3
 800183a:	ed84 6a06 	vstr	s12, [r4, #24]
 800183e:	edc4 6a07 	vstr	s13, [r4, #28]
 8001842:	ed84 7a08 	vstr	s14, [r4, #32]
 8001846:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 800184a:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 800184c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800184e:	ed93 6a06 	vldr	s12, [r3, #24]
 8001852:	edd3 6a07 	vldr	s13, [r3, #28]
 8001856:	ed93 7a08 	vldr	s14, [r3, #32]
 800185a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800185e:	eeb0 0a46 	vmov.f32	s0, s12
 8001862:	eef0 0a66 	vmov.f32	s1, s13
 8001866:	eeb0 1a47 	vmov.f32	s2, s14
 800186a:	eef0 1a67 	vmov.f32	s3, s15
 800186e:	f7ff fad6 	bl	8000e1e <FusionQuaternionNormalise>
 8001872:	eeb0 6a40 	vmov.f32	s12, s0
 8001876:	eef0 6a60 	vmov.f32	s13, s1
 800187a:	eeb0 7a41 	vmov.f32	s14, s2
 800187e:	eef0 7a61 	vmov.f32	s15, s3
 8001882:	ed84 6a06 	vstr	s12, [r4, #24]
 8001886:	edc4 6a07 	vstr	s13, [r4, #28]
 800188a:	ed84 7a08 	vstr	s14, [r4, #32]
 800188e:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 8001892:	bf00      	nop
 8001894:	37fc      	adds	r7, #252	@ 0xfc
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}

0800189a <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 800189a:	b480      	push	{r7}
 800189c:	b093      	sub	sp, #76	@ 0x4c
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	dc02      	bgt.n	80018b0 <HalfGravity+0x16>
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	da03      	bge.n	80018b6 <HalfGravity+0x1c>
 80018ae:	e094      	b.n	80019da <HalfGravity+0x140>
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d048      	beq.n	8001946 <HalfGravity+0xac>
 80018b4:	e091      	b.n	80019da <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	edd3 6a06 	vldr	s13, [r3, #24]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	edd3 7a08 	vldr	s15, [r3, #32]
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80018da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	edd3 6a06 	vldr	s13, [r3, #24]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80018fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8001902:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	ed93 7a06 	vldr	s14, [r3, #24]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001916:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800191a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800192a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800192e:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8001932:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8001936:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800193a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800193e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001940:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001944:	e052      	b.n	80019ec <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	ed93 7a06 	vldr	s14, [r3, #24]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	edd3 6a07 	vldr	s13, [r3, #28]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800196a:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	ed93 7a08 	vldr	s14, [r3, #32]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	edd3 6a06 	vldr	s13, [r3, #24]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	edd3 7a07 	vldr	s15, [r3, #28]
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8001996:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	ed93 7a06 	vldr	s14, [r3, #24]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80019c6:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80019ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019ce:	f107 0218 	add.w	r2, r7, #24
 80019d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019d8:	e008      	b.n	80019ec <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	647b      	str	r3, [r7, #68]	@ 0x44
#undef Q
}
 80019ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80019ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f2:	ee06 1a90 	vmov	s13, r1
 80019f6:	ee07 2a10 	vmov	s14, r2
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001a02:	eef0 0a47 	vmov.f32	s1, s14
 8001a06:	eeb0 1a67 	vmov.f32	s2, s15
 8001a0a:	374c      	adds	r7, #76	@ 0x4c
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8001a14:	b480      	push	{r7}
 8001a16:	b097      	sub	sp, #92	@ 0x5c
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	f000 809a 	beq.w	8001b5a <HalfMagnetic+0x146>
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f300 80e1 	bgt.w	8001bee <HalfMagnetic+0x1da>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HalfMagnetic+0x22>
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d048      	beq.n	8001ac6 <HalfMagnetic+0xb2>
 8001a34:	e0db      	b.n	8001bee <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001a5a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a72:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001a8a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	edd3 6a06 	vldr	s13, [r3, #24]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001ab2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8001ab6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001aba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ac0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ac4:	e09c      	b.n	8001c00 <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001af2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	edd3 6a07 	vldr	s13, [r3, #28]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b16:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001b1a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b42:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8001b46:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8001b4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b4e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b58:	e052      	b.n	8001c00 <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8001b82:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001bb2:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	edd3 6a08 	vldr	s13, [r3, #32]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8001bda:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8001bde:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001be2:	f107 021c 	add.w	r2, r7, #28
 8001be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001bec:	e008      	b.n	8001c00 <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	657b      	str	r3, [r7, #84]	@ 0x54
#undef Q
}
 8001c00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c06:	ee06 1a90 	vmov	s13, r1
 8001c0a:	ee07 2a10 	vmov	s14, r2
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb0 0a66 	vmov.f32	s0, s13
 8001c16:	eef0 0a47 	vmov.f32	s1, s14
 8001c1a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c1e:	375c      	adds	r7, #92	@ 0x5c
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	@ 0x40
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	eeb0 5a40 	vmov.f32	s10, s0
 8001c32:	eef0 5a60 	vmov.f32	s11, s1
 8001c36:	eeb0 6a41 	vmov.f32	s12, s2
 8001c3a:	eef0 6a61 	vmov.f32	s13, s3
 8001c3e:	eeb0 7a42 	vmov.f32	s14, s4
 8001c42:	eef0 7a62 	vmov.f32	s15, s5
 8001c46:	ed87 5a07 	vstr	s10, [r7, #28]
 8001c4a:	edc7 5a08 	vstr	s11, [r7, #32]
 8001c4e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8001c52:	edc7 6a04 	vstr	s13, [r7, #16]
 8001c56:	ed87 7a05 	vstr	s14, [r7, #20]
 8001c5a:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 8001c5e:	ed97 5a04 	vldr	s10, [r7, #16]
 8001c62:	edd7 5a05 	vldr	s11, [r7, #20]
 8001c66:	ed97 6a06 	vldr	s12, [r7, #24]
 8001c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c76:	eef0 1a45 	vmov.f32	s3, s10
 8001c7a:	eeb0 2a65 	vmov.f32	s4, s11
 8001c7e:	eef0 2a46 	vmov.f32	s5, s12
 8001c82:	eeb0 0a66 	vmov.f32	s0, s13
 8001c86:	eef0 0a47 	vmov.f32	s1, s14
 8001c8a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c8e:	f7fe fe0f 	bl	80008b0 <FusionVectorDotProduct>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	d540      	bpl.n	8001d22 <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8001ca0:	ed97 5a04 	vldr	s10, [r7, #16]
 8001ca4:	edd7 5a05 	vldr	s11, [r7, #20]
 8001ca8:	ed97 6a06 	vldr	s12, [r7, #24]
 8001cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cb4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cb8:	eef0 1a45 	vmov.f32	s3, s10
 8001cbc:	eeb0 2a65 	vmov.f32	s4, s11
 8001cc0:	eef0 2a46 	vmov.f32	s5, s12
 8001cc4:	eeb0 0a66 	vmov.f32	s0, s13
 8001cc8:	eef0 0a47 	vmov.f32	s1, s14
 8001ccc:	eeb0 1a67 	vmov.f32	s2, s15
 8001cd0:	f7fe fd88 	bl	80007e4 <FusionVectorCrossProduct>
 8001cd4:	eef0 6a40 	vmov.f32	s13, s0
 8001cd8:	eeb0 7a60 	vmov.f32	s14, s1
 8001cdc:	eef0 7a41 	vmov.f32	s15, s2
 8001ce0:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001ce4:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001ce8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001cec:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001cf0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cf4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001cf8:	eeb0 0a66 	vmov.f32	s0, s13
 8001cfc:	eef0 0a47 	vmov.f32	s1, s14
 8001d00:	eeb0 1a67 	vmov.f32	s2, s15
 8001d04:	f7fe fe74 	bl	80009f0 <FusionVectorNormalise>
 8001d08:	eef0 6a40 	vmov.f32	s13, s0
 8001d0c:	eeb0 7a60 	vmov.f32	s14, s1
 8001d10:	eef0 7a41 	vmov.f32	s15, s2
 8001d14:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8001d18:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8001d1c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 8001d20:	e025      	b.n	8001d6e <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8001d22:	ed97 5a04 	vldr	s10, [r7, #16]
 8001d26:	edd7 5a05 	vldr	s11, [r7, #20]
 8001d2a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d36:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d3a:	eef0 1a45 	vmov.f32	s3, s10
 8001d3e:	eeb0 2a65 	vmov.f32	s4, s11
 8001d42:	eef0 2a46 	vmov.f32	s5, s12
 8001d46:	eeb0 0a66 	vmov.f32	s0, s13
 8001d4a:	eef0 0a47 	vmov.f32	s1, s14
 8001d4e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d52:	f7fe fd47 	bl	80007e4 <FusionVectorCrossProduct>
 8001d56:	eef0 6a40 	vmov.f32	s13, s0
 8001d5a:	eeb0 7a60 	vmov.f32	s14, s1
 8001d5e:	eef0 7a41 	vmov.f32	s15, s2
 8001d62:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8001d66:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8001d6a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
}
 8001d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	ee06 1a90 	vmov	s13, r1
 8001d78:	ee07 2a10 	vmov	s14, r2
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb0 0a66 	vmov.f32	s0, s13
 8001d84:	eef0 0a47 	vmov.f32	s1, s14
 8001d88:	eeb0 1a67 	vmov.f32	s2, s15
 8001d8c:	3740      	adds	r7, #64	@ 0x40
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	da01      	bge.n	8001daa <Clamp+0x18>
        return min;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	e006      	b.n	8001db8 <Clamp+0x26>
    }
    if (value > max) {
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dd01      	ble.n	8001db6 <Clamp+0x24>
        return max;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e000      	b.n	8001db8 <Clamp+0x26>
    }
    return value;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	61f8      	str	r0, [r7, #28]
 8001dcc:	eeb0 5a40 	vmov.f32	s10, s0
 8001dd0:	eef0 5a60 	vmov.f32	s11, s1
 8001dd4:	eeb0 6a41 	vmov.f32	s12, s2
 8001dd8:	eef0 6a61 	vmov.f32	s13, s3
 8001ddc:	eeb0 7a42 	vmov.f32	s14, s4
 8001de0:	eef0 7a62 	vmov.f32	s15, s5
 8001de4:	ed87 3a00 	vstr	s6, [r7]
 8001de8:	ed87 5a04 	vstr	s10, [r7, #16]
 8001dec:	edc7 5a05 	vstr	s11, [r7, #20]
 8001df0:	ed87 6a06 	vstr	s12, [r7, #24]
 8001df4:	edc7 6a01 	vstr	s13, [r7, #4]
 8001df8:	ed87 7a02 	vstr	s14, [r7, #8]
 8001dfc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e12:	ed97 3a09 	vldr	s6, [r7, #36]	@ 0x24
 8001e16:	edd7 3a0a 	vldr	s7, [r7, #40]	@ 0x28
 8001e1a:	ed97 4a0b 	vldr	s8, [r7, #44]	@ 0x2c
 8001e1e:	ed97 5a01 	vldr	s10, [r7, #4]
 8001e22:	edd7 5a02 	vldr	s11, [r7, #8]
 8001e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8001e2a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001e2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e36:	edd7 4a00 	vldr	s9, [r7]
 8001e3a:	eef0 1a45 	vmov.f32	s3, s10
 8001e3e:	eeb0 2a65 	vmov.f32	s4, s11
 8001e42:	eef0 2a46 	vmov.f32	s5, s12
 8001e46:	eeb0 0a66 	vmov.f32	s0, s13
 8001e4a:	eef0 0a47 	vmov.f32	s1, s14
 8001e4e:	eeb0 1a67 	vmov.f32	s2, s15
 8001e52:	69f8      	ldr	r0, [r7, #28]
 8001e54:	f7ff f992 	bl	800117c <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising) {
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8001e62:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001e74 <FusionAhrsUpdateNoMagnetometer+0xb0>
 8001e66:	69f8      	ldr	r0, [r7, #28]
 8001e68:	f000 f829 	bl	8001ebe <FusionAhrsSetHeading>
    }
}
 8001e6c:	bf00      	nop
 8001e6e:	3730      	adds	r7, #48	@ 0x30
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	00000000 	.word	0x00000000

08001e78 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8001e78:	b490      	push	{r4, r7}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f107 0418 	add.w	r4, r7, #24
 8001e86:	3318      	adds	r3, #24
 8001e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e8e:	69b8      	ldr	r0, [r7, #24]
 8001e90:	69f9      	ldr	r1, [r7, #28]
 8001e92:	6a3a      	ldr	r2, [r7, #32]
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	ee06 0a10 	vmov	s12, r0
 8001e9a:	ee06 1a90 	vmov	s13, r1
 8001e9e:	ee07 2a10 	vmov	s14, r2
 8001ea2:	ee07 3a90 	vmov	s15, r3
}
 8001ea6:	eeb0 0a46 	vmov.f32	s0, s12
 8001eaa:	eef0 0a66 	vmov.f32	s1, s13
 8001eae:	eeb0 1a47 	vmov.f32	s2, s14
 8001eb2:	eef0 1a67 	vmov.f32	s3, s15
 8001eb6:	3728      	adds	r7, #40	@ 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc90      	pop	{r4, r7}
 8001ebc:	4770      	bx	lr

08001ebe <FusionAhrsSetHeading>:
 * algorithm. This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8001ebe:	b590      	push	{r4, r7, lr}
 8001ec0:	b089      	sub	sp, #36	@ 0x24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	edd3 6a07 	vldr	s13, [r3, #28]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eea:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1a:	eef0 0a67 	vmov.f32	s1, s15
 8001f1e:	eeb0 0a46 	vmov.f32	s0, s12
 8001f22:	f008 fb95 	bl	800a650 <atan2f>
 8001f26:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8001f2a:	ed97 0a00 	vldr	s0, [r7]
 8001f2e:	f7fe fae5 	bl	80004fc <FusionDegreesToRadians>
 8001f32:	eeb0 7a40 	vmov.f32	s14, s0
 8001f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8001f4a:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f4e:	f008 fbd9 	bl	800a704 <cosf>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8001f56:	edc7 7a02 	vstr	s15, [r7, #8]
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8001f66:	ed97 0a06 	vldr	s0, [r7, #24]
 8001f6a:	f008 fc17 	bl	800a79c <sinf>
 8001f6e:	eef0 7a40 	vmov.f32	s15, s0
 8001f72:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8001f76:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8001f7a:	687c      	ldr	r4, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	ed93 4a06 	vldr	s8, [r3, #24]
 8001f82:	edd3 4a07 	vldr	s9, [r3, #28]
 8001f86:	ed93 5a08 	vldr	s10, [r3, #32]
 8001f8a:	edd3 5a09 	vldr	s11, [r3, #36]	@ 0x24
 8001f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f92:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f96:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f9e:	eeb0 2a44 	vmov.f32	s4, s8
 8001fa2:	eef0 2a64 	vmov.f32	s5, s9
 8001fa6:	eeb0 3a45 	vmov.f32	s6, s10
 8001faa:	eef0 3a65 	vmov.f32	s7, s11
 8001fae:	eeb0 0a46 	vmov.f32	s0, s12
 8001fb2:	eef0 0a66 	vmov.f32	s1, s13
 8001fb6:	eeb0 1a47 	vmov.f32	s2, s14
 8001fba:	eef0 1a67 	vmov.f32	s3, s15
 8001fbe:	f7fe fdcc 	bl	8000b5a <FusionQuaternionMultiply>
 8001fc2:	eeb0 6a40 	vmov.f32	s12, s0
 8001fc6:	eef0 6a60 	vmov.f32	s13, s1
 8001fca:	eeb0 7a41 	vmov.f32	s14, s2
 8001fce:	eef0 7a61 	vmov.f32	s15, s3
 8001fd2:	ed84 6a06 	vstr	s12, [r4, #24]
 8001fd6:	edc4 6a07 	vstr	s13, [r4, #28]
 8001fda:	ed84 7a08 	vstr	s14, [r4, #32]
 8001fde:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
#undef Q
}
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}

08001fea <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8001fea:	b480      	push	{r7}
 8001fec:	b091      	sub	sp, #68	@ 0x44
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	eeb0 5a40 	vmov.f32	s10, s0
 8001ff4:	eef0 5a60 	vmov.f32	s11, s1
 8001ff8:	eeb0 6a41 	vmov.f32	s12, s2
 8001ffc:	eef0 6a61 	vmov.f32	s13, s3
 8002000:	eeb0 7a42 	vmov.f32	s14, s4
 8002004:	eef0 7a62 	vmov.f32	s15, s5
 8002008:	ed87 5a07 	vstr	s10, [r7, #28]
 800200c:	edc7 5a08 	vstr	s11, [r7, #32]
 8002010:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8002014:	edc7 6a04 	vstr	s13, [r7, #16]
 8002018:	ed87 7a05 	vstr	s14, [r7, #20]
 800201c:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 8002020:	ed97 7a07 	vldr	s14, [r7, #28]
 8002024:	edd7 7a04 	vldr	s15, [r7, #16]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800202c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8002030:	ed97 7a08 	vldr	s14, [r7, #32]
 8002034:	edd7 7a05 	vldr	s15, [r7, #20]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800203c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8002040:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002044:	edd7 7a06 	vldr	s15, [r7, #24]
 8002048:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800204c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return result;
 8002050:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002054:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002058:	ca07      	ldmia	r2, {r0, r1, r2}
 800205a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800205e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002060:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002064:	ee06 1a90 	vmov	s13, r1
 8002068:	ee07 2a10 	vmov	s14, r2
 800206c:	ee07 3a90 	vmov	s15, r3
}
 8002070:	eeb0 0a66 	vmov.f32	s0, s13
 8002074:	eef0 0a47 	vmov.f32	s1, s14
 8002078:	eeb0 1a67 	vmov.f32	s2, s15
 800207c:	3744      	adds	r7, #68	@ 0x44
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8002086:	b480      	push	{r7}
 8002088:	b091      	sub	sp, #68	@ 0x44
 800208a:	af00      	add	r7, sp, #0
 800208c:	eeb0 5a40 	vmov.f32	s10, s0
 8002090:	eef0 5a60 	vmov.f32	s11, s1
 8002094:	eeb0 6a41 	vmov.f32	s12, s2
 8002098:	eef0 6a61 	vmov.f32	s13, s3
 800209c:	eeb0 7a42 	vmov.f32	s14, s4
 80020a0:	eef0 7a62 	vmov.f32	s15, s5
 80020a4:	ed87 5a07 	vstr	s10, [r7, #28]
 80020a8:	edc7 5a08 	vstr	s11, [r7, #32]
 80020ac:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80020b0:	edc7 6a04 	vstr	s13, [r7, #16]
 80020b4:	ed87 7a05 	vstr	s14, [r7, #20]
 80020b8:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80020bc:	ed97 7a07 	vldr	s14, [r7, #28]
 80020c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80020c8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 80020cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80020d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80020d8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 80020dc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80020e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80020e8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return result;
 80020ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020f0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80020fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002100:	ee06 1a90 	vmov	s13, r1
 8002104:	ee07 2a10 	vmov	s14, r2
 8002108:	ee07 3a90 	vmov	s15, r3
}
 800210c:	eeb0 0a66 	vmov.f32	s0, s13
 8002110:	eef0 0a47 	vmov.f32	s1, s14
 8002114:	eeb0 1a67 	vmov.f32	s2, s15
 8002118:	3744      	adds	r7, #68	@ 0x44
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002122:	b480      	push	{r7}
 8002124:	b08f      	sub	sp, #60	@ 0x3c
 8002126:	af00      	add	r7, sp, #0
 8002128:	eef0 6a40 	vmov.f32	s13, s0
 800212c:	eeb0 7a60 	vmov.f32	s14, s1
 8002130:	eef0 7a41 	vmov.f32	s15, s2
 8002134:	edc7 1a04 	vstr	s3, [r7, #16]
 8002138:	edc7 6a05 	vstr	s13, [r7, #20]
 800213c:	ed87 7a06 	vstr	s14, [r7, #24]
 8002140:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8002144:	ed97 7a05 	vldr	s14, [r7, #20]
 8002148:	edd7 7a04 	vldr	s15, [r7, #16]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002150:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002154:	ed97 7a06 	vldr	s14, [r7, #24]
 8002158:	edd7 7a04 	vldr	s15, [r7, #16]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002160:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .z = vector.axis.z * scalar,
 8002164:	ed97 7a07 	vldr	s14, [r7, #28]
 8002168:	edd7 7a04 	vldr	s15, [r7, #16]
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002170:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    return result;
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	f107 0220 	add.w	r2, r7, #32
 800217c:	ca07      	ldmia	r2, {r0, r1, r2}
 800217e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002188:	ee06 1a90 	vmov	s13, r1
 800218c:	ee07 2a10 	vmov	s14, r2
 8002190:	ee07 3a90 	vmov	s15, r3
}
 8002194:	eeb0 0a66 	vmov.f32	s0, s13
 8002198:	eef0 0a47 	vmov.f32	s1, s14
 800219c:	eeb0 1a67 	vmov.f32	s2, s15
 80021a0:	373c      	adds	r7, #60	@ 0x3c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800220c <FusionOffsetInitialise+0x60>
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	441a      	add	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	3e00adfd 	.word	0x3e00adfd

08002210 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08f      	sub	sp, #60	@ 0x3c
 8002214:	af00      	add	r7, sp, #0
 8002216:	61f8      	str	r0, [r7, #28]
 8002218:	eef0 6a40 	vmov.f32	s13, s0
 800221c:	eeb0 7a60 	vmov.f32	s14, s1
 8002220:	eef0 7a41 	vmov.f32	s15, s2
 8002224:	edc7 6a04 	vstr	s13, [r7, #16]
 8002228:	ed87 7a05 	vstr	s14, [r7, #20]
 800222c:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	ed93 5a03 	vldr	s10, [r3, #12]
 8002236:	edd3 5a04 	vldr	s11, [r3, #16]
 800223a:	ed93 6a05 	vldr	s12, [r3, #20]
 800223e:	edd7 6a04 	vldr	s13, [r7, #16]
 8002242:	ed97 7a05 	vldr	s14, [r7, #20]
 8002246:	edd7 7a06 	vldr	s15, [r7, #24]
 800224a:	eef0 1a45 	vmov.f32	s3, s10
 800224e:	eeb0 2a65 	vmov.f32	s4, s11
 8002252:	eef0 2a46 	vmov.f32	s5, s12
 8002256:	eeb0 0a66 	vmov.f32	s0, s13
 800225a:	eef0 0a47 	vmov.f32	s1, s14
 800225e:	eeb0 1a67 	vmov.f32	s2, s15
 8002262:	f7ff ff10 	bl	8002086 <FusionVectorSubtract>
 8002266:	eef0 6a40 	vmov.f32	s13, s0
 800226a:	eeb0 7a60 	vmov.f32	s14, s1
 800226e:	eef0 7a41 	vmov.f32	s15, s2
 8002272:	edc7 6a04 	vstr	s13, [r7, #16]
 8002276:	ed87 7a05 	vstr	s14, [r7, #20]
 800227a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabsf(gyroscope.axis.x) > THRESHOLD) || (fabsf(gyroscope.axis.y) > THRESHOLD) || (fabsf(gyroscope.axis.z) > THRESHOLD)) {
 800227e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002282:	eef0 7ae7 	vabs.f32	s15, s15
 8002286:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dc15      	bgt.n	80022c0 <FusionOffsetUpdate+0xb0>
 8002294:	edd7 7a05 	vldr	s15, [r7, #20]
 8002298:	eef0 7ae7 	vabs.f32	s15, s15
 800229c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80022a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	dc0a      	bgt.n	80022c0 <FusionOffsetUpdate+0xb0>
 80022aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ae:	eef0 7ae7 	vabs.f32	s15, s15
 80022b2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80022b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	dd0a      	ble.n	80022d6 <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
        return gyroscope;
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	f107 0210 	add.w	r2, r7, #16
 80022ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022d4:	e060      	b.n	8002398 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20c      	bcs.n	80022fc <FusionOffsetUpdate+0xec>
        offset->timer++;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	609a      	str	r2, [r3, #8]
        return gyroscope;
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	f107 0210 	add.w	r2, r7, #16
 80022f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80022f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80022fa:	e04d      	b.n	8002398 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	ed93 6a00 	vldr	s12, [r3]
 8002302:	edd7 6a04 	vldr	s13, [r7, #16]
 8002306:	ed97 7a05 	vldr	s14, [r7, #20]
 800230a:	edd7 7a06 	vldr	s15, [r7, #24]
 800230e:	eef0 1a46 	vmov.f32	s3, s12
 8002312:	eeb0 0a66 	vmov.f32	s0, s13
 8002316:	eef0 0a47 	vmov.f32	s1, s14
 800231a:	eeb0 1a67 	vmov.f32	s2, s15
 800231e:	f7ff ff00 	bl	8002122 <FusionVectorMultiplyScalar>
 8002322:	eef0 6a40 	vmov.f32	s13, s0
 8002326:	eeb0 7a60 	vmov.f32	s14, s1
 800232a:	eef0 7a41 	vmov.f32	s15, s2
 800232e:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002332:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002336:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 800233a:	69fc      	ldr	r4, [r7, #28]
 800233c:	ed97 5a0b 	vldr	s10, [r7, #44]	@ 0x2c
 8002340:	edd7 5a0c 	vldr	s11, [r7, #48]	@ 0x30
 8002344:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	edd3 6a03 	vldr	s13, [r3, #12]
 800234e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002352:	edd3 7a05 	vldr	s15, [r3, #20]
 8002356:	eef0 1a45 	vmov.f32	s3, s10
 800235a:	eeb0 2a65 	vmov.f32	s4, s11
 800235e:	eef0 2a46 	vmov.f32	s5, s12
 8002362:	eeb0 0a66 	vmov.f32	s0, s13
 8002366:	eef0 0a47 	vmov.f32	s1, s14
 800236a:	eeb0 1a67 	vmov.f32	s2, s15
 800236e:	f7ff fe3c 	bl	8001fea <FusionVectorAdd>
 8002372:	eef0 6a40 	vmov.f32	s13, s0
 8002376:	eeb0 7a60 	vmov.f32	s14, s1
 800237a:	eef0 7a41 	vmov.f32	s15, s2
 800237e:	edc4 6a03 	vstr	s13, [r4, #12]
 8002382:	ed84 7a04 	vstr	s14, [r4, #16]
 8002386:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 800238a:	f107 0320 	add.w	r3, r7, #32
 800238e:	f107 0210 	add.w	r2, r7, #16
 8002392:	ca07      	ldmia	r2, {r0, r1, r2}
 8002394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	ee06 1a90 	vmov	s13, r1
 80023a2:	ee07 2a10 	vmov	s14, r2
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb0 0a66 	vmov.f32	s0, s13
 80023ae:	eef0 0a47 	vmov.f32	s1, s14
 80023b2:	eeb0 1a67 	vmov.f32	s2, s15
 80023b6:	373c      	adds	r7, #60	@ 0x3c
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}

080023bc <vApplicationIdleHook>:
void vApplicationIdleHook(void);
void vApplicationTickHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <hal_Spi1_ReadWriteByte>:
#include <string.h>

extern TIM_HandleTypeDef htim2;

uint8_t hal_Spi1_ReadWriteByte(uint8_t txdata)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
    uint8_t rxdata = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rxdata, 1, 5); /*halstm32的spi读写函数*/
 80023e6:	f107 020f 	add.w	r2, r7, #15
 80023ea:	1df9      	adds	r1, r7, #7
 80023ec:	2305      	movs	r3, #5
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	4804      	ldr	r0, [pc, #16]	@ (8002404 <hal_Spi1_ReadWriteByte+0x2c>)
 80023f4:	f003 ff7f 	bl	80062f6 <HAL_SPI_TransmitReceive>
    return rxdata;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000258 	.word	0x20000258

08002408 <Icm_Spi_ReadWriteNbytes>:
void Icm_Spi_ReadWriteNbytes(uint8_t* pBuffer, uint8_t len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < len; i ++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e00e      	b.n	800243c <Icm_Spi_ReadWriteNbytes+0x34>
    {
		*pBuffer = hal_Spi1_ReadWriteByte(*pBuffer);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffd8 	bl	80023d8 <hal_Spi1_ReadWriteByte>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	701a      	strb	r2, [r3, #0]
        pBuffer++;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
    for(i = 0; i < len; i ++)
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	3301      	adds	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	429a      	cmp	r2, r3
 8002442:	d3ec      	bcc.n	800241e <Icm_Spi_ReadWriteNbytes+0x16>
    }

}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <ICM42688P_ReadReg>:
uint8_t ICM42688P_ReadReg(uint8_t reg)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
    uint8_t regval = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
    Icm_CS_LOW();
 800245e:	2200      	movs	r2, #0
 8002460:	2110      	movs	r1, #16
 8002462:	480e      	ldr	r0, [pc, #56]	@ (800249c <ICM42688P_ReadReg+0x4c>)
 8002464:	f003 f9d0 	bl	8005808 <HAL_GPIO_WritePin>
    reg |= 0x80;
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800246e:	b2db      	uxtb	r3, r3
 8002470:	71fb      	strb	r3, [r7, #7]
    /* 写入要读的寄存器地址 */
    Icm_Spi_ReadWriteNbytes(&reg, 1);
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	2101      	movs	r1, #1
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ffc6 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    /* 读取寄存器数据 */
    Icm_Spi_ReadWriteNbytes(&regval, 1);
 800247c:	f107 030f 	add.w	r3, r7, #15
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ffc0 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    Icm_CS_HIGH();
 8002488:	2201      	movs	r2, #1
 800248a:	2110      	movs	r1, #16
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <ICM42688P_ReadReg+0x4c>)
 800248e:	f003 f9bb 	bl	8005808 <HAL_GPIO_WritePin>
    return regval;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40020800 	.word	0x40020800

080024a0 <ICM42688P_ReadRegs>:

void ICM42688P_ReadRegs(uint8_t reg, uint8_t* buf, uint16_t len)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	4613      	mov	r3, r2
 80024ae:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	71fb      	strb	r3, [r7, #7]
    Icm_CS_LOW();
 80024ba:	2200      	movs	r2, #0
 80024bc:	2110      	movs	r1, #16
 80024be:	480b      	ldr	r0, [pc, #44]	@ (80024ec <ICM42688P_ReadRegs+0x4c>)
 80024c0:	f003 f9a2 	bl	8005808 <HAL_GPIO_WritePin>
    /* 写入要读的寄存器地址 */
    Icm_Spi_ReadWriteNbytes(&reg, 1);
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	2101      	movs	r1, #1
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff9d 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    /* 读取寄存器数据 */
    Icm_Spi_ReadWriteNbytes(buf, len);
 80024ce:	88bb      	ldrh	r3, [r7, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	f7ff ff97 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    Icm_CS_HIGH();
 80024da:	2201      	movs	r2, #1
 80024dc:	2110      	movs	r1, #16
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <ICM42688P_ReadRegs+0x4c>)
 80024e0:	f003 f992 	bl	8005808 <HAL_GPIO_WritePin>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40020800 	.word	0x40020800

080024f0 <ICM42688P_WriteReg>:
uint8_t ICM42688P_WriteReg(uint8_t reg, uint8_t value)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	460a      	mov	r2, r1
 80024fa:	71fb      	strb	r3, [r7, #7]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71bb      	strb	r3, [r7, #6]
	Icm_CS_LOW();
 8002500:	2200      	movs	r2, #0
 8002502:	2110      	movs	r1, #16
 8002504:	480b      	ldr	r0, [pc, #44]	@ (8002534 <ICM42688P_WriteReg+0x44>)
 8002506:	f003 f97f 	bl	8005808 <HAL_GPIO_WritePin>
    /* 写入要读的寄存器地址 */
    Icm_Spi_ReadWriteNbytes(&reg, 1);
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	2101      	movs	r1, #1
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff7a 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    /* 读取寄存器数据 */
    Icm_Spi_ReadWriteNbytes(&value, 1);
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	2101      	movs	r1, #1
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff75 	bl	8002408 <Icm_Spi_ReadWriteNbytes>
    Icm_CS_HIGH();
 800251e:	2201      	movs	r2, #1
 8002520:	2110      	movs	r1, #16
 8002522:	4804      	ldr	r0, [pc, #16]	@ (8002534 <ICM42688P_WriteReg+0x44>)
 8002524:	f003 f970 	bl	8005808 <HAL_GPIO_WritePin>
    return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020800 	.word	0x40020800

08002538 <ICM42688P_ConvertAccel>:
 * @brief  将20位加速度计原始值转换为重力加速度单位G。
 * @param  raw_accel: 20位加速度计原始值。
 * @param  sensitivity: 以G/LSB为单位的满量程范围灵敏度。
 * @return 以G为单位的加速度计值。
 */
float ICM42688P_ConvertAccel(int32_t raw_accel, float sensitivity) {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	ed87 0a00 	vstr	s0, [r7]
    return (float)raw_accel * sensitivity;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254e:	edd7 7a00 	vldr	s15, [r7]
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002556:	eeb0 0a67 	vmov.f32	s0, s15
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <ICM42688P_ConvertGyro>:
 * @brief  将20位陀螺仪原始值转换为度/秒（dps）。
 * @param  raw_gyro: 20位陀螺仪原始值。
 * @param  sensitivity: 以dps/LSB为单位的满量程范围灵敏度。
 * @return 以dps为单位的陀螺仪值。
 */
float ICM42688P_ConvertGyro(int32_t raw_gyro, float sensitivity) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	ed87 0a00 	vstr	s0, [r7]
    return (float)raw_gyro * sensitivity;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257a:	edd7 7a00 	vldr	s15, [r7]
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002582:	eeb0 0a67 	vmov.f32	s0, s15
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <ICM42688P_ConvertTemp>:
 * @return Temperature value in degrees Celsius.
 * @brief  将16位温度原始值转换为摄氏度。
 * @param  raw_temp: 16位温度原始值。
 * @return 摄氏度单位的温度值。
 */
float ICM42688P_ConvertTemp(int16_t raw_temp) {
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
    return ((float)raw_temp / ICM42688P_TEMPERATURE_SENSITIVITY) + ICM42688P_TEMPERATURE_OFFSET;
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80025c4 <ICM42688P_ConvertTemp+0x34>
 80025aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ae:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80025b2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80025b6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	43047ae1 	.word	0x43047ae1

080025c8 <ICM42688P_Init>:

/**
 * @brief  Initializes the ICM42688P sensor with specified configurations for high precision.
 * @brief  初始化ICM42688P传感器，进行高精度配置。
 */
void ICM42688P_Init(void) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
    uint8_t who_am_i = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]

    /*ָ  Bank0*/
    ICM42688P_WriteReg(0x76,0x00);
 80025d2:	2100      	movs	r1, #0
 80025d4:	2076      	movs	r0, #118	@ 0x76
 80025d6:	f7ff ff8b 	bl	80024f0 <ICM42688P_WriteReg>

    HAL_Delay(50); // Wait for sensor to power up (等待传感器上电)
 80025da:	2032      	movs	r0, #50	@ 0x32
 80025dc:	f002 fb3c 	bl	8004c58 <HAL_Delay>
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_REG_BANK_SEL, ICM42688P_REG_BANK_SEL_0);
 80025e0:	2100      	movs	r1, #0
 80025e2:	2076      	movs	r0, #118	@ 0x76
 80025e4:	f7ff ff84 	bl	80024f0 <ICM42688P_WriteReg>

    // 1. Soft Reset: Soft Reset the sensor to ensure a known state.
    // 1. 软复位：对传感器进行软复位，以确保从已知状态开始。
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_DEVICE_CONFIG, BIT0);
 80025e8:	2101      	movs	r1, #1
 80025ea:	2011      	movs	r0, #17
 80025ec:	f7ff ff80 	bl	80024f0 <ICM42688P_WriteReg>
    HAL_Delay(500); // Wait for reset to complete (等待复位完成)
 80025f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025f4:	f002 fb30 	bl	8004c58 <HAL_Delay>


    // 2. Check WHO_AM_I register to verify communication.
    // 2. 检查WHO_AM_I寄存器，确认通信正常。
    who_am_i = ICM42688P_ReadReg(ICM42688P_REG_BANK0_WHO_AM_I);
 80025f8:	2075      	movs	r0, #117	@ 0x75
 80025fa:	f7ff ff29 	bl	8002450 <ICM42688P_ReadReg>
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
    if (who_am_i != ICM42688P_WHO_AM_I_VAL) {
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	2b47      	cmp	r3, #71	@ 0x47
 8002606:	d00f      	beq.n	8002628 <ICM42688P_Init+0x60>
        while(1){
      	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002608:	2110      	movs	r1, #16
 800260a:	481c      	ldr	r0, [pc, #112]	@ (800267c <ICM42688P_Init+0xb4>)
 800260c:	f003 f915 	bl	800583a <HAL_GPIO_TogglePin>
      	  HAL_Delay(100);
 8002610:	2064      	movs	r0, #100	@ 0x64
 8002612:	f002 fb21 	bl	8004c58 <HAL_Delay>
      	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8002616:	2120      	movs	r1, #32
 8002618:	4818      	ldr	r0, [pc, #96]	@ (800267c <ICM42688P_Init+0xb4>)
 800261a:	f003 f90e 	bl	800583a <HAL_GPIO_TogglePin>
      	  HAL_Delay(100);
 800261e:	2064      	movs	r0, #100	@ 0x64
 8002620:	f002 fb1a 	bl	8004c58 <HAL_Delay>
      	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002624:	bf00      	nop
 8002626:	e7ef      	b.n	8002608 <ICM42688P_Init+0x40>
        };
    }
    // 3. Register Bank 0 Configuration.
    // 3. 寄存器Bank0配置。
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_REG_BANK_SEL, ICM42688P_REG_BANK_SEL_0);
 8002628:	2100      	movs	r1, #0
 800262a:	2076      	movs	r0, #118	@ 0x76
 800262c:	f7ff ff60 	bl	80024f0 <ICM42688P_WriteReg>

    // 4. Power Management: Enable Accel and Gyro in Low-Noise mode.
    // 4. 电源管理：启用加速度计和陀螺仪的低噪声模式。
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_PWR_MGMT0, ICM42688P_PWR_MGMT0_ACCEL_MODE_LOW_NOISE | ICM42688P_PWR_MGMT0_GYRO_MODE_LOW_NOISE);
 8002630:	210f      	movs	r1, #15
 8002632:	204e      	movs	r0, #78	@ 0x4e
 8002634:	f7ff ff5c 	bl	80024f0 <ICM42688P_WriteReg>

    // 5. Gyroscope Configuration: Set 2000dps FSR and 1kHz ODR.
    // 5. 陀螺仪配置：设置2000dps满量程和1kHz输出数据速率。
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_GYRO_CONFIG0, ICM42688P_GYRO_FS_SEL_2000_DPS | ICM42688P_GYRO_ODR_1KHZ_SET);
 8002638:	2106      	movs	r1, #6
 800263a:	204f      	movs	r0, #79	@ 0x4f
 800263c:	f7ff ff58 	bl	80024f0 <ICM42688P_WriteReg>

    // 6. Accelerometer Configuration: Set 16g FSR and 1kHz ODR.
    // 6. 加速度计配置：设置16g满量程和1kHz输出数据速率。
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_ACCEL_CONFIG0, ICM42688P_ACCEL_FS_SEL_16G | ICM42688P_ACCEL_ODR_1KHZ_SET);
 8002640:	2106      	movs	r1, #6
 8002642:	2050      	movs	r0, #80	@ 0x50
 8002644:	f7ff ff54 	bl	80024f0 <ICM42688P_WriteReg>

    // Switch back to Bank 0 (切换回Bank 0)
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_REG_BANK_SEL, ICM42688P_REG_BANK_SEL_0);
 8002648:	2100      	movs	r1, #0
 800264a:	2076      	movs	r0, #118	@ 0x76
 800264c:	f7ff ff50 	bl	80024f0 <ICM42688P_WriteReg>

    // 7.FIFO stream
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_FIFO_CONFIG, 0x40);
 8002650:	2140      	movs	r1, #64	@ 0x40
 8002652:	2016      	movs	r0, #22
 8002654:	f7ff ff4c 	bl	80024f0 <ICM42688P_WriteReg>
    // 8.FIFO_CONFIG1: enable sensors + hires + resume partial ---
    uint8_t val = (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6);
 8002658:	237f      	movs	r3, #127	@ 0x7f
 800265a:	71bb      	strb	r3, [r7, #6]
    // accel+gyro+temp+tmst+hires+ wm + resume
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_FIFO_CONFIG1, val);
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	4619      	mov	r1, r3
 8002660:	205f      	movs	r0, #95	@ 0x5f
 8002662:	f7ff ff45 	bl	80024f0 <ICM42688P_WriteReg>

    // 9. Power ON sensors ---
    ICM42688P_WriteReg(ICM42688P_REG_BANK0_PWR_MGMT0, ICM42688P_PWR_MGMT0_ACCEL_MODE_LOW_NOISE | ICM42688P_PWR_MGMT0_GYRO_MODE_LOW_NOISE);
 8002666:	210f      	movs	r1, #15
 8002668:	204e      	movs	r0, #78	@ 0x4e
 800266a:	f7ff ff41 	bl	80024f0 <ICM42688P_WriteReg>
    HAL_Delay(100);
 800266e:	2064      	movs	r0, #100	@ 0x64
 8002670:	f002 faf2 	bl	8004c58 <HAL_Delay>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40020400 	.word	0x40020400

08002680 <ICM42688P_Read_FIFO_DMA>:
 * @param  size: The number of bytes to read.
 * @brief  通过DMA从ICM42688P读取整个FIFO缓冲区。
 * @param  pData: 存储数据的缓冲区指针。
 * @param  size: 要读取的字节数。
 */
void ICM42688P_Read_FIFO_DMA(void) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
	uint8_t cnt[2];
	    uint16_t fifo_count;

    ICM42688P_ReadRegs(ICM42688P_REG_BANK0_FIFO_COUNTH, cnt, 2);
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2202      	movs	r2, #2
 800268a:	4619      	mov	r1, r3
 800268c:	202e      	movs	r0, #46	@ 0x2e
 800268e:	f7ff ff07 	bl	80024a0 <ICM42688P_ReadRegs>

    fifo_count =(uint16_t) ((cnt[0] << 8) | cnt[1]);
 8002692:	793b      	ldrb	r3, [r7, #4]
 8002694:	b21b      	sxth	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	797b      	ldrb	r3, [r7, #5]
 800269c:	b21b      	sxth	r3, r3
 800269e:	4313      	orrs	r3, r2
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	80fb      	strh	r3, [r7, #6]


    //uint16_t fifo_count = (fifo_count_h << 8) | fifo_count_l;


}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <icm42688_read_all>:
    int16_t raw_temp = (int16_t)((temp_h << 8) | temp_l);
    data->temperature_C = ICM42688P_ConvertTemp(raw_temp);
}
int16_t az;

int icm42688_read_all(ICM42688P_Data_t *data) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
    uint8_t buf[16];

    ICM42688P_ReadRegs(ICM42688P_REG_BANK0_TEMP_DATA1, buf, 16);
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	2210      	movs	r2, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	201d      	movs	r0, #29
 80026be:	f7ff feef 	bl	80024a0 <ICM42688P_ReadRegs>

    data->temperature_C = ICM42688P_ConvertTemp((int16_t)((buf[0] << 8) | buf[1]));
 80026c2:	7a3b      	ldrb	r3, [r7, #8]
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	7a7b      	ldrb	r3, [r7, #9]
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ff5c 	bl	8002590 <ICM42688P_ConvertTemp>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a08 	vstr	s15, [r3, #32]

    data->accel_x = ICM42688P_ConvertAccel((int16_t)((buf[2] << 8) | buf[3]),ICM42688P_ACCEL_16G_SENSITIVITY);
 80026e2:	7abb      	ldrb	r3, [r7, #10]
 80026e4:	b21b      	sxth	r3, r3
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80027e4 <icm42688_read_all+0x138>
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff1e 	bl	8002538 <ICM42688P_ConvertAccel>
 80026fc:	eef0 7a40 	vmov.f32	s15, s0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edc3 7a02 	vstr	s15, [r3, #8]
    data->accel_y = ICM42688P_ConvertAccel((int16_t)((buf[4] << 8) | buf[5]),ICM42688P_ACCEL_16G_SENSITIVITY);
 8002706:	7b3b      	ldrb	r3, [r7, #12]
 8002708:	b21b      	sxth	r3, r3
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	b21a      	sxth	r2, r3
 800270e:	7b7b      	ldrb	r3, [r7, #13]
 8002710:	b21b      	sxth	r3, r3
 8002712:	4313      	orrs	r3, r2
 8002714:	b21b      	sxth	r3, r3
 8002716:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80027e4 <icm42688_read_all+0x138>
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff0c 	bl	8002538 <ICM42688P_ConvertAccel>
 8002720:	eef0 7a40 	vmov.f32	s15, s0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edc3 7a03 	vstr	s15, [r3, #12]
    data->accel_z = ICM42688P_ConvertAccel((int16_t)((buf[6] << 8) | buf[7]),ICM42688P_ACCEL_16G_SENSITIVITY);
 800272a:	7bbb      	ldrb	r3, [r7, #14]
 800272c:	b21b      	sxth	r3, r3
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	b21a      	sxth	r2, r3
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	b21b      	sxth	r3, r3
 8002736:	4313      	orrs	r3, r2
 8002738:	b21b      	sxth	r3, r3
 800273a:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80027e4 <icm42688_read_all+0x138>
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fefa 	bl	8002538 <ICM42688P_ConvertAccel>
 8002744:	eef0 7a40 	vmov.f32	s15, s0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	edc3 7a04 	vstr	s15, [r3, #16]

    data->gyro_x = ICM42688P_ConvertGyro((int16_t)((buf[8] << 8) | buf[9]),ICM42688P_GYRO_2000DPS_SENSITIVITY);
 800274e:	7c3b      	ldrb	r3, [r7, #16]
 8002750:	b21b      	sxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b21a      	sxth	r2, r3
 8002756:	7c7b      	ldrb	r3, [r7, #17]
 8002758:	b21b      	sxth	r3, r3
 800275a:	4313      	orrs	r3, r2
 800275c:	b21b      	sxth	r3, r3
 800275e:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80027e8 <icm42688_read_all+0x13c>
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fefe 	bl	8002564 <ICM42688P_ConvertGyro>
 8002768:	eef0 7a40 	vmov.f32	s15, s0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	edc3 7a05 	vstr	s15, [r3, #20]
    data->gyro_y = ICM42688P_ConvertGyro((int16_t)((buf[10] << 8) | buf[11]),ICM42688P_GYRO_2000DPS_SENSITIVITY);
 8002772:	7cbb      	ldrb	r3, [r7, #18]
 8002774:	b21b      	sxth	r3, r3
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	b21b      	sxth	r3, r3
 800277e:	4313      	orrs	r3, r2
 8002780:	b21b      	sxth	r3, r3
 8002782:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80027e8 <icm42688_read_all+0x13c>
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff feec 	bl	8002564 <ICM42688P_ConvertGyro>
 800278c:	eef0 7a40 	vmov.f32	s15, s0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edc3 7a06 	vstr	s15, [r3, #24]
    data->gyro_z = ICM42688P_ConvertGyro((int16_t)((buf[12] << 8) | buf[13]),ICM42688P_GYRO_2000DPS_SENSITIVITY);
 8002796:	7d3b      	ldrb	r3, [r7, #20]
 8002798:	b21b      	sxth	r3, r3
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	b21a      	sxth	r2, r3
 800279e:	7d7b      	ldrb	r3, [r7, #21]
 80027a0:	b21b      	sxth	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80027e8 <icm42688_read_all+0x13c>
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff feda 	bl	8002564 <ICM42688P_ConvertGyro>
 80027b0:	eef0 7a40 	vmov.f32	s15, s0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a07 	vstr	s15, [r3, #28]

    data->dt = htim2.Instance->CNT - data->timestamp;
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <icm42688_read_all+0x140>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1ad2      	subs	r2, r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]

    data->timestamp = htim2.Instance->CNT;
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <icm42688_read_all+0x140>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]

    ICM42688P_Read_FIFO_DMA();
 80027d4:	f7ff ff54 	bl	8002680 <ICM42688P_Read_FIFO_DMA>


    return 0;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	3a000000 	.word	0x3a000000
 80027e8:	3d79c190 	.word	0x3d79c190
 80027ec:	20000358 	.word	0x20000358

080027f0 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4053      	eors	r3, r2
 8002806:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	b25a      	sxtb	r2, r3
 8002810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002814:	4053      	eors	r3, r2
 8002816:	b25b      	sxtb	r3, r3
 8002818:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b29b      	uxth	r3, r3
 8002822:	b21a      	sxth	r2, r3
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	b21b      	sxth	r3, r3
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21b      	sxth	r3, r3
 800282c:	4053      	eors	r3, r2
 800282e:	b21a      	sxth	r2, r3
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	b21b      	sxth	r3, r3
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	b21b      	sxth	r3, r3
 8002838:	4053      	eors	r3, r2
 800283a:	b21a      	sxth	r2, r3
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	091b      	lsrs	r3, r3, #4
 8002840:	b2db      	uxtb	r3, r3
 8002842:	b21b      	sxth	r3, r3
 8002844:	4053      	eors	r3, r2
 8002846:	b21b      	sxth	r3, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	801a      	strh	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002868:	801a      	strh	r2, [r3, #0]
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002882:	f107 030e 	add.w	r3, r7, #14
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffe7 	bl	800285a <crc_init>
	while (length--) {
 800288c:	e009      	b.n	80028a2 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f107 020e 	add.w	r2, r7, #14
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ffa7 	bl	80027f0 <crc_accumulate>
	while (length--) {
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	1e5a      	subs	r2, r3, #1
 80028a6:	807a      	strh	r2, [r7, #2]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <crc_calculate+0x18>
        }
        return crcTmp;
 80028ac:	89fb      	ldrh	r3, [r7, #14]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b086      	sub	sp, #24
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	4613      	mov	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	617b      	str	r3, [r7, #20]
	while (length--) {
 80028c8:	e007      	b.n	80028da <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff8b 	bl	80027f0 <crc_accumulate>
	while (length--) {
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	80fa      	strh	r2, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f2      	bne.n	80028ca <crc_accumulate_buffer+0x14>
        }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <mavlink_sha256_init+0x50>)
 8002908:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <mavlink_sha256_init+0x54>)
 800290e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <mavlink_sha256_init+0x58>)
 8002914:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <mavlink_sha256_init+0x5c>)
 800291a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <mavlink_sha256_init+0x60>)
 8002920:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <mavlink_sha256_init+0x64>)
 8002926:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <mavlink_sha256_init+0x68>)
 800292c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <mavlink_sha256_init+0x6c>)
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	6a09e667 	.word	0x6a09e667
 8002944:	bb67ae85 	.word	0xbb67ae85
 8002948:	3c6ef372 	.word	0x3c6ef372
 800294c:	a54ff53a 	.word	0xa54ff53a
 8002950:	510e527f 	.word	0x510e527f
 8002954:	9b05688c 	.word	0x9b05688c
 8002958:	1f83d9ab 	.word	0x1f83d9ab
 800295c:	5be0cd19 	.word	0x5be0cd19

08002960 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002960:	b480      	push	{r7}
 8002962:	b0cf      	sub	sp, #316	@ 0x13c
 8002964:	af00      	add	r7, sp, #0
 8002966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800296a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800296e:	6018      	str	r0, [r3, #0]
 8002970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002974:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002978:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800297a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800297e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 800298a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800298e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 800299a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800299e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 80029aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 80029ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029be:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 80029ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 80029da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 80029ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a00:	e016      	b.n	8002a30 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002a0c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a1e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	dde4      	ble.n	8002a02 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8002a38:	2310      	movs	r3, #16
 8002a3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a3e:	e069      	b.n	8002b14 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a44:	1e9a      	subs	r2, r3, #2
 8002a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5a:	1e99      	subs	r1, r3, #2
 8002a5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a68:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002a6c:	405a      	eors	r2, r3
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a72:	1e99      	subs	r1, r3, #2
 8002a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a80:	0a9b      	lsrs	r3, r3, #10
 8002a82:	405a      	eors	r2, r3
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a88:	1fd9      	subs	r1, r3, #7
 8002a8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002a8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a96:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	f1a3 010f 	sub.w	r1, r3, #15
 8002aa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002aa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002aac:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab4:	f1a3 000f 	sub.w	r0, r3, #15
 8002ab8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002abc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ac0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ac4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002ac8:	4059      	eors	r1, r3
 8002aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ace:	f1a3 000f 	sub.w	r0, r3, #15
 8002ad2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ad6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ada:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002ae2:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae8:	f1a3 0110 	sub.w	r1, r3, #16
 8002aec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002af0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002af4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002af8:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b02:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b18:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b1a:	dd91      	ble.n	8002a40 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b22:	e078      	b.n	8002c16 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002b24:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b28:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002b2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b30:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002b34:	405a      	eors	r2, r3
 8002b36:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b3a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002b3e:	405a      	eors	r2, r3
 8002b40:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b44:	441a      	add	r2, r3
 8002b46:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8002b4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b4e:	4019      	ands	r1, r3
 8002b50:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b54:	43d8      	mvns	r0, r3
 8002b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b5a:	4003      	ands	r3, r0
 8002b5c:	404b      	eors	r3, r1
 8002b5e:	441a      	add	r2, r3
 8002b60:	496e      	ldr	r1, [pc, #440]	@ (8002d1c <mavlink_sha256_calc+0x3bc>)
 8002b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002b70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002b74:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8002b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b86:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b8e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002b92:	405a      	eors	r2, r3
 8002b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b98:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002b9c:	405a      	eors	r2, r3
 8002b9e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8002ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ba6:	4059      	eors	r1, r3
 8002ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002bac:	4019      	ands	r1, r3
 8002bae:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8002bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002bb6:	4003      	ands	r3, r0
 8002bb8:	404b      	eors	r3, r1
 8002bba:	4413      	add	r3, r2
 8002bbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8002bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8002bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8002bd0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002bd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8002bd8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002bdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002be0:	4413      	add	r3, r2
 8002be2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8002be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8002bee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002bf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8002bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002bfa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8002bfe:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c06:	4413      	add	r3, r2
 8002c08:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c10:	3301      	adds	r3, #1
 8002c12:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c1c:	dd82      	ble.n	8002b24 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8002c1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c22:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002c2e:	441a      	add	r2, r3
 8002c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c34:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c40:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c4c:	441a      	add	r2, r3
 8002c4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c52:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c5e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002c6a:	441a      	add	r2, r3
 8002c6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c70:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002c78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c88:	441a      	add	r2, r3
 8002c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002c96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c9a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ca6:	441a      	add	r2, r3
 8002ca8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002cb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cb8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cc4:	441a      	add	r2, r3
 8002cc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cd6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1a      	ldr	r2, [r3, #32]
 8002cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ce8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cf4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002d00:	441a      	add	r2, r3
 8002d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d06:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d0e:	bf00      	nop
 8002d10:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	0800bd44 	.word	0x0800bd44

08002d20 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b09c      	sub	sp, #112	@ 0x70
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	441a      	add	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d904      	bls.n	8002d58 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d60:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8002d62:	e057      	b.n	8002e14 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8002d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d66:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002d6a:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d201      	bcs.n	8002d78 <mavlink_sha256_update+0x58>
            l = len;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002d7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d80:	4413      	add	r3, r2
 8002d82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002d84:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002d86:	4618      	mov	r0, r3
 8002d88:	f007 fc28 	bl	800a5dc <memcpy>
	offset += l;
 8002d8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d90:	4413      	add	r3, r2
 8002d92:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8002d94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d98:	4413      	add	r3, r2
 8002d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8002da4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002da6:	2b40      	cmp	r3, #64	@ 0x40
 8002da8:	d134      	bne.n	8002e14 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3328      	adds	r3, #40	@ 0x28
 8002dae:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8002db0:	2300      	movs	r3, #0
 8002db2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002db4:	e023      	b.n	8002dfe <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8002db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dbc:	4413      	add	r3, r2
 8002dbe:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8002dc0:	f107 0210 	add.w	r2, r7, #16
 8002dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dce:	3303      	adds	r3, #3
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dd4:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	1c9a      	adds	r2, r3, #2
 8002dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ddc:	3301      	adds	r3, #1
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8002de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de8:	3302      	adds	r3, #2
 8002dea:	7812      	ldrb	r2, [r2, #0]
 8002dec:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8002dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df0:	3303      	adds	r3, #3
 8002df2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8002df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	ddd8      	ble.n	8002db6 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4619      	mov	r1, r3
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff fda8 	bl	8002960 <mavlink_sha256_calc>
	    offset = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1a4      	bne.n	8002d64 <mavlink_sha256_update+0x44>
	}
    }
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	3770      	adds	r7, #112	@ 0x70
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b098      	sub	sp, #96	@ 0x60
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	08db      	lsrs	r3, r3, #3
 8002e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3c:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 8002e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e44:	3301      	adds	r3, #1
 8002e46:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 8002e4e:	2380      	movs	r3, #128	@ 0x80
 8002e50:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	3301      	adds	r3, #1
 8002e58:	2247      	movs	r2, #71	@ 0x47
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f007 fb73 	bl	800a548 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e68:	3307      	adds	r3, #7
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	3360      	adds	r3, #96	@ 0x60
 8002e6e:	443b      	add	r3, r7
 8002e70:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0a1a      	lsrs	r2, r3, #8
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	3360      	adds	r3, #96	@ 0x60
 8002e82:	443b      	add	r3, r7
 8002e84:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0c1a      	lsrs	r2, r3, #16
 8002e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e90:	3305      	adds	r3, #5
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	3360      	adds	r3, #96	@ 0x60
 8002e96:	443b      	add	r3, r7
 8002e98:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e1a      	lsrs	r2, r3, #24
 8002ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	3360      	adds	r3, #96	@ 0x60
 8002eaa:	443b      	add	r3, r7
 8002eac:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb6:	3303      	adds	r3, #3
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	3360      	adds	r3, #96	@ 0x60
 8002ebc:	443b      	add	r3, r7
 8002ebe:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	0a1a      	lsrs	r2, r3, #8
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eca:	3302      	adds	r3, #2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	3360      	adds	r3, #96	@ 0x60
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c1a      	lsrs	r2, r3, #16
 8002edc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	3360      	adds	r3, #96	@ 0x60
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0e1b      	lsrs	r3, r3, #24
 8002ef0:	b2d9      	uxtb	r1, r3
 8002ef2:	f107 020c 	add.w	r2, r7, #12
 8002ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef8:	4413      	add	r3, r2
 8002efa:	460a      	mov	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8002efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f00:	f103 0208 	add.w	r2, r3, #8
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff08 	bl	8002d20 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8002f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f12:	78da      	ldrb	r2, [r3, #3]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f1e:	7892      	ldrb	r2, [r2, #2]
 8002f20:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3302      	adds	r3, #2
 8002f26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f28:	7852      	ldrb	r2, [r2, #1]
 8002f2a:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	3303      	adds	r3, #3
 8002f30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f3c:	79d2      	ldrb	r2, [r2, #7]
 8002f3e:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	3305      	adds	r3, #5
 8002f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f46:	7992      	ldrb	r2, [r2, #6]
 8002f48:	701a      	strb	r2, [r3, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	3760      	adds	r7, #96	@ 0x60
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8002f5e:	79fa      	ldrb	r2, [r7, #7]
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4a03      	ldr	r2, [pc, #12]	@ (8002f78 <mavlink_get_channel_status+0x24>)
 8002f6a:	4413      	add	r3, r2
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	20000508 	.word	0x20000508

08002f7c <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b0a0      	sub	sp, #128	@ 0x80
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <mavlink_sign_packet+0x20>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <mavlink_sign_packet+0x24>
	    return 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e04f      	b.n	8003040 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	785a      	ldrb	r2, [r3, #1]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f107 0110 	add.w	r1, r7, #16
 8002fba:	2206      	movs	r2, #6
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f007 fb0d 	bl	800a5dc <memcpy>
	signing->timestamp++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fc8:	1c54      	adds	r4, r2, #1
 8002fca:	f143 0500 	adc.w	r5, r3, #0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8002fd4:	f107 0318 	add.w	r3, r7, #24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fc89 	bl	80028f0 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f103 0110 	add.w	r1, r3, #16
 8002fe4:	f107 0318 	add.w	r3, r7, #24
 8002fe8:	2220      	movs	r2, #32
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fe98 	bl	8002d20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	f107 0318 	add.w	r3, r7, #24
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fe91 	bl	8002d20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8002ffe:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fe88 	bl	8002d20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	2202      	movs	r2, #2
 8003016:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe80 	bl	8002d20 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	2207      	movs	r2, #7
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fe79 	bl	8002d20 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1dda      	adds	r2, r3, #7
 8003032:	f107 0318 	add.w	r3, r7, #24
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fef3 	bl	8002e24 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 800303e:	230d      	movs	r3, #13
}
 8003040:	4618      	mov	r0, r3
 8003042:	3780      	adds	r7, #128	@ 0x80
 8003044:	46bd      	mov	sp, r7
 8003046:	bdb0      	pop	{r4, r5, r7, pc}

08003048 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8003054:	e002      	b.n	800305c <_mav_trim_payload+0x14>
		length--;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	3b01      	subs	r3, #1
 800305a:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d906      	bls.n	8003070 <_mav_trim_payload+0x28>
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	3b01      	subs	r3, #1
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f2      	beq.n	8003056 <_mav_trim_payload+0xe>
	}
	return length;
 8003070:	78fb      	ldrb	r3, [r7, #3]
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800307e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003080:	b08f      	sub	sp, #60	@ 0x3c
 8003082:	af04      	add	r7, sp, #16
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	607b      	str	r3, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	72fb      	strb	r3, [r7, #11]
 800308c:	4613      	mov	r3, r2
 800308e:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80030a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <mavlink_finalize_message_buffer+0x4e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d008      	beq.n	80030cc <mavlink_finalize_message_buffer+0x4e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <mavlink_finalize_message_buffer+0x4e>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <mavlink_finalize_message_buffer+0x50>
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80030d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 80030de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <mavlink_finalize_message_buffer+0x6c>
 80030e6:	230d      	movs	r3, #13
 80030e8:	e000      	b.n	80030ec <mavlink_finalize_message_buffer+0x6e>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 80030f0:	230a      	movs	r3, #10
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 80030f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	22fe      	movs	r2, #254	@ 0xfe
 8003102:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8003104:	2306      	movs	r3, #6
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800310a:	e002      	b.n	8003112 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	22fd      	movs	r2, #253	@ 0xfd
 8003110:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003112:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <mavlink_finalize_message_buffer+0xb2>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	330c      	adds	r3, #12
 800311e:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff8f 	bl	8003048 <_mav_trim_payload>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	e001      	b.n	8003134 <mavlink_finalize_message_buffer+0xb6>
 8003130:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	7afa      	ldrb	r2, [r7, #11]
 800313c:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	7aba      	ldrb	r2, [r7, #10]
 8003142:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	711a      	strb	r2, [r3, #4]
	if (signing) {
 800314a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	791b      	ldrb	r3, [r3, #4]
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	799a      	ldrb	r2, [r3, #6]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	799b      	ldrb	r3, [r3, #6]
 8003172:	3301      	adds	r3, #1
 8003174:	b2da      	uxtb	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	789b      	ldrb	r3, [r3, #2]
 800317e:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	78db      	ldrb	r3, [r3, #3]
 8003184:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 8003186:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800318a:	2b00      	cmp	r3, #0
 800318c:	d013      	beq.n	80031b6 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	799b      	ldrb	r3, [r3, #6]
 8003192:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	79db      	ldrb	r3, [r3, #7]
 8003198:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	7a1b      	ldrb	r3, [r3, #8]
 800319e:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	7a5a      	ldrb	r2, [r3, #9]
 80031a4:	7a99      	ldrb	r1, [r3, #10]
 80031a6:	0209      	lsls	r1, r1, #8
 80031a8:	430a      	orrs	r2, r1
 80031aa:	7adb      	ldrb	r3, [r3, #11]
 80031ac:	041b      	lsls	r3, r3, #16
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	777b      	strb	r3, [r7, #29]
 80031b4:	e030      	b.n	8003218 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	791b      	ldrb	r3, [r3, #4]
 80031ba:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	795b      	ldrb	r3, [r3, #5]
 80031c0:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	799b      	ldrb	r3, [r3, #6]
 80031c6:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	79db      	ldrb	r3, [r3, #7]
 80031cc:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	7a1b      	ldrb	r3, [r3, #8]
 80031d2:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	7a5a      	ldrb	r2, [r3, #9]
 80031d8:	7a99      	ldrb	r1, [r3, #10]
 80031da:	0209      	lsls	r1, r1, #8
 80031dc:	430a      	orrs	r2, r1
 80031de:	7adb      	ldrb	r3, [r3, #11]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	7a5a      	ldrb	r2, [r3, #9]
 80031ec:	7a99      	ldrb	r1, [r3, #10]
 80031ee:	0209      	lsls	r1, r1, #8
 80031f0:	430a      	orrs	r2, r1
 80031f2:	7adb      	ldrb	r3, [r3, #11]
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	4313      	orrs	r3, r2
 80031f8:	121b      	asrs	r3, r3, #8
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7a5a      	ldrb	r2, [r3, #9]
 8003204:	7a99      	ldrb	r1, [r3, #10]
 8003206:	0209      	lsls	r1, r1, #8
 8003208:	430a      	orrs	r2, r1
 800320a:	7adb      	ldrb	r3, [r3, #11]
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	4313      	orrs	r3, r2
 8003210:	141b      	asrs	r3, r3, #16
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	f107 0318 	add.w	r3, r7, #24
 8003226:	3301      	adds	r3, #1
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fb23 	bl	8002876 <crc_calculate>
 8003230:	4603      	mov	r3, r0
 8003232:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f103 010c 	add.w	r1, r3, #12
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	78db      	ldrb	r3, [r3, #3]
 800323e:	461a      	mov	r2, r3
 8003240:	f107 0316 	add.w	r3, r7, #22
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fb36 	bl	80028b6 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 800324a:	f107 0216 	add.w	r2, r7, #22
 800324e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff facb 	bl	80027f0 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800325a:	8af9      	ldrh	r1, [r7, #22]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	330c      	adds	r3, #12
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	78d2      	ldrb	r2, [r2, #3]
 8003264:	4413      	add	r3, r2
 8003266:	b2ca      	uxtb	r2, r1
 8003268:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800326a:	8afb      	ldrh	r3, [r7, #22]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	b299      	uxth	r1, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f103 020c 	add.w	r2, r3, #12
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	3301      	adds	r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	b2ca      	uxtb	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 8003282:	8afa      	ldrh	r2, [r7, #22]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 8003288:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01a      	beq.n	80032c6 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	310c      	adds	r1, #12
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80032aa:	4401      	add	r1, r0
 80032ac:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 80032b0:	f107 0018 	add.w	r0, r7, #24
 80032b4:	9102      	str	r1, [sp, #8]
 80032b6:	9201      	str	r2, [sp, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4633      	mov	r3, r6
 80032bc:	4602      	mov	r2, r0
 80032be:	4629      	mov	r1, r5
 80032c0:	4620      	mov	r0, r4
 80032c2:	f7ff fe5b 	bl	8002f7c <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4413      	add	r3, r2
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3302      	adds	r3, #2
 80032e2:	b29b      	uxth	r3, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	372c      	adds	r7, #44	@ 0x2c
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ec <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af04      	add	r7, sp, #16
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	70fb      	strb	r3, [r7, #3]
 80032fe:	460b      	mov	r3, r1
 8003300:	70bb      	strb	r3, [r7, #2]
 8003302:	4613      	mov	r3, r2
 8003304:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003306:	787b      	ldrb	r3, [r7, #1]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fe23 	bl	8002f54 <mavlink_get_channel_status>
 800330e:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8003310:	78ba      	ldrb	r2, [r7, #2]
 8003312:	78f9      	ldrb	r1, [r7, #3]
 8003314:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	7f3b      	ldrb	r3, [r7, #28]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	7e3b      	ldrb	r3, [r7, #24]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff feaa 	bl	800307e <mavlink_finalize_message_buffer>
 800332a:	4603      	mov	r3, r0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af04      	add	r7, sp, #16
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	70fb      	strb	r3, [r7, #3]
 8003346:	460b      	mov	r3, r1
 8003348:	70bb      	strb	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 800334e:	78ba      	ldrb	r2, [r7, #2]
 8003350:	78f9      	ldrb	r1, [r7, #3]
 8003352:	7d3b      	ldrb	r3, [r7, #20]
 8003354:	9302      	str	r3, [sp, #8]
 8003356:	7c3b      	ldrb	r3, [r7, #16]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	787b      	ldrb	r3, [r7, #1]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffc3 	bl	80032ec <mavlink_finalize_message_chan>
 8003366:	4603      	mov	r3, r0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	2bfe      	cmp	r3, #254	@ 0xfe
 8003386:	d13a      	bne.n	80033fe <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 800338c:	2305      	movs	r3, #5
 800338e:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	789a      	ldrb	r2, [r3, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3302      	adds	r3, #2
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	7992      	ldrb	r2, [r2, #6]
 80033a8:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3303      	adds	r3, #3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	79d2      	ldrb	r2, [r2, #7]
 80033b2:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	7a12      	ldrb	r2, [r2, #8]
 80033bc:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	7a5a      	ldrb	r2, [r3, #9]
 80033c2:	7a99      	ldrb	r1, [r3, #10]
 80033c4:	0209      	lsls	r1, r1, #8
 80033c6:	430a      	orrs	r2, r1
 80033c8:	7adb      	ldrb	r3, [r3, #11]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	4313      	orrs	r3, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3305      	adds	r3, #5
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1d98      	adds	r0, r3, #6
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f103 010c 	add.w	r1, r3, #12
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	78db      	ldrb	r3, [r3, #3]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f007 f8f8 	bl	800a5dc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80033ec:	7dbb      	ldrb	r3, [r7, #22]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	78d2      	ldrb	r2, [r2, #3]
 80033f2:	4413      	add	r3, r2
 80033f4:	3301      	adds	r3, #1
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e06c      	b.n	80034d8 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe1e 	bl	8003048 <_mav_trim_payload>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8003410:	2309      	movs	r3, #9
 8003412:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	789a      	ldrb	r2, [r3, #2]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3301      	adds	r3, #1
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3302      	adds	r3, #2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	7912      	ldrb	r2, [r2, #4]
 800342c:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3303      	adds	r3, #3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	7952      	ldrb	r2, [r2, #5]
 8003436:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	7992      	ldrb	r2, [r2, #6]
 8003440:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3305      	adds	r3, #5
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	79d2      	ldrb	r2, [r2, #7]
 800344a:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3306      	adds	r3, #6
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	7a12      	ldrb	r2, [r2, #8]
 8003454:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7a5a      	ldrb	r2, [r3, #9]
 800345a:	7a99      	ldrb	r1, [r3, #10]
 800345c:	0209      	lsls	r1, r1, #8
 800345e:	430a      	orrs	r2, r1
 8003460:	7adb      	ldrb	r3, [r3, #11]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	4313      	orrs	r3, r2
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3307      	adds	r3, #7
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7a5a      	ldrb	r2, [r3, #9]
 8003474:	7a99      	ldrb	r1, [r3, #10]
 8003476:	0209      	lsls	r1, r1, #8
 8003478:	430a      	orrs	r2, r1
 800347a:	7adb      	ldrb	r3, [r3, #11]
 800347c:	041b      	lsls	r3, r3, #16
 800347e:	4313      	orrs	r3, r2
 8003480:	0a1a      	lsrs	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3308      	adds	r3, #8
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7a5a      	ldrb	r2, [r3, #9]
 800348e:	7a99      	ldrb	r1, [r3, #10]
 8003490:	0209      	lsls	r1, r1, #8
 8003492:	430a      	orrs	r2, r1
 8003494:	7adb      	ldrb	r3, [r3, #11]
 8003496:	041b      	lsls	r3, r3, #16
 8003498:	4313      	orrs	r3, r2
 800349a:	0c1a      	lsrs	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3309      	adds	r3, #9
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f103 000a 	add.w	r0, r3, #10
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	330c      	adds	r3, #12
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	4619      	mov	r1, r3
 80034b2:	f007 f893 	bl	800a5dc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80034b6:	7dba      	ldrb	r2, [r7, #22]
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
 80034ba:	4413      	add	r3, r2
 80034bc:	3301      	adds	r3, #1
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	791b      	ldrb	r3, [r3, #4]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <mavlink_msg_to_send_buffer+0x164>
 80034d0:	230d      	movs	r3, #13
 80034d2:	e000      	b.n	80034d6 <mavlink_msg_to_send_buffer+0x166>
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1c98      	adds	r0, r3, #2
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8003506:	7dfa      	ldrb	r2, [r7, #23]
 8003508:	4619      	mov	r1, r3
 800350a:	f007 f867 	bl	800a5dc <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 800350e:	7dbb      	ldrb	r3, [r7, #22]
 8003510:	b29a      	uxth	r2, r3
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4413      	add	r3, r2
 8003518:	b29a      	uxth	r2, r3
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4413      	add	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	3303      	adds	r3, #3
 8003524:	b29b      	uxth	r3, r3
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <mavlink_msg_attitude_pack>:
 * @param yawspeed [rad/s] Yaw angular speed
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b094      	sub	sp, #80	@ 0x50
 8003532:	af02      	add	r7, sp, #8
 8003534:	623a      	str	r2, [r7, #32]
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	ed87 0a06 	vstr	s0, [r7, #24]
 800353c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003540:	ed87 1a04 	vstr	s2, [r7, #16]
 8003544:	edc7 1a03 	vstr	s3, [r7, #12]
 8003548:	ed87 2a02 	vstr	s4, [r7, #8]
 800354c:	edc7 2a01 	vstr	s5, [r7, #4]
 8003550:	4603      	mov	r3, r0
 8003552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003556:	460b      	mov	r3, r1
 8003558:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    _mav_put_float(buf, 24, yawspeed);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ATTITUDE_LEN);
#else
    mavlink_attitude_t packet;
    packet.time_boot_ms = time_boot_ms;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    packet.roll = roll;
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	633b      	str	r3, [r7, #48]	@ 0x30
    packet.pitch = pitch;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
    packet.yaw = yaw;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38
    packet.rollspeed = rollspeed;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    packet.pitchspeed = pitchspeed;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	643b      	str	r3, [r7, #64]	@ 0x40
    packet.yawspeed = yawspeed;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	647b      	str	r3, [r7, #68]	@ 0x44

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	330c      	adds	r3, #12
 800357c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8003580:	221c      	movs	r2, #28
 8003582:	4618      	mov	r0, r3
 8003584:	f007 f82a 	bl	800a5dc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_ATTITUDE;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2200      	movs	r2, #0
 800358c:	f042 021e 	orr.w	r2, r2, #30
 8003590:	725a      	strb	r2, [r3, #9]
 8003592:	2200      	movs	r2, #0
 8003594:	729a      	strb	r2, [r3, #10]
 8003596:	2200      	movs	r2, #0
 8003598:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ATTITUDE_MIN_LEN, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
 800359a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800359e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80035a2:	2327      	movs	r3, #39	@ 0x27
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	231c      	movs	r3, #28
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	231c      	movs	r3, #28
 80035ac:	6a38      	ldr	r0, [r7, #32]
 80035ae:	f7ff fec1 	bl	8003334 <mavlink_finalize_message>
 80035b2:	4603      	mov	r3, r0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3748      	adds	r7, #72	@ 0x48
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <mavlink_msg_attitude_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param attitude C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_attitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60ba      	str	r2, [r7, #8]
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]
 80035ca:	460b      	mov	r3, r1
 80035cc:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_attitude_pack(system_id, component_id, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	ed93 7a02 	vldr	s14, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	ed93 6a04 	vldr	s12, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	edd3 5a05 	vldr	s11, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	ed93 5a06 	vldr	s10, [r3, #24]
 80035f6:	7bb9      	ldrb	r1, [r7, #14]
 80035f8:	7bf8      	ldrb	r0, [r7, #15]
 80035fa:	eef0 2a45 	vmov.f32	s5, s10
 80035fe:	eeb0 2a65 	vmov.f32	s4, s11
 8003602:	eef0 1a46 	vmov.f32	s3, s12
 8003606:	eeb0 1a66 	vmov.f32	s2, s13
 800360a:	eef0 0a47 	vmov.f32	s1, s14
 800360e:	eeb0 0a67 	vmov.f32	s0, s15
 8003612:	4613      	mov	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	f7ff ff8a 	bl	800352e <mavlink_msg_attitude_pack>
 800361a:	4603      	mov	r3, r0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	603a      	str	r2, [r7, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
 8003632:	460b      	mov	r3, r1
 8003634:	71bb      	strb	r3, [r7, #6]
 8003636:	4613      	mov	r3, r2
 8003638:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800363e:	797b      	ldrb	r3, [r7, #5]
 8003640:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8003642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003646:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8003648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800364c:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800364e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003652:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8003654:	2303      	movs	r3, #3
 8003656:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	f107 010c 	add.w	r1, r7, #12
 8003660:	2209      	movs	r2, #9
 8003662:	4618      	mov	r0, r3
 8003664:	f006 ffba 	bl	800a5dc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	725a      	strb	r2, [r3, #9]
 800366e:	2200      	movs	r2, #0
 8003670:	729a      	strb	r2, [r3, #10]
 8003672:	2200      	movs	r2, #0
 8003674:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8003676:	79ba      	ldrb	r2, [r7, #6]
 8003678:	79f9      	ldrb	r1, [r7, #7]
 800367a:	2332      	movs	r3, #50	@ 0x32
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	2309      	movs	r3, #9
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2309      	movs	r3, #9
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f7ff fe55 	bl	8003334 <mavlink_finalize_message>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <mavlink_msg_heartbeat_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param heartbeat C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 8003694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af04      	add	r7, sp, #16
 800369a:	60ba      	str	r2, [r7, #8]
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	460b      	mov	r3, r1
 80036a4:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	791e      	ldrb	r6, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	795b      	ldrb	r3, [r3, #5]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	7992      	ldrb	r2, [r2, #6]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	6809      	ldr	r1, [r1, #0]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	79c0      	ldrb	r0, [r0, #7]
 80036ba:	7bbd      	ldrb	r5, [r7, #14]
 80036bc:	7bfc      	ldrb	r4, [r7, #15]
 80036be:	9003      	str	r0, [sp, #12]
 80036c0:	9102      	str	r1, [sp, #8]
 80036c2:	9201      	str	r2, [sp, #4]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4633      	mov	r3, r6
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	4629      	mov	r1, r5
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ffa9 	bl	8003624 <mavlink_msg_heartbeat_pack>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 80036e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036ea:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003700 <FusionRadiansToDegrees+0x24>
 80036ee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	42652ee0 	.word	0x42652ee0

08003704 <FusionAsin>:
static inline float FusionAsin(const float value) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 800370e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003712:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d802      	bhi.n	8003726 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8003720:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8003754 <FusionAsin+0x50>
 8003724:	e011      	b.n	800374a <FusionAsin+0x46>
    if (value >= 1.0f) {
 8003726:	edd7 7a01 	vldr	s15, [r7, #4]
 800372a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	db02      	blt.n	800373e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8003738:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8003758 <FusionAsin+0x54>
 800373c:	e005      	b.n	800374a <FusionAsin+0x46>
    return asinf(value);
 800373e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003742:	f006 ff59 	bl	800a5f8 <asinf>
 8003746:	eef0 7a40 	vmov.f32	s15, s0
}
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	bfc90fdb 	.word	0xbfc90fdb
 8003758:	3fc90fdb 	.word	0x3fc90fdb

0800375c <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 800375c:	b480      	push	{r7}
 800375e:	b091      	sub	sp, #68	@ 0x44
 8003760:	af00      	add	r7, sp, #0
 8003762:	eeb0 5a40 	vmov.f32	s10, s0
 8003766:	eef0 5a60 	vmov.f32	s11, s1
 800376a:	eeb0 6a41 	vmov.f32	s12, s2
 800376e:	eef0 6a61 	vmov.f32	s13, s3
 8003772:	eeb0 7a42 	vmov.f32	s14, s4
 8003776:	eef0 7a62 	vmov.f32	s15, s5
 800377a:	ed87 5a07 	vstr	s10, [r7, #28]
 800377e:	edc7 5a08 	vstr	s11, [r7, #32]
 8003782:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8003786:	edc7 6a04 	vstr	s13, [r7, #16]
 800378a:	ed87 7a05 	vstr	s14, [r7, #20]
 800378e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 8003792:	ed97 7a07 	vldr	s14, [r7, #28]
 8003796:	edd7 7a04 	vldr	s15, [r7, #16]
 800379a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800379e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 80037a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80037a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037aa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80037ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 80037b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80037b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80037ba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80037be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return result;
 80037c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037c6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80037ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80037cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037d0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d6:	ee06 1a90 	vmov	s13, r1
 80037da:	ee07 2a10 	vmov	s14, r2
 80037de:	ee07 3a90 	vmov	s15, r3
}
 80037e2:	eeb0 0a66 	vmov.f32	s0, s13
 80037e6:	eef0 0a47 	vmov.f32	s1, s14
 80037ea:	eeb0 1a67 	vmov.f32	s2, s15
 80037ee:	3744      	adds	r7, #68	@ 0x44
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80037f8:	b480      	push	{r7}
 80037fa:	b091      	sub	sp, #68	@ 0x44
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	eeb0 5a40 	vmov.f32	s10, s0
 8003802:	eef0 5a60 	vmov.f32	s11, s1
 8003806:	eeb0 6a41 	vmov.f32	s12, s2
 800380a:	eef0 6a61 	vmov.f32	s13, s3
 800380e:	eeb0 7a42 	vmov.f32	s14, s4
 8003812:	eef0 7a62 	vmov.f32	s15, s5
 8003816:	ed87 5a07 	vstr	s10, [r7, #28]
 800381a:	edc7 5a08 	vstr	s11, [r7, #32]
 800381e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8003822:	edc7 6a04 	vstr	s13, [r7, #16]
 8003826:	ed87 7a05 	vstr	s14, [r7, #20]
 800382a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800382e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003832:	edd7 7a04 	vldr	s15, [r7, #16]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800383a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800383e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800384a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800384e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003852:	edd7 7a06 	vldr	s15, [r7, #24]
 8003856:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800385a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return result;
 800385e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003862:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003866:	ca07      	ldmia	r2, {r0, r1, r2}
 8003868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800386c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800386e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003872:	ee06 1a90 	vmov	s13, r1
 8003876:	ee07 2a10 	vmov	s14, r2
 800387a:	ee07 3a90 	vmov	s15, r3
}
 800387e:	eeb0 0a66 	vmov.f32	s0, s13
 8003882:	eef0 0a47 	vmov.f32	s1, s14
 8003886:	eeb0 1a67 	vmov.f32	s2, s15
 800388a:	3744      	adds	r7, #68	@ 0x44
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8003894:	b084      	sub	sp, #16
 8003896:	b480      	push	{r7}
 8003898:	b08f      	sub	sp, #60	@ 0x3c
 800389a:	af00      	add	r7, sp, #0
 800389c:	f107 0c40 	add.w	ip, r7, #64	@ 0x40
 80038a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80038a4:	eef0 6a40 	vmov.f32	s13, s0
 80038a8:	eeb0 7a60 	vmov.f32	s14, s1
 80038ac:	eef0 7a41 	vmov.f32	s15, s2
 80038b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80038b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80038b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80038bc:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80038c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c8:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80038cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80038d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038d8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80038dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80038e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80038e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80038ec:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80038f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80038fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003908:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800390c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003914:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003918:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800391c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003920:	edd7 7a05 	vldr	s15, [r7, #20]
 8003924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003928:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800392c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003938:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800393c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003944:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003948:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }};
    return result;
 800394c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003950:	f107 0220 	add.w	r2, r7, #32
 8003954:	ca07      	ldmia	r2, {r0, r1, r2}
 8003956:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800395a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800395c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	ee06 1a90 	vmov	s13, r1
 8003964:	ee07 2a10 	vmov	s14, r2
 8003968:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800396c:	eeb0 0a66 	vmov.f32	s0, s13
 8003970:	eef0 0a47 	vmov.f32	s1, s14
 8003974:	eeb0 1a67 	vmov.f32	s2, s15
 8003978:	373c      	adds	r7, #60	@ 0x3c
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	b004      	add	sp, #16
 8003982:	4770      	bx	lr

08003984 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b090      	sub	sp, #64	@ 0x40
 8003988:	af00      	add	r7, sp, #0
 800398a:	eeb0 6a40 	vmov.f32	s12, s0
 800398e:	eef0 6a60 	vmov.f32	s13, s1
 8003992:	eeb0 7a41 	vmov.f32	s14, s2
 8003996:	eef0 7a61 	vmov.f32	s15, s3
 800399a:	ed87 6a04 	vstr	s12, [r7, #16]
 800399e:	edc7 6a05 	vstr	s13, [r7, #20]
 80039a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80039a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80039aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80039ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80039c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80039c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80039d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80039d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80039de:	ed97 7a05 	vldr	s14, [r7, #20]
 80039e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80039ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f2:	eef0 0a67 	vmov.f32	s1, s15
 80039f6:	eeb0 0a66 	vmov.f32	s0, s13
 80039fa:	f006 fe29 	bl	800a650 <atan2f>
 80039fe:	eef0 7a40 	vmov.f32	s15, s0
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	f7ff fe69 	bl	80036dc <FusionRadiansToDegrees>
 8003a0a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8003a0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8003a12:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a16:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a22:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a32:	eeb0 0a67 	vmov.f32	s0, s15
 8003a36:	f7ff fe65 	bl	8003704 <FusionAsin>
 8003a3a:	eef0 7a40 	vmov.f32	s15, s0
 8003a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a42:	f7ff fe4b 	bl	80036dc <FusionRadiansToDegrees>
 8003a46:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8003a4a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 8003a4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a52:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8003a5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a66:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003a6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	eef0 0a67 	vmov.f32	s1, s15
 8003a82:	eeb0 0a66 	vmov.f32	s0, s13
 8003a86:	f006 fde3 	bl	800a650 <atan2f>
 8003a8a:	eef0 7a40 	vmov.f32	s15, s0
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	f7ff fe23 	bl	80036dc <FusionRadiansToDegrees>
 8003a96:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8003a9a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    }};
    return euler;
 8003a9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003aa2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003aa6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003aac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab2:	ee06 1a90 	vmov	s13, r1
 8003ab6:	ee07 2a10 	vmov	s14, r2
 8003aba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 8003abe:	eeb0 0a66 	vmov.f32	s0, s13
 8003ac2:	eef0 0a47 	vmov.f32	s1, s14
 8003ac6:	eeb0 1a67 	vmov.f32	s2, s15
 8003aca:	3740      	adds	r7, #64	@ 0x40
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	b5b0      	push	{r4, r5, r7, lr}
 8003ad4:	b09e      	sub	sp, #120	@ 0x78
 8003ad6:	af06      	add	r7, sp, #24
 8003ad8:	eef0 4a41 	vmov.f32	s9, s2
 8003adc:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8003ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003ae4:	eeb0 5a61 	vmov.f32	s10, s3
 8003ae8:	eef0 5a42 	vmov.f32	s11, s4
 8003aec:	eeb0 6a62 	vmov.f32	s12, s5
 8003af0:	eef0 6a43 	vmov.f32	s13, s6
 8003af4:	eeb0 7a63 	vmov.f32	s14, s7
 8003af8:	eef0 7a44 	vmov.f32	s15, s8
 8003afc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8003b00:	edc7 0a0c 	vstr	s1, [r7, #48]	@ 0x30
 8003b04:	edc7 4a0d 	vstr	s9, [r7, #52]	@ 0x34
 8003b08:	ed87 5a08 	vstr	s10, [r7, #32]
 8003b0c:	edc7 5a09 	vstr	s11, [r7, #36]	@ 0x24
 8003b10:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8003b14:	edc7 6a05 	vstr	s13, [r7, #20]
 8003b18:	ed87 7a06 	vstr	s14, [r7, #24]
 8003b1c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8003b20:	ed97 5a05 	vldr	s10, [r7, #20]
 8003b24:	edd7 5a06 	vldr	s11, [r7, #24]
 8003b28:	ed97 6a07 	vldr	s12, [r7, #28]
 8003b2c:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8003b30:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003b34:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003b38:	eef0 1a45 	vmov.f32	s3, s10
 8003b3c:	eeb0 2a65 	vmov.f32	s4, s11
 8003b40:	eef0 2a46 	vmov.f32	s5, s12
 8003b44:	eeb0 0a66 	vmov.f32	s0, s13
 8003b48:	eef0 0a47 	vmov.f32	s1, s14
 8003b4c:	eeb0 1a67 	vmov.f32	s2, s15
 8003b50:	f7ff fe04 	bl	800375c <FusionVectorSubtract>
 8003b54:	eef0 6a40 	vmov.f32	s13, s0
 8003b58:	eeb0 7a60 	vmov.f32	s14, s1
 8003b5c:	eef0 7a41 	vmov.f32	s15, s2
 8003b60:	edc7 6a12 	vstr	s13, [r7, #72]	@ 0x48
 8003b64:	ed87 7a13 	vstr	s14, [r7, #76]	@ 0x4c
 8003b68:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
 8003b6c:	ed97 5a08 	vldr	s10, [r7, #32]
 8003b70:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
 8003b74:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8003b78:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8003b7c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b80:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003b84:	eef0 1a45 	vmov.f32	s3, s10
 8003b88:	eeb0 2a65 	vmov.f32	s4, s11
 8003b8c:	eef0 2a46 	vmov.f32	s5, s12
 8003b90:	eeb0 0a66 	vmov.f32	s0, s13
 8003b94:	eef0 0a47 	vmov.f32	s1, s14
 8003b98:	eeb0 1a67 	vmov.f32	s2, s15
 8003b9c:	f7ff fe2c 	bl	80037f8 <FusionVectorHadamardProduct>
 8003ba0:	eef0 6a40 	vmov.f32	s13, s0
 8003ba4:	eeb0 7a60 	vmov.f32	s14, s1
 8003ba8:	eef0 7a41 	vmov.f32	s15, s2
 8003bac:	edc7 6a15 	vstr	s13, [r7, #84]	@ 0x54
 8003bb0:	ed87 7a16 	vstr	s14, [r7, #88]	@ 0x58
 8003bb4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003bb8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8003bbc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003bc0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003bc4:	466d      	mov	r5, sp
 8003bc6:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8003bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003bd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd8:	eeb0 0a66 	vmov.f32	s0, s13
 8003bdc:	eef0 0a47 	vmov.f32	s1, s14
 8003be0:	eeb0 1a67 	vmov.f32	s2, s15
 8003be4:	f7ff fe56 	bl	8003894 <FusionMatrixMultiplyVector>
 8003be8:	eef0 6a40 	vmov.f32	s13, s0
 8003bec:	eeb0 7a60 	vmov.f32	s14, s1
 8003bf0:	eef0 7a41 	vmov.f32	s15, s2
 8003bf4:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8003bf8:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8003bfc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8003c00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c06:	ee06 1a90 	vmov	s13, r1
 8003c0a:	ee07 2a10 	vmov	s14, r2
 8003c0e:	ee07 3a90 	vmov	s15, r3
}
 8003c12:	eeb0 0a66 	vmov.f32	s0, s13
 8003c16:	eef0 0a47 	vmov.f32	s1, s14
 8003c1a:	eeb0 1a67 	vmov.f32	s2, s15
 8003c1e:	3760      	adds	r7, #96	@ 0x60
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003c26:	b004      	add	sp, #16
 8003c28:	4770      	bx	lr
	...

08003c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c2c:	b5b0      	push	{r4, r5, r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c32:	f000 ff9f 	bl	8004b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c36:	f000 f875 	bl	8003d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c3a:	f000 fa55 	bl	80040e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c3e:	f000 fa15 	bl	800406c <MX_DMA_Init>
  MX_SPI1_Init();
 8003c42:	f000 f8ed 	bl	8003e20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003c46:	f000 f9bd 	bl	8003fc4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c4a:	f000 f9e5 	bl	8004018 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8003c4e:	f000 f8d3 	bl	8003df8 <MX_CRC_Init>
  MX_TIM1_Init();
 8003c52:	f000 f91b 	bl	8003e8c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c56:	f000 f969 	bl	8003f2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8003c5a:	4821      	ldr	r0, [pc, #132]	@ (8003ce0 <main+0xb4>)
 8003c5c:	f002 fe88 	bl	8006970 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8003c60:	4820      	ldr	r0, [pc, #128]	@ (8003ce4 <main+0xb8>)
 8003c62:	f002 fe1d 	bl	80068a0 <HAL_TIM_Base_Start>

  // Initialize ICM42688P driver
  // 初始化ICM42688P驱动
  ICM42688P_Init();
 8003c66:	f7fe fcaf 	bl	80025c8 <ICM42688P_Init>


  FusionOffsetInitialise(&offset, SAMPLE_RATE);
 8003c6a:	2164      	movs	r1, #100	@ 0x64
 8003c6c:	481e      	ldr	r0, [pc, #120]	@ (8003ce8 <main+0xbc>)
 8003c6e:	f7fe fa9d 	bl	80021ac <FusionOffsetInitialise>
  FusionAhrsInitialise(&ahrs);
 8003c72:	481e      	ldr	r0, [pc, #120]	@ (8003cec <main+0xc0>)
 8003c74:	f7fd f948 	bl	8000f08 <FusionAhrsInitialise>

  // Set AHRS algorithm settings
  const FusionAhrsSettings settings = {
 8003c78:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf0 <main+0xc4>)
 8003c7a:	463c      	mov	r4, r7
 8003c7c:	461d      	mov	r5, r3
 8003c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c86:	e884 0003 	stmia.w	r4, {r0, r1}
          .gyroscopeRange = 2000.0f, /* replace this with actual gyroscope range in degrees/s */
          .accelerationRejection = 10.0f,
          .magneticRejection = 10.0f,
          .recoveryTriggerPeriod = 5 * SAMPLE_RATE, /* 5 seconds */
  };
  FusionAhrsSetSettings(&ahrs, &settings);
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4817      	ldr	r0, [pc, #92]	@ (8003cec <main+0xc0>)
 8003c90:	f7fd f9bc 	bl	800100c <FusionAhrsSetSettings>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c94:	f003 fecc 	bl	8007a30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003c98:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <main+0xc8>)
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4816      	ldr	r0, [pc, #88]	@ (8003cf8 <main+0xcc>)
 8003c9e:	f003 ff11 	bl	8007ac4 <osThreadNew>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <main+0xd0>)
 8003ca6:	6013      	str	r3, [r2, #0]

  /* creation of imu_acquisition */
  imu_acquisitionHandle = osThreadNew(StartIMUTask, NULL, &imu_acquisition_attributes);
 8003ca8:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <main+0xd4>)
 8003caa:	2100      	movs	r1, #0
 8003cac:	4815      	ldr	r0, [pc, #84]	@ (8003d04 <main+0xd8>)
 8003cae:	f003 ff09 	bl	8007ac4 <osThreadNew>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4a14      	ldr	r2, [pc, #80]	@ (8003d08 <main+0xdc>)
 8003cb6:	6013      	str	r3, [r2, #0]

  /* creation of pose_estimation */
  pose_estimationHandle = osThreadNew(StartPose, NULL, &pose_estimation_attributes);
 8003cb8:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <main+0xe0>)
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4814      	ldr	r0, [pc, #80]	@ (8003d10 <main+0xe4>)
 8003cbe:	f003 ff01 	bl	8007ac4 <osThreadNew>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <main+0xe8>)
 8003cc6:	6013      	str	r3, [r2, #0]

  /* creation of uart_send */
  uart_sendHandle = osThreadNew(StartSend, NULL, &uart_send_attributes);
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <main+0xec>)
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4813      	ldr	r0, [pc, #76]	@ (8003d1c <main+0xf0>)
 8003cce:	f003 fef9 	bl	8007ac4 <osThreadNew>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4a12      	ldr	r2, [pc, #72]	@ (8003d20 <main+0xf4>)
 8003cd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003cd8:	f003 fece 	bl	8007a78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <main+0xb0>
 8003ce0:	20000310 	.word	0x20000310
 8003ce4:	20000358 	.word	0x20000358
 8003ce8:	200000a0 	.word	0x200000a0
 8003cec:	200000b8 	.word	0x200000b8
 8003cf0:	0800bd14 	.word	0x0800bd14
 8003cf4:	0800bebc 	.word	0x0800bebc
 8003cf8:	08004381 	.word	0x08004381
 8003cfc:	200004f0 	.word	0x200004f0
 8003d00:	0800bee0 	.word	0x0800bee0
 8003d04:	080043a1 	.word	0x080043a1
 8003d08:	200004f4 	.word	0x200004f4
 8003d0c:	0800bf04 	.word	0x0800bf04
 8003d10:	0800462d 	.word	0x0800462d
 8003d14:	200004f8 	.word	0x200004f8
 8003d18:	0800bf28 	.word	0x0800bf28
 8003d1c:	0800463d 	.word	0x0800463d
 8003d20:	200004fc 	.word	0x200004fc

08003d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b094      	sub	sp, #80	@ 0x50
 8003d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d2a:	f107 0320 	add.w	r3, r7, #32
 8003d2e:	2230      	movs	r2, #48	@ 0x30
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f006 fc08 	bl	800a548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	4b28      	ldr	r3, [pc, #160]	@ (8003df0 <SystemClock_Config+0xcc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <SystemClock_Config+0xcc>)
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d58:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <SystemClock_Config+0xcc>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	2300      	movs	r3, #0
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <SystemClock_Config+0xd0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	@ (8003df4 <SystemClock_Config+0xd0>)
 8003d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <SystemClock_Config+0xd0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d94:	2310      	movs	r3, #16
 8003d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003d98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003da2:	2307      	movs	r3, #7
 8003da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003da6:	f107 0320 	add.w	r3, r7, #32
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fd84 	bl	80058b8 <HAL_RCC_OscConfig>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003db6:	f000 fc49 	bl	800464c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dba:	230f      	movs	r3, #15
 8003dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	2105      	movs	r1, #5
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 ffe5 	bl	8005da8 <HAL_RCC_ClockConfig>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003de4:	f000 fc32 	bl	800464c <Error_Handler>
  }
}
 8003de8:	bf00      	nop
 8003dea:	3750      	adds	r7, #80	@ 0x50
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000

08003df8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <MX_CRC_Init+0x20>)
 8003dfe:	4a07      	ldr	r2, [pc, #28]	@ (8003e1c <MX_CRC_Init+0x24>)
 8003e00:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003e02:	4805      	ldr	r0, [pc, #20]	@ (8003e18 <MX_CRC_Init+0x20>)
 8003e04:	f001 f85d 	bl	8004ec2 <HAL_CRC_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003e0e:	f000 fc1d 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000250 	.word	0x20000250
 8003e1c:	40023000 	.word	0x40023000

08003e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e24:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e26:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <MX_SPI1_Init+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e2a:	4b16      	ldr	r3, [pc, #88]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e40:	2202      	movs	r2, #2
 8003e42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003e52:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e54:	2210      	movs	r2, #16
 8003e56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e5e:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e64:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e70:	4804      	ldr	r0, [pc, #16]	@ (8003e84 <MX_SPI1_Init+0x64>)
 8003e72:	f002 f9b7 	bl	80061e4 <HAL_SPI_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e7c:	f000 fbe6 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000258 	.word	0x20000258
 8003e88:	40013000 	.word	0x40013000

08003e8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
 8003e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <MX_TIM1_Init+0x9c>)
 8003eac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003eae:	4b1d      	ldr	r3, [pc, #116]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003eb0:	22a7      	movs	r2, #167	@ 0xa7
 8003eb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003eba:	4b1a      	ldr	r3, [pc, #104]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003ebc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003ec0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec2:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ec8:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ece:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003ed0:	2280      	movs	r2, #128	@ 0x80
 8003ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ed4:	4813      	ldr	r0, [pc, #76]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003ed6:	f002 fc93 	bl	8006800 <HAL_TIM_Base_Init>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003ee0:	f000 fbb4 	bl	800464c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4619      	mov	r1, r3
 8003ef0:	480c      	ldr	r0, [pc, #48]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003ef2:	f002 fe9d 	bl	8006c30 <HAL_TIM_ConfigClockSource>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003efc:	f000 fba6 	bl	800464c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f00:	2300      	movs	r3, #0
 8003f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f08:	463b      	mov	r3, r7
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4805      	ldr	r0, [pc, #20]	@ (8003f24 <MX_TIM1_Init+0x98>)
 8003f0e:	f003 f8bf 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003f18:	f000 fb98 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f1c:	bf00      	nop
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000310 	.word	0x20000310
 8003f28:	40010000 	.word	0x40010000

08003f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
 8003f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f40:	463b      	mov	r3, r7
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f52:	2253      	movs	r2, #83	@ 0x53
 8003f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003f5c:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f64:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f6a:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f6c:	2280      	movs	r2, #128	@ 0x80
 8003f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f70:	4813      	ldr	r0, [pc, #76]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f72:	f002 fc45 	bl	8006800 <HAL_TIM_Base_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f7c:	f000 fb66 	bl	800464c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f86:	f107 0308 	add.w	r3, r7, #8
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480c      	ldr	r0, [pc, #48]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003f8e:	f002 fe4f 	bl	8006c30 <HAL_TIM_ConfigClockSource>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003f98:	f000 fb58 	bl	800464c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4805      	ldr	r0, [pc, #20]	@ (8003fc0 <MX_TIM2_Init+0x94>)
 8003faa:	f003 f871 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003fb4:	f000 fb4a 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000358 	.word	0x20000358

08003fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	@ (8004014 <MX_USART1_UART_Init+0x50>)
 8003fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003fea:	220c      	movs	r2, #12
 8003fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fee:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ffa:	4805      	ldr	r0, [pc, #20]	@ (8004010 <MX_USART1_UART_Init+0x4c>)
 8003ffc:	f003 f8d8 	bl	80071b0 <HAL_UART_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004006:	f000 fb21 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200003a0 	.word	0x200003a0
 8004014:	40011000 	.word	0x40011000

08004018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800401c:	4b11      	ldr	r3, [pc, #68]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <MX_USART2_UART_Init+0x50>)
 8004020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004022:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 8004024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800402a:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 800402c:	2200      	movs	r2, #0
 800402e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004030:	4b0c      	ldr	r3, [pc, #48]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 8004032:	2200      	movs	r2, #0
 8004034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800403c:	4b09      	ldr	r3, [pc, #36]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 800403e:	220c      	movs	r2, #12
 8004040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004042:	4b08      	ldr	r3, [pc, #32]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004048:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800404e:	4805      	ldr	r0, [pc, #20]	@ (8004064 <MX_USART2_UART_Init+0x4c>)
 8004050:	f003 f8ae 	bl	80071b0 <HAL_UART_Init>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800405a:	f000 faf7 	bl	800464c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200003e8 	.word	0x200003e8
 8004068:	40004400 	.word	0x40004400

0800406c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <MX_DMA_Init+0x78>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a1a      	ldr	r2, [pc, #104]	@ (80040e4 <MX_DMA_Init+0x78>)
 800407c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004080:	6313      	str	r3, [r2, #48]	@ 0x30
 8004082:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <MX_DMA_Init+0x78>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <MX_DMA_Init+0x78>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4a13      	ldr	r2, [pc, #76]	@ (80040e4 <MX_DMA_Init+0x78>)
 8004098:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30
 800409e:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <MX_DMA_Init+0x78>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2105      	movs	r1, #5
 80040ae:	2010      	movs	r0, #16
 80040b0:	f000 fed1 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80040b4:	2010      	movs	r0, #16
 80040b6:	f000 feea 	bl	8004e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2105      	movs	r1, #5
 80040be:	2011      	movs	r0, #17
 80040c0:	f000 fec9 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80040c4:	2011      	movs	r0, #17
 80040c6:	f000 fee2 	bl	8004e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2105      	movs	r1, #5
 80040ce:	2038      	movs	r0, #56	@ 0x38
 80040d0:	f000 fec1 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80040d4:	2038      	movs	r0, #56	@ 0x38
 80040d6:	f000 feda 	bl	8004e8e <HAL_NVIC_EnableIRQ>

}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	4b44      	ldr	r3, [pc, #272]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	4a43      	ldr	r2, [pc, #268]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410c:	6313      	str	r3, [r2, #48]	@ 0x30
 800410e:	4b41      	ldr	r3, [pc, #260]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004122:	4a3c      	ldr	r2, [pc, #240]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6313      	str	r3, [r2, #48]	@ 0x30
 800412a:	4b3a      	ldr	r3, [pc, #232]	@ (8004214 <MX_GPIO_Init+0x12c>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	4b36      	ldr	r3, [pc, #216]	@ (8004214 <MX_GPIO_Init+0x12c>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6313      	str	r3, [r2, #48]	@ 0x30
 8004146:	4b33      	ldr	r3, [pc, #204]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	4b2f      	ldr	r3, [pc, #188]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <MX_GPIO_Init+0x12c>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6313      	str	r3, [r2, #48]	@ 0x30
 8004162:	4b2c      	ldr	r3, [pc, #176]	@ (8004214 <MX_GPIO_Init+0x12c>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	2110      	movs	r1, #16
 8004172:	4829      	ldr	r0, [pc, #164]	@ (8004218 <MX_GPIO_Init+0x130>)
 8004174:	f001 fb48 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8004178:	2200      	movs	r2, #0
 800417a:	2110      	movs	r1, #16
 800417c:	4827      	ldr	r0, [pc, #156]	@ (800421c <MX_GPIO_Init+0x134>)
 800417e:	f001 fb43 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED1_Pin|Status_LED2_Pin, GPIO_PIN_RESET);
 8004182:	2200      	movs	r2, #0
 8004184:	2130      	movs	r1, #48	@ 0x30
 8004186:	4826      	ldr	r0, [pc, #152]	@ (8004220 <MX_GPIO_Init+0x138>)
 8004188:	f001 fb3e 	bl	8005808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800418c:	2310      	movs	r3, #16
 800418e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004190:	2301      	movs	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	481d      	ldr	r0, [pc, #116]	@ (8004218 <MX_GPIO_Init+0x130>)
 80041a4:	f001 f994 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80041a8:	2310      	movs	r3, #16
 80041aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b4:	2300      	movs	r3, #0
 80041b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	4619      	mov	r1, r3
 80041be:	4817      	ldr	r0, [pc, #92]	@ (800421c <MX_GPIO_Init+0x134>)
 80041c0:	f001 f986 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80041c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80041cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4619      	mov	r1, r3
 80041d8:	4811      	ldr	r0, [pc, #68]	@ (8004220 <MX_GPIO_Init+0x138>)
 80041da:	f001 f979 	bl	80054d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Status_LED1_Pin Status_LED2_Pin */
  GPIO_InitStruct.Pin = Status_LED1_Pin|Status_LED2_Pin;
 80041de:	2330      	movs	r3, #48	@ 0x30
 80041e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	4619      	mov	r1, r3
 80041f4:	480a      	ldr	r0, [pc, #40]	@ (8004220 <MX_GPIO_Init+0x138>)
 80041f6:	f001 f96b 	bl	80054d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2107      	movs	r1, #7
 80041fe:	2006      	movs	r0, #6
 8004200:	f000 fe29 	bl	8004e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004204:	2006      	movs	r0, #6
 8004206:	f000 fe42 	bl	8004e8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800420a:	bf00      	nop
 800420c:	3728      	adds	r7, #40	@ 0x28
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	40020000 	.word	0x40020000
 800421c:	40020800 	.word	0x40020800
 8004220:	40020400 	.word	0x40020400

08004224 <GetTimeUS_TIM>:

/* USER CODE BEGIN 4 */
uint32_t GetTimeUS_TIM(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
    return htim2.Instance->CNT;  // 每次读取当前时间(us)
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <GetTimeUS_TIM+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	//return 0;
}
 800422e:	4618      	mov	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	20000358 	.word	0x20000358

0800423c <HAL_TIM_PeriodElapsedCallback>:
// TIM1 定时器中断回调函数
// TIM1 timer interrupt callback function

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a05      	ldr	r2, [pc, #20]	@ (8004260 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d104      	bne.n	8004258 <HAL_TIM_PeriodElapsedCallback+0x1c>
	//HAL_Delay(1);
    // 启动 SPI1 DMA 接收
    // Start SPI1 DMA reception
	//ICM42688P_Read_FIFO_DMA();

	  icm42688_read_all(&imudata);
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004250:	f7fe fa2c 	bl	80026ac <icm42688_read_all>
	  GetPose();
 8004254:	f000 f8ac 	bl	80043b0 <GetPose>
	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  }


}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40010000 	.word	0x40010000
 8004264:	2000007c 	.word	0x2000007c

08004268 <mavlink_send_heartbeat>:
}

/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
void mavlink_send_heartbeat(void) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b0ce      	sub	sp, #312	@ 0x138
 800426c:	af00      	add	r7, sp, #0
    mavlink_message_t msg;
    mavlink_heartbeat_t heartbeat;

    heartbeat.type = MAV_TYPE_QUADROTOR;
 800426e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004272:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004276:	2202      	movs	r2, #2
 8004278:	711a      	strb	r2, [r3, #4]
    heartbeat.autopilot = MAV_AUTOPILOT_ARDUPILOTMEGA;
 800427a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800427e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004282:	2203      	movs	r2, #3
 8004284:	715a      	strb	r2, [r3, #5]
    heartbeat.base_mode = MAV_MODE_FLAG_CUSTOM_MODE_ENABLED;
 8004286:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800428a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800428e:	2201      	movs	r2, #1
 8004290:	719a      	strb	r2, [r3, #6]
    heartbeat.custom_mode = 0;
 8004292:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004296:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
    heartbeat.system_status = MAV_STATE_ACTIVE;
 800429e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80042a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80042a6:	2204      	movs	r2, #4
 80042a8:	71da      	strb	r2, [r3, #7]
    heartbeat.mavlink_version = 3;
 80042aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80042ae:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80042b2:	2203      	movs	r2, #3
 80042b4:	721a      	strb	r2, [r3, #8]

    mavlink_msg_heartbeat_encode(1, 1, &msg, &heartbeat);
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	f107 0210 	add.w	r2, r7, #16
 80042bc:	2101      	movs	r1, #1
 80042be:	2001      	movs	r0, #1
 80042c0:	f7ff f9e8 	bl	8003694 <mavlink_msg_heartbeat_encode>

    uint16_t len = mavlink_msg_to_send_buffer(mavlink_tx_buffer, &msg);
 80042c4:	f107 0310 	add.w	r3, r7, #16
 80042c8:	4619      	mov	r1, r3
 80042ca:	4809      	ldr	r0, [pc, #36]	@ (80042f0 <mavlink_send_heartbeat+0x88>)
 80042cc:	f7ff f850 	bl	8003370 <mavlink_msg_to_send_buffer>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
    HAL_UART_Transmit(&huart2, mavlink_tx_buffer, len, HAL_MAX_DELAY);
 80042d6:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80042da:	f04f 33ff 	mov.w	r3, #4294967295
 80042de:	4904      	ldr	r1, [pc, #16]	@ (80042f0 <mavlink_send_heartbeat+0x88>)
 80042e0:	4804      	ldr	r0, [pc, #16]	@ (80042f4 <mavlink_send_heartbeat+0x8c>)
 80042e2:	f002 ffb5 	bl	8007250 <HAL_UART_Transmit>
}
 80042e6:	bf00      	nop
 80042e8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000138 	.word	0x20000138
 80042f4:	200003e8 	.word	0x200003e8

080042f8 <SendToPC>:
void SendToPC(void){
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b0d2      	sub	sp, #328	@ 0x148
 80042fc:	af00      	add	r7, sp, #0

    // 创建一个 Attitude 消息
    mavlink_attitude_t attitude;

    // 填充消息字段
    attitude.time_boot_ms = HAL_GetTick(); // 使用 HAL 库获取系统启动时间（毫秒）
 80042fe:	f000 fc9f 	bl	8004c40 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004308:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800430c:	601a      	str	r2, [r3, #0]
    attitude.roll = euler.angle.roll;                   // 滚转角（弧度）
 800430e:	4b19      	ldr	r3, [pc, #100]	@ (8004374 <SendToPC+0x7c>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004316:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800431a:	605a      	str	r2, [r3, #4]
    attitude.pitch = euler.angle.pitch;                  // 俯仰角（弧度）
 800431c:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <SendToPC+0x7c>)
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004324:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004328:	609a      	str	r2, [r3, #8]
    attitude.yaw = euler.angle.yaw;                    // 偏航角（弧度）
 800432a:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <SendToPC+0x7c>)
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004332:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004336:	60da      	str	r2, [r3, #12]


    // 将 Attitude 消息打包成 Mavlink 消息
    // 参数: system_id, component_id, &msg, &attitude
    mavlink_msg_attitude_encode(1, 1, &msg, &attitude);
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	f107 0220 	add.w	r2, r7, #32
 800433e:	2101      	movs	r1, #1
 8004340:	2001      	movs	r0, #1
 8004342:	f7ff f93b 	bl	80035bc <mavlink_msg_attitude_encode>

    // 将 Mavlink 消息序列化到缓冲区
    len = mavlink_msg_to_send_buffer(mavlink_tx_buffer, &msg);
 8004346:	f107 0320 	add.w	r3, r7, #32
 800434a:	4619      	mov	r1, r3
 800434c:	480a      	ldr	r0, [pc, #40]	@ (8004378 <SendToPC+0x80>)
 800434e:	f7ff f80f 	bl	8003370 <mavlink_msg_to_send_buffer>
 8004352:	4603      	mov	r3, r0
 8004354:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

    // 使用 HAL_UART_Transmit 发送数据
    // 假设你使用 USART2，其句柄为 &huart2
    //HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data) - 1, HAL_MAX_DELAY);

    HAL_UART_Transmit(&huart2, mavlink_tx_buffer, len, HAL_MAX_DELAY);
 8004358:	f8b7 2146 	ldrh.w	r2, [r7, #326]	@ 0x146
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	4905      	ldr	r1, [pc, #20]	@ (8004378 <SendToPC+0x80>)
 8004362:	4806      	ldr	r0, [pc, #24]	@ (800437c <SendToPC+0x84>)
 8004364:	f002 ff74 	bl	8007250 <HAL_UART_Transmit>

}
 8004368:	bf00      	nop
 800436a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000012c 	.word	0x2000012c
 8004378:	20000138 	.word	0x20000138
 800437c:	200003e8 	.word	0x200003e8

08004380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_UART_Transmit_DMA(&huart2, tx_data, sizeof(tx_data) - 1);
	  mavlink_send_heartbeat();
 8004388:	f7ff ff6e 	bl	8004268 <mavlink_send_heartbeat>
      osDelay(10);
 800438c:	200a      	movs	r0, #10
 800438e:	f003 fc2b 	bl	8007be8 <osDelay>
	  SendToPC();
 8004392:	f7ff ffb1 	bl	80042f8 <SendToPC>
      osDelay(10);
 8004396:	200a      	movs	r0, #10
 8004398:	f003 fc26 	bl	8007be8 <osDelay>
	  mavlink_send_heartbeat();
 800439c:	bf00      	nop
 800439e:	e7f3      	b.n	8004388 <StartDefaultTask+0x8>

080043a0 <StartIMUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMUTask */
void StartIMUTask(void *argument)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80043a8:	2001      	movs	r0, #1
 80043aa:	f003 fc1d 	bl	8007be8 <osDelay>
 80043ae:	e7fb      	b.n	80043a8 <StartIMUTask+0x8>

080043b0 <GetPose>:
  }
  /* USER CODE END StartIMUTask */
}

/* USER CODE BEGIN Header_StartPose */
void GetPose(void){
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b093      	sub	sp, #76	@ 0x4c
 80043b4:	af06      	add	r7, sp, #24
	preCNT = GetTimeUS_TIM();
 80043b6:	f7ff ff35 	bl	8004224 <GetTimeUS_TIM>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4a8c      	ldr	r2, [pc, #560]	@ (80045f0 <GetPose+0x240>)
 80043be:	6013      	str	r3, [r2, #0]
		  // Acquire latest sensor data
		          const clock_t timestamp = clock(); // replace this with actual gyroscope timestamp
 80043c0:	f006 f8ca 	bl	800a558 <clock>
 80043c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
		          FusionVector gyroscope = {imudata.gyro_x, imudata.gyro_y, imudata.gyro_z}; // replace this with actual gyroscope data in degrees/s
 80043c6:	4b8b      	ldr	r3, [pc, #556]	@ (80045f4 <GetPose+0x244>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	4b89      	ldr	r3, [pc, #548]	@ (80045f4 <GetPose+0x244>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	4b88      	ldr	r3, [pc, #544]	@ (80045f4 <GetPose+0x244>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	617b      	str	r3, [r7, #20]
		          FusionVector accelerometer = {imudata.accel_x, imudata.accel_y, imudata.accel_z}; // replace this with actual accelerometer data in g
 80043d8:	4b86      	ldr	r3, [pc, #536]	@ (80045f4 <GetPose+0x244>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4b85      	ldr	r3, [pc, #532]	@ (80045f4 <GetPose+0x244>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	607b      	str	r3, [r7, #4]
 80043e4:	4b83      	ldr	r3, [pc, #524]	@ (80045f4 <GetPose+0x244>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	60bb      	str	r3, [r7, #8]

		          // Apply calibration
		          gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80043ea:	4b83      	ldr	r3, [pc, #524]	@ (80045f8 <GetPose+0x248>)
 80043ec:	edd3 3a00 	vldr	s7, [r3]
 80043f0:	ed93 4a01 	vldr	s8, [r3, #4]
 80043f4:	edd3 4a02 	vldr	s9, [r3, #8]
 80043f8:	4b80      	ldr	r3, [pc, #512]	@ (80045fc <GetPose+0x24c>)
 80043fa:	ed93 5a00 	vldr	s10, [r3]
 80043fe:	edd3 5a01 	vldr	s11, [r3, #4]
 8004402:	ed93 6a02 	vldr	s12, [r3, #8]
 8004406:	4e7e      	ldr	r6, [pc, #504]	@ (8004600 <GetPose+0x250>)
 8004408:	edd7 6a03 	vldr	s13, [r7, #12]
 800440c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004410:	edd7 7a05 	vldr	s15, [r7, #20]
 8004414:	466d      	mov	r5, sp
 8004416:	f106 0410 	add.w	r4, r6, #16
 800441a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800441c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	602b      	str	r3, [r5, #0]
 8004422:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004426:	eeb0 3a63 	vmov.f32	s6, s7
 800442a:	eef0 3a44 	vmov.f32	s7, s8
 800442e:	eeb0 4a64 	vmov.f32	s8, s9
 8004432:	eef0 1a45 	vmov.f32	s3, s10
 8004436:	eeb0 2a65 	vmov.f32	s4, s11
 800443a:	eef0 2a46 	vmov.f32	s5, s12
 800443e:	eeb0 0a66 	vmov.f32	s0, s13
 8004442:	eef0 0a47 	vmov.f32	s1, s14
 8004446:	eeb0 1a67 	vmov.f32	s2, s15
 800444a:	f7ff fb41 	bl	8003ad0 <FusionCalibrationInertial>
 800444e:	eef0 6a40 	vmov.f32	s13, s0
 8004452:	eeb0 7a60 	vmov.f32	s14, s1
 8004456:	eef0 7a41 	vmov.f32	s15, s2
 800445a:	edc7 6a03 	vstr	s13, [r7, #12]
 800445e:	ed87 7a04 	vstr	s14, [r7, #16]
 8004462:	edc7 7a05 	vstr	s15, [r7, #20]
		          accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 8004466:	4b67      	ldr	r3, [pc, #412]	@ (8004604 <GetPose+0x254>)
 8004468:	edd3 3a00 	vldr	s7, [r3]
 800446c:	ed93 4a01 	vldr	s8, [r3, #4]
 8004470:	edd3 4a02 	vldr	s9, [r3, #8]
 8004474:	4b64      	ldr	r3, [pc, #400]	@ (8004608 <GetPose+0x258>)
 8004476:	ed93 5a00 	vldr	s10, [r3]
 800447a:	edd3 5a01 	vldr	s11, [r3, #4]
 800447e:	ed93 6a02 	vldr	s12, [r3, #8]
 8004482:	4e62      	ldr	r6, [pc, #392]	@ (800460c <GetPose+0x25c>)
 8004484:	edd7 6a00 	vldr	s13, [r7]
 8004488:	ed97 7a01 	vldr	s14, [r7, #4]
 800448c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004490:	466d      	mov	r5, sp
 8004492:	f106 0410 	add.w	r4, r6, #16
 8004496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80044a2:	eeb0 3a63 	vmov.f32	s6, s7
 80044a6:	eef0 3a44 	vmov.f32	s7, s8
 80044aa:	eeb0 4a64 	vmov.f32	s8, s9
 80044ae:	eef0 1a45 	vmov.f32	s3, s10
 80044b2:	eeb0 2a65 	vmov.f32	s4, s11
 80044b6:	eef0 2a46 	vmov.f32	s5, s12
 80044ba:	eeb0 0a66 	vmov.f32	s0, s13
 80044be:	eef0 0a47 	vmov.f32	s1, s14
 80044c2:	eeb0 1a67 	vmov.f32	s2, s15
 80044c6:	f7ff fb03 	bl	8003ad0 <FusionCalibrationInertial>
 80044ca:	eef0 6a40 	vmov.f32	s13, s0
 80044ce:	eeb0 7a60 	vmov.f32	s14, s1
 80044d2:	eef0 7a41 	vmov.f32	s15, s2
 80044d6:	edc7 6a00 	vstr	s13, [r7]
 80044da:	ed87 7a01 	vstr	s14, [r7, #4]
 80044de:	edc7 7a02 	vstr	s15, [r7, #8]

		          // Update gyroscope offset correction algorithm
		          gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 80044e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80044e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80044ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80044ee:	eeb0 0a66 	vmov.f32	s0, s13
 80044f2:	eef0 0a47 	vmov.f32	s1, s14
 80044f6:	eeb0 1a67 	vmov.f32	s2, s15
 80044fa:	4845      	ldr	r0, [pc, #276]	@ (8004610 <GetPose+0x260>)
 80044fc:	f7fd fe88 	bl	8002210 <FusionOffsetUpdate>
 8004500:	eef0 6a40 	vmov.f32	s13, s0
 8004504:	eeb0 7a60 	vmov.f32	s14, s1
 8004508:	eef0 7a41 	vmov.f32	s15, s2
 800450c:	edc7 6a03 	vstr	s13, [r7, #12]
 8004510:	ed87 7a04 	vstr	s14, [r7, #16]
 8004514:	edc7 7a05 	vstr	s15, [r7, #20]

		          // Calculate delta time (in seconds) to account for gyroscope sample clock error
		          static clock_t previousTimestamp;
		          const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 8004518:	4b3e      	ldr	r3, [pc, #248]	@ (8004614 <GetPose+0x264>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004528:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8004618 <GetPose+0x268>
 800452c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004530:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		          previousTimestamp = timestamp;
 8004534:	4a37      	ldr	r2, [pc, #220]	@ (8004614 <GetPose+0x264>)
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	6013      	str	r3, [r2, #0]

		          // Update gyroscope AHRS algorithm
		          FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, 0.01);
 800453a:	ed97 5a00 	vldr	s10, [r7]
 800453e:	edd7 5a01 	vldr	s11, [r7, #4]
 8004542:	ed97 6a02 	vldr	s12, [r7, #8]
 8004546:	edd7 6a03 	vldr	s13, [r7, #12]
 800454a:	ed97 7a04 	vldr	s14, [r7, #16]
 800454e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004552:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 800461c <GetPose+0x26c>
 8004556:	eef0 1a45 	vmov.f32	s3, s10
 800455a:	eeb0 2a65 	vmov.f32	s4, s11
 800455e:	eef0 2a46 	vmov.f32	s5, s12
 8004562:	eeb0 0a66 	vmov.f32	s0, s13
 8004566:	eef0 0a47 	vmov.f32	s1, s14
 800456a:	eeb0 1a67 	vmov.f32	s2, s15
 800456e:	482c      	ldr	r0, [pc, #176]	@ (8004620 <GetPose+0x270>)
 8004570:	f7fd fc28 	bl	8001dc4 <FusionAhrsUpdateNoMagnetometer>

		          // Print algorithm outputs
		          euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8004574:	482a      	ldr	r0, [pc, #168]	@ (8004620 <GetPose+0x270>)
 8004576:	f7fd fc7f 	bl	8001e78 <FusionAhrsGetQuaternion>
 800457a:	eeb0 6a40 	vmov.f32	s12, s0
 800457e:	eef0 6a60 	vmov.f32	s13, s1
 8004582:	eeb0 7a41 	vmov.f32	s14, s2
 8004586:	eef0 7a61 	vmov.f32	s15, s3
 800458a:	ed87 6a06 	vstr	s12, [r7, #24]
 800458e:	edc7 6a07 	vstr	s13, [r7, #28]
 8004592:	ed87 7a08 	vstr	s14, [r7, #32]
 8004596:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800459a:	ed97 6a06 	vldr	s12, [r7, #24]
 800459e:	edd7 6a07 	vldr	s13, [r7, #28]
 80045a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80045a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045aa:	eeb0 0a46 	vmov.f32	s0, s12
 80045ae:	eef0 0a66 	vmov.f32	s1, s13
 80045b2:	eeb0 1a47 	vmov.f32	s2, s14
 80045b6:	eef0 1a67 	vmov.f32	s3, s15
 80045ba:	f7ff f9e3 	bl	8003984 <FusionQuaternionToEuler>
 80045be:	eef0 6a40 	vmov.f32	s13, s0
 80045c2:	eeb0 7a60 	vmov.f32	s14, s1
 80045c6:	eef0 7a41 	vmov.f32	s15, s2
 80045ca:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <GetPose+0x274>)
 80045cc:	edc3 6a00 	vstr	s13, [r3]
 80045d0:	ed83 7a01 	vstr	s14, [r3, #4]
 80045d4:	edc3 7a02 	vstr	s15, [r3, #8]

	        	  delCNT = GetTimeUS_TIM()-preCNT;
 80045d8:	f7ff fe24 	bl	8004224 <GetTimeUS_TIM>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <GetPose+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	4a10      	ldr	r2, [pc, #64]	@ (8004628 <GetPose+0x278>)
 80045e6:	6013      	str	r3, [r2, #0]

}
 80045e8:	bf00      	nop
 80045ea:	3734      	adds	r7, #52	@ 0x34
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f0:	20000500 	.word	0x20000500
 80045f4:	2000007c 	.word	0x2000007c
 80045f8:	0800be74 	.word	0x0800be74
 80045fc:	0800be68 	.word	0x0800be68
 8004600:	0800be44 	.word	0x0800be44
 8004604:	0800beb0 	.word	0x0800beb0
 8004608:	0800bea4 	.word	0x0800bea4
 800460c:	0800be80 	.word	0x0800be80
 8004610:	200000a0 	.word	0x200000a0
 8004614:	20000568 	.word	0x20000568
 8004618:	42c80000 	.word	0x42c80000
 800461c:	3c23d70a 	.word	0x3c23d70a
 8004620:	200000b8 	.word	0x200000b8
 8004624:	2000012c 	.word	0x2000012c
 8004628:	20000504 	.word	0x20000504

0800462c <StartPose>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPose */
void StartPose(void *argument)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8004634:	2001      	movs	r0, #1
 8004636:	f003 fad7 	bl	8007be8 <osDelay>
 800463a:	e7fb      	b.n	8004634 <StartPose+0x8>

0800463c <StartSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSend */
void StartSend(void *argument)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSend */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004644:	2001      	movs	r0, #1
 8004646:	f003 facf 	bl	8007be8 <osDelay>
 800464a:	e7fb      	b.n	8004644 <StartSend+0x8>

0800464c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004650:	b672      	cpsid	i
}
 8004652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <Error_Handler+0x8>

08004658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_MspInit+0x54>)
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	4a11      	ldr	r2, [pc, #68]	@ (80046ac <HAL_MspInit+0x54>)
 8004668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800466c:	6453      	str	r3, [r2, #68]	@ 0x44
 800466e:	4b0f      	ldr	r3, [pc, #60]	@ (80046ac <HAL_MspInit+0x54>)
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	603b      	str	r3, [r7, #0]
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <HAL_MspInit+0x54>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	4a0a      	ldr	r2, [pc, #40]	@ (80046ac <HAL_MspInit+0x54>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004688:	6413      	str	r3, [r2, #64]	@ 0x40
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <HAL_MspInit+0x54>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004696:	2200      	movs	r2, #0
 8004698:	210f      	movs	r1, #15
 800469a:	f06f 0001 	mvn.w	r0, #1
 800469e:	f000 fbda 	bl	8004e56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0b      	ldr	r2, [pc, #44]	@ (80046ec <HAL_CRC_MspInit+0x3c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d10d      	bne.n	80046de <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <HAL_CRC_MspInit+0x40>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <HAL_CRC_MspInit+0x40>)
 80046cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046d2:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <HAL_CRC_MspInit+0x40>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40023000 	.word	0x40023000
 80046f0:	40023800 	.word	0x40023800

080046f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 0314 	add.w	r3, r7, #20
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	@ (80047e4 <HAL_SPI_MspInit+0xf0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d162      	bne.n	80047dc <HAL_SPI_MspInit+0xe8>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	4b33      	ldr	r3, [pc, #204]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	4a32      	ldr	r2, [pc, #200]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 8004720:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004724:	6453      	str	r3, [r2, #68]	@ 0x44
 8004726:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	4a2b      	ldr	r2, [pc, #172]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	@ 0x30
 8004742:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <HAL_SPI_MspInit+0xf4>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IMU_CLK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 800474e:	23e0      	movs	r3, #224	@ 0xe0
 8004750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004752:	2302      	movs	r3, #2
 8004754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475a:	2303      	movs	r3, #3
 800475c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800475e:	2305      	movs	r3, #5
 8004760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004762:	f107 0314 	add.w	r3, r7, #20
 8004766:	4619      	mov	r1, r3
 8004768:	4820      	ldr	r0, [pc, #128]	@ (80047ec <HAL_SPI_MspInit+0xf8>)
 800476a:	f000 feb1 	bl	80054d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800476e:	4b20      	ldr	r3, [pc, #128]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 8004770:	4a20      	ldr	r2, [pc, #128]	@ (80047f4 <HAL_SPI_MspInit+0x100>)
 8004772:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004774:	4b1e      	ldr	r3, [pc, #120]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 8004776:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800477a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800477c:	4b1c      	ldr	r3, [pc, #112]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004782:	4b1b      	ldr	r3, [pc, #108]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 8004784:	2200      	movs	r2, #0
 8004786:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004788:	4b19      	ldr	r3, [pc, #100]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 800478a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800478e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004790:	4b17      	ldr	r3, [pc, #92]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 8004792:	2200      	movs	r2, #0
 8004794:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004796:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800479c:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047a2:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047aa:	2204      	movs	r2, #4
 80047ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047ae:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047b0:	2203      	movs	r2, #3
 80047b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80047b4:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80047c0:	480b      	ldr	r0, [pc, #44]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047c2:	f000 fb9b 	bl	8004efc <HAL_DMA_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_SPI_MspInit+0xdc>
    {
      Error_Handler();
 80047cc:	f7ff ff3e 	bl	800464c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80047d6:	4a06      	ldr	r2, [pc, #24]	@ (80047f0 <HAL_SPI_MspInit+0xfc>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80047dc:	bf00      	nop
 80047de:	3728      	adds	r7, #40	@ 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40013000 	.word	0x40013000
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40020000 	.word	0x40020000
 80047f0:	200002b0 	.word	0x200002b0
 80047f4:	40026410 	.word	0x40026410

080047f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <HAL_TIM_Base_MspInit+0x70>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d116      	bne.n	8004838 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	4b17      	ldr	r3, [pc, #92]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	4a16      	ldr	r2, [pc, #88]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6453      	str	r3, [r2, #68]	@ 0x44
 800481a:	4b14      	ldr	r3, [pc, #80]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004826:	2200      	movs	r2, #0
 8004828:	2105      	movs	r1, #5
 800482a:	2019      	movs	r0, #25
 800482c:	f000 fb13 	bl	8004e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004830:	2019      	movs	r0, #25
 8004832:	f000 fb2c 	bl	8004e8e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004836:	e012      	b.n	800485e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004840:	d10d      	bne.n	800485e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60bb      	str	r3, [r7, #8]
 8004846:	4b09      	ldr	r3, [pc, #36]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	4a08      	ldr	r2, [pc, #32]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6413      	str	r3, [r2, #64]	@ 0x40
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <HAL_TIM_Base_MspInit+0x74>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	68bb      	ldr	r3, [r7, #8]
}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40010000 	.word	0x40010000
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 031c 	add.w	r3, r7, #28
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a66      	ldr	r2, [pc, #408]	@ (8004a28 <HAL_UART_MspInit+0x1b8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d12d      	bne.n	80048ee <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	4b65      	ldr	r3, [pc, #404]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	4a64      	ldr	r2, [pc, #400]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 800489c:	f043 0310 	orr.w	r3, r3, #16
 80048a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048a2:	4b62      	ldr	r3, [pc, #392]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	4b5e      	ldr	r3, [pc, #376]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	4a5d      	ldr	r2, [pc, #372]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80048be:	4b5b      	ldr	r3, [pc, #364]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80048ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80048ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d8:	2303      	movs	r3, #3
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048dc:	2307      	movs	r3, #7
 80048de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e0:	f107 031c 	add.w	r3, r7, #28
 80048e4:	4619      	mov	r1, r3
 80048e6:	4852      	ldr	r0, [pc, #328]	@ (8004a30 <HAL_UART_MspInit+0x1c0>)
 80048e8:	f000 fdf2 	bl	80054d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80048ec:	e098      	b.n	8004a20 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a50      	ldr	r2, [pc, #320]	@ (8004a34 <HAL_UART_MspInit+0x1c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	f040 8093 	bne.w	8004a20 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	4a4a      	ldr	r2, [pc, #296]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 8004904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004908:	6413      	str	r3, [r2, #64]	@ 0x40
 800490a:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	4b44      	ldr	r3, [pc, #272]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	4a43      	ldr	r2, [pc, #268]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6313      	str	r3, [r2, #48]	@ 0x30
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <HAL_UART_MspInit+0x1bc>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004932:	230c      	movs	r3, #12
 8004934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004936:	2302      	movs	r3, #2
 8004938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493e:	2303      	movs	r3, #3
 8004940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004942:	2307      	movs	r3, #7
 8004944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004946:	f107 031c 	add.w	r3, r7, #28
 800494a:	4619      	mov	r1, r3
 800494c:	4838      	ldr	r0, [pc, #224]	@ (8004a30 <HAL_UART_MspInit+0x1c0>)
 800494e:	f000 fdbf 	bl	80054d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004952:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004954:	4a39      	ldr	r2, [pc, #228]	@ (8004a3c <HAL_UART_MspInit+0x1cc>)
 8004956:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004958:	4b37      	ldr	r3, [pc, #220]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 800495a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800495e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004960:	4b35      	ldr	r3, [pc, #212]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004962:	2200      	movs	r2, #0
 8004964:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004966:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004968:	2200      	movs	r2, #0
 800496a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800496c:	4b32      	ldr	r3, [pc, #200]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 800496e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004972:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004974:	4b30      	ldr	r3, [pc, #192]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004976:	2200      	movs	r2, #0
 8004978:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800497a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004980:	4b2d      	ldr	r3, [pc, #180]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004986:	4b2c      	ldr	r3, [pc, #176]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004988:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800498c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800498e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004990:	2204      	movs	r2, #4
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004994:	4b28      	ldr	r3, [pc, #160]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 8004996:	2203      	movs	r2, #3
 8004998:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800499a:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 800499c:	2200      	movs	r2, #0
 800499e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80049a0:	4b25      	ldr	r3, [pc, #148]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80049a6:	4824      	ldr	r0, [pc, #144]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 80049a8:	f000 faa8 	bl	8004efc <HAL_DMA_Init>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_UART_MspInit+0x146>
      Error_Handler();
 80049b2:	f7ff fe4b 	bl	800464c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 80049ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a38 <HAL_UART_MspInit+0x1c8>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80049c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a44 <HAL_UART_MspInit+0x1d4>)
 80049c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80049c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049dc:	4b18      	ldr	r3, [pc, #96]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049e4:	4b16      	ldr	r3, [pc, #88]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049ea:	4b15      	ldr	r3, [pc, #84]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80049f0:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 80049f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80049fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004a04:	480e      	ldr	r0, [pc, #56]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 8004a06:	f000 fa79 	bl	8004efc <HAL_DMA_Init>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004a10:	f7ff fe1c 	bl	800464c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 8004a18:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a1a:	4a09      	ldr	r2, [pc, #36]	@ (8004a40 <HAL_UART_MspInit+0x1d0>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004a20:	bf00      	nop
 8004a22:	3730      	adds	r7, #48	@ 0x30
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40004400 	.word	0x40004400
 8004a38:	20000430 	.word	0x20000430
 8004a3c:	40026088 	.word	0x40026088
 8004a40:	20000490 	.word	0x20000490
 8004a44:	400260a0 	.word	0x400260a0

08004a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <NMI_Handler+0x4>

08004a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a54:	bf00      	nop
 8004a56:	e7fd      	b.n	8004a54 <HardFault_Handler+0x4>

08004a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <MemManage_Handler+0x4>

08004a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <BusFault_Handler+0x4>

08004a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <UsageFault_Handler+0x4>

08004a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a82:	f000 f8c9 	bl	8004c18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a86:	f004 fce1 	bl	800944c <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a90:	f005 fada 	bl	800a048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f000 fee7 	bl	8005870 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004aac:	4802      	ldr	r0, [pc, #8]	@ (8004ab8 <DMA1_Stream5_IRQHandler+0x10>)
 8004aae:	f000 fad3 	bl	8005058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000430 	.word	0x20000430

08004abc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ac0:	4802      	ldr	r0, [pc, #8]	@ (8004acc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ac2:	f001 ffc5 	bl	8006a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004ac6:	bf00      	nop
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000310 	.word	0x20000310

08004ad0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004ad4:	4802      	ldr	r0, [pc, #8]	@ (8004ae0 <DMA2_Stream0_IRQHandler+0x10>)
 8004ad6:	f000 fabf 	bl	8005058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200002b0 	.word	0x200002b0

08004ae4 <_times>:
  errno = ENOENT;
  return -1;
}

int _times(struct tms *buf)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 8004aec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <SystemInit+0x20>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	4a05      	ldr	r2, [pc, #20]	@ (8004b1c <SystemInit+0x20>)
 8004b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004b24:	f7ff ffea 	bl	8004afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b28:	480c      	ldr	r0, [pc, #48]	@ (8004b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b2a:	490d      	ldr	r1, [pc, #52]	@ (8004b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b30:	e002      	b.n	8004b38 <LoopCopyDataInit>

08004b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b36:	3304      	adds	r3, #4

08004b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b3c:	d3f9      	bcc.n	8004b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b40:	4c0a      	ldr	r4, [pc, #40]	@ (8004b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b44:	e001      	b.n	8004b4a <LoopFillZerobss>

08004b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b48:	3204      	adds	r2, #4

08004b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b4c:	d3fb      	bcc.n	8004b46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004b4e:	f005 fd21 	bl	800a594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b52:	f7ff f86b 	bl	8003c2c <main>
  bx  lr    
 8004b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b60:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004b64:	0800c3a0 	.word	0x0800c3a0
  ldr r2, =_sbss
 8004b68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004b6c:	20004ff8 	.word	0x20004ff8

08004b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b70:	e7fe      	b.n	8004b70 <ADC_IRQHandler>
	...

08004b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_Init+0x40>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bb4 <HAL_Init+0x40>)
 8004b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b84:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <HAL_Init+0x40>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb4 <HAL_Init+0x40>)
 8004b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b90:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <HAL_Init+0x40>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a07      	ldr	r2, [pc, #28]	@ (8004bb4 <HAL_Init+0x40>)
 8004b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b9c:	2003      	movs	r0, #3
 8004b9e:	f000 f94f 	bl	8004e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ba2:	200f      	movs	r0, #15
 8004ba4:	f000 f808 	bl	8004bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ba8:	f7ff fd56 	bl	8004658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00

08004bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bc0:	4b12      	ldr	r3, [pc, #72]	@ (8004c0c <HAL_InitTick+0x54>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_InitTick+0x58>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f967 	bl	8004eaa <HAL_SYSTICK_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00e      	b.n	8004c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b0f      	cmp	r3, #15
 8004bea:	d80a      	bhi.n	8004c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bec:	2200      	movs	r2, #0
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	f000 f92f 	bl	8004e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bf8:	4a06      	ldr	r2, [pc, #24]	@ (8004c14 <HAL_InitTick+0x5c>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	20000008 	.word	0x20000008
 8004c14:	20000004 	.word	0x20000004

08004c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_IncTick+0x20>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_IncTick+0x24>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4413      	add	r3, r2
 8004c28:	4a04      	ldr	r2, [pc, #16]	@ (8004c3c <HAL_IncTick+0x24>)
 8004c2a:	6013      	str	r3, [r2, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000008 	.word	0x20000008
 8004c3c:	2000056c 	.word	0x2000056c

08004c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return uwTick;
 8004c44:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <HAL_GetTick+0x14>)
 8004c46:	681b      	ldr	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000056c 	.word	0x2000056c

08004c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c60:	f7ff ffee 	bl	8004c40 <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d005      	beq.n	8004c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c72:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <HAL_Delay+0x44>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c7e:	bf00      	nop
 8004c80:	f7ff ffde 	bl	8004c40 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d8f7      	bhi.n	8004c80 <HAL_Delay+0x28>
  {
  }
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000008 	.word	0x20000008

08004ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cd2:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	60d3      	str	r3, [r2, #12]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cec:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <__NVIC_GetPriorityGrouping+0x18>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	f003 0307 	and.w	r3, r3, #7
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db0b      	blt.n	8004d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	f003 021f 	and.w	r2, r3, #31
 8004d1c:	4907      	ldr	r1, [pc, #28]	@ (8004d3c <__NVIC_EnableIRQ+0x38>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2001      	movs	r0, #1
 8004d26:	fa00 f202 	lsl.w	r2, r0, r2
 8004d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	e000e100 	.word	0xe000e100

08004d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db0a      	blt.n	8004d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	490c      	ldr	r1, [pc, #48]	@ (8004d8c <__NVIC_SetPriority+0x4c>)
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	440b      	add	r3, r1
 8004d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d68:	e00a      	b.n	8004d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4908      	ldr	r1, [pc, #32]	@ (8004d90 <__NVIC_SetPriority+0x50>)
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3b04      	subs	r3, #4
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	761a      	strb	r2, [r3, #24]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000e100 	.word	0xe000e100
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	@ 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f1c3 0307 	rsb	r3, r3, #7
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf28      	it	cs
 8004db2:	2304      	movcs	r3, #4
 8004db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d902      	bls.n	8004dc4 <NVIC_EncodePriority+0x30>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3b03      	subs	r3, #3
 8004dc2:	e000      	b.n	8004dc6 <NVIC_EncodePriority+0x32>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	43d9      	mvns	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dec:	4313      	orrs	r3, r2
         );
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	@ 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e0c:	d301      	bcc.n	8004e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e00f      	b.n	8004e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e12:	4a0a      	ldr	r2, [pc, #40]	@ (8004e3c <SysTick_Config+0x40>)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e1a:	210f      	movs	r1, #15
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	f7ff ff8e 	bl	8004d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <SysTick_Config+0x40>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <SysTick_Config+0x40>)
 8004e2c:	2207      	movs	r2, #7
 8004e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	e000e010 	.word	0xe000e010

08004e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff29 	bl	8004ca0 <__NVIC_SetPriorityGrouping>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b086      	sub	sp, #24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e68:	f7ff ff3e 	bl	8004ce8 <__NVIC_GetPriorityGrouping>
 8004e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7ff ff8e 	bl	8004d94 <NVIC_EncodePriority>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff5d 	bl	8004d40 <__NVIC_SetPriority>
}
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff ff31 	bl	8004d04 <__NVIC_EnableIRQ>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ffa2 	bl	8004dfc <SysTick_Config>
 8004eb8:	4603      	mov	r3, r0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e00e      	b.n	8004ef2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	795b      	ldrb	r3, [r3, #5]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fbe3 	bl	80046b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7ff fe9a 	bl	8004c40 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e099      	b.n	800504c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f38:	e00f      	b.n	8004f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f3a:	f7ff fe81 	bl	8004c40 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d908      	bls.n	8004f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2203      	movs	r2, #3
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e078      	b.n	800504c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e8      	bne.n	8004f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <HAL_DMA_Init+0x158>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d107      	bne.n	8004fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d117      	bne.n	800501e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9e9 	bl	80053d8 <DMA_CheckFifoParam>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2240      	movs	r2, #64	@ 0x40
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800501a:	2301      	movs	r3, #1
 800501c:	e016      	b.n	800504c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9a0 	bl	800536c <DMA_CalcBaseAndBitshift>
 800502c:	4603      	mov	r3, r0
 800502e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005034:	223f      	movs	r2, #63	@ 0x3f
 8005036:	409a      	lsls	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	f010803f 	.word	0xf010803f

08005058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005064:	4b8e      	ldr	r3, [pc, #568]	@ (80052a0 <HAL_DMA_IRQHandler+0x248>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a8e      	ldr	r2, [pc, #568]	@ (80052a4 <HAL_DMA_IRQHandler+0x24c>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0a9b      	lsrs	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005082:	2208      	movs	r2, #8
 8005084:	409a      	lsls	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01a      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b0:	2208      	movs	r2, #8
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050bc:	f043 0201 	orr.w	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c8:	2201      	movs	r2, #1
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d012      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	2201      	movs	r2, #1
 80050e8:	409a      	lsls	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f2:	f043 0202 	orr.w	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fe:	2204      	movs	r2, #4
 8005100:	409a      	lsls	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d012      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511c:	2204      	movs	r2, #4
 800511e:	409a      	lsls	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005134:	2210      	movs	r2, #16
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d043      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d03c      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	2210      	movs	r2, #16
 8005154:	409a      	lsls	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d018      	beq.n	800519a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d024      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
 8005186:	e01f      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
 8005198:	e016      	b.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0208 	bic.w	r2, r2, #8
 80051b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	2220      	movs	r2, #32
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 808f 	beq.w	80052f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8087 	beq.w	80052f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ee:	2220      	movs	r2, #32
 80051f0:	409a      	lsls	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b05      	cmp	r3, #5
 8005200:	d136      	bne.n	8005270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0216 	bic.w	r2, r2, #22
 8005210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695a      	ldr	r2, [r3, #20]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <HAL_DMA_IRQHandler+0x1da>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0208 	bic.w	r2, r2, #8
 8005240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005246:	223f      	movs	r2, #63	@ 0x3f
 8005248:	409a      	lsls	r2, r3
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	2b00      	cmp	r3, #0
 8005264:	d07e      	beq.n	8005364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
        }
        return;
 800526e:	e079      	b.n	8005364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01d      	beq.n	80052ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005290:	2b00      	cmp	r3, #0
 8005292:	d031      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	4798      	blx	r3
 800529c:	e02c      	b.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
 800529e:	bf00      	nop
 80052a0:	20000000 	.word	0x20000000
 80052a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d023      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	4798      	blx	r3
 80052b8:	e01e      	b.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10f      	bne.n	80052e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0210 	bic.w	r2, r2, #16
 80052d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d032      	beq.n	8005366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2205      	movs	r2, #5
 8005310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0201 	bic.w	r2, r2, #1
 8005322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	3301      	adds	r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	429a      	cmp	r2, r3
 800532e:	d307      	bcc.n	8005340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f2      	bne.n	8005324 <HAL_DMA_IRQHandler+0x2cc>
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
 8005362:	e000      	b.n	8005366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005364:	bf00      	nop
    }
  }
}
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	3b10      	subs	r3, #16
 800537c:	4a14      	ldr	r2, [pc, #80]	@ (80053d0 <DMA_CalcBaseAndBitshift+0x64>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005386:	4a13      	ldr	r2, [pc, #76]	@ (80053d4 <DMA_CalcBaseAndBitshift+0x68>)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d909      	bls.n	80053ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	1d1a      	adds	r2, r3, #4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80053ac:	e007      	b.n	80053be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	aaaaaaab 	.word	0xaaaaaaab
 80053d4:	0800bf64 	.word	0x0800bf64

080053d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11f      	bne.n	8005432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d856      	bhi.n	80054a6 <DMA_CheckFifoParam+0xce>
 80053f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <DMA_CheckFifoParam+0x28>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005411 	.word	0x08005411
 8005404:	08005423 	.word	0x08005423
 8005408:	08005411 	.word	0x08005411
 800540c:	080054a7 	.word	0x080054a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d046      	beq.n	80054aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005420:	e043      	b.n	80054aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800542a:	d140      	bne.n	80054ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005430:	e03d      	b.n	80054ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543a:	d121      	bne.n	8005480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d837      	bhi.n	80054b2 <DMA_CheckFifoParam+0xda>
 8005442:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <DMA_CheckFifoParam+0x70>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005459 	.word	0x08005459
 800544c:	0800545f 	.word	0x0800545f
 8005450:	08005459 	.word	0x08005459
 8005454:	08005471 	.word	0x08005471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      break;
 800545c:	e030      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d025      	beq.n	80054b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546e:	e022      	b.n	80054b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005478:	d11f      	bne.n	80054ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800547e:	e01c      	b.n	80054ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d903      	bls.n	800548e <DMA_CheckFifoParam+0xb6>
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d003      	beq.n	8005494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800548c:	e018      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
      break;
 8005492:	e015      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00e      	beq.n	80054be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]
      break;
 80054a4:	e00b      	b.n	80054be <DMA_CheckFifoParam+0xe6>
      break;
 80054a6:	bf00      	nop
 80054a8:	e00a      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;
 80054aa:	bf00      	nop
 80054ac:	e008      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;
 80054ae:	bf00      	nop
 80054b0:	e006      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <DMA_CheckFifoParam+0xe8>
      break;
 80054be:	bf00      	nop
    }
  } 
  
  return status; 
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	@ 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054de:	2300      	movs	r3, #0
 80054e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e16b      	b.n	80057c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054ec:	2201      	movs	r2, #1
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4013      	ands	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	429a      	cmp	r2, r3
 8005506:	f040 815a 	bne.w	80057be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d005      	beq.n	8005522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800551e:	2b02      	cmp	r3, #2
 8005520:	d130      	bne.n	8005584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	2203      	movs	r2, #3
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4013      	ands	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005558:	2201      	movs	r2, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 0201 	and.w	r2, r3, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d017      	beq.n	80055c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	2203      	movs	r2, #3
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	4013      	ands	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d123      	bne.n	8005614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	08da      	lsrs	r2, r3, #3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3208      	adds	r2, #8
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	220f      	movs	r2, #15
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	08da      	lsrs	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3208      	adds	r2, #8
 800560e:	69b9      	ldr	r1, [r7, #24]
 8005610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	2203      	movs	r2, #3
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0203 	and.w	r2, r3, #3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80b4 	beq.w	80057be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]
 800565a:	4b60      	ldr	r3, [pc, #384]	@ (80057dc <HAL_GPIO_Init+0x30c>)
 800565c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565e:	4a5f      	ldr	r2, [pc, #380]	@ (80057dc <HAL_GPIO_Init+0x30c>)
 8005660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005664:	6453      	str	r3, [r2, #68]	@ 0x44
 8005666:	4b5d      	ldr	r3, [pc, #372]	@ (80057dc <HAL_GPIO_Init+0x30c>)
 8005668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005672:	4a5b      	ldr	r2, [pc, #364]	@ (80057e0 <HAL_GPIO_Init+0x310>)
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	3302      	adds	r3, #2
 800567a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	220f      	movs	r2, #15
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a52      	ldr	r2, [pc, #328]	@ (80057e4 <HAL_GPIO_Init+0x314>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <HAL_GPIO_Init+0x226>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a51      	ldr	r2, [pc, #324]	@ (80057e8 <HAL_GPIO_Init+0x318>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d025      	beq.n	80056f2 <HAL_GPIO_Init+0x222>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a50      	ldr	r2, [pc, #320]	@ (80057ec <HAL_GPIO_Init+0x31c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01f      	beq.n	80056ee <HAL_GPIO_Init+0x21e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a4f      	ldr	r2, [pc, #316]	@ (80057f0 <HAL_GPIO_Init+0x320>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d019      	beq.n	80056ea <HAL_GPIO_Init+0x21a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4e      	ldr	r2, [pc, #312]	@ (80057f4 <HAL_GPIO_Init+0x324>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_GPIO_Init+0x216>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a4d      	ldr	r2, [pc, #308]	@ (80057f8 <HAL_GPIO_Init+0x328>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00d      	beq.n	80056e2 <HAL_GPIO_Init+0x212>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a4c      	ldr	r2, [pc, #304]	@ (80057fc <HAL_GPIO_Init+0x32c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <HAL_GPIO_Init+0x20e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005800 <HAL_GPIO_Init+0x330>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_GPIO_Init+0x20a>
 80056d6:	2307      	movs	r3, #7
 80056d8:	e00e      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056da:	2308      	movs	r3, #8
 80056dc:	e00c      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056de:	2306      	movs	r3, #6
 80056e0:	e00a      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056e2:	2305      	movs	r3, #5
 80056e4:	e008      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056e6:	2304      	movs	r3, #4
 80056e8:	e006      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056ea:	2303      	movs	r3, #3
 80056ec:	e004      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e002      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <HAL_GPIO_Init+0x228>
 80056f6:	2300      	movs	r3, #0
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	f002 0203 	and.w	r2, r2, #3
 80056fe:	0092      	lsls	r2, r2, #2
 8005700:	4093      	lsls	r3, r2
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005708:	4935      	ldr	r1, [pc, #212]	@ (80057e0 <HAL_GPIO_Init+0x310>)
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	089b      	lsrs	r3, r3, #2
 800570e:	3302      	adds	r3, #2
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005716:	4b3b      	ldr	r3, [pc, #236]	@ (8005804 <HAL_GPIO_Init+0x334>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800573a:	4a32      	ldr	r2, [pc, #200]	@ (8005804 <HAL_GPIO_Init+0x334>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005740:	4b30      	ldr	r3, [pc, #192]	@ (8005804 <HAL_GPIO_Init+0x334>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005764:	4a27      	ldr	r2, [pc, #156]	@ (8005804 <HAL_GPIO_Init+0x334>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800576a:	4b26      	ldr	r3, [pc, #152]	@ (8005804 <HAL_GPIO_Init+0x334>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	43db      	mvns	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4013      	ands	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800578e:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <HAL_GPIO_Init+0x334>)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005794:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <HAL_GPIO_Init+0x334>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057b8:	4a12      	ldr	r2, [pc, #72]	@ (8005804 <HAL_GPIO_Init+0x334>)
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	f67f ae90 	bls.w	80054ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	3724      	adds	r7, #36	@ 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	40013800 	.word	0x40013800
 80057e4:	40020000 	.word	0x40020000
 80057e8:	40020400 	.word	0x40020400
 80057ec:	40020800 	.word	0x40020800
 80057f0:	40020c00 	.word	0x40020c00
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40021400 	.word	0x40021400
 80057fc:	40021800 	.word	0x40021800
 8005800:	40021c00 	.word	0x40021c00
 8005804:	40013c00 	.word	0x40013c00

08005808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	807b      	strh	r3, [r7, #2]
 8005814:	4613      	mov	r3, r2
 8005816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005818:	787b      	ldrb	r3, [r7, #1]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005824:	e003      	b.n	800582e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005826:	887b      	ldrh	r3, [r7, #2]
 8005828:	041a      	lsls	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	619a      	str	r2, [r3, #24]
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800584c:	887a      	ldrh	r2, [r7, #2]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4013      	ands	r3, r2
 8005852:	041a      	lsls	r2, r3, #16
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43d9      	mvns	r1, r3
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	400b      	ands	r3, r1
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	619a      	str	r2, [r3, #24]
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800587a:	4b08      	ldr	r3, [pc, #32]	@ (800589c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005886:	4a05      	ldr	r2, [pc, #20]	@ (800589c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005888:	88fb      	ldrh	r3, [r7, #6]
 800588a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 f806 	bl	80058a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40013c00 	.word	0x40013c00

080058a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e267      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d075      	beq.n	80059c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058d6:	4b88      	ldr	r3, [pc, #544]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d00c      	beq.n	80058fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e2:	4b85      	ldr	r3, [pc, #532]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d112      	bne.n	8005914 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ee:	4b82      	ldr	r3, [pc, #520]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fa:	d10b      	bne.n	8005914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	4b7e      	ldr	r3, [pc, #504]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05b      	beq.n	80059c0 <HAL_RCC_OscConfig+0x108>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d157      	bne.n	80059c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e242      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800591c:	d106      	bne.n	800592c <HAL_RCC_OscConfig+0x74>
 800591e:	4b76      	ldr	r3, [pc, #472]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a75      	ldr	r2, [pc, #468]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e01d      	b.n	8005968 <HAL_RCC_OscConfig+0xb0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x98>
 8005936:	4b70      	ldr	r3, [pc, #448]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6f      	ldr	r2, [pc, #444]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 800593c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b6d      	ldr	r3, [pc, #436]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a6c      	ldr	r2, [pc, #432]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0xb0>
 8005950:	4b69      	ldr	r3, [pc, #420]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a68      	ldr	r2, [pc, #416]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	4b66      	ldr	r3, [pc, #408]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a65      	ldr	r2, [pc, #404]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7ff f966 	bl	8004c40 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005978:	f7ff f962 	bl	8004c40 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b64      	cmp	r3, #100	@ 0x64
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e207      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598a:	4b5b      	ldr	r3, [pc, #364]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0xc0>
 8005996:	e014      	b.n	80059c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005998:	f7ff f952 	bl	8004c40 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a0:	f7ff f94e 	bl	8004c40 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	@ 0x64
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e1f3      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b2:	4b51      	ldr	r3, [pc, #324]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f0      	bne.n	80059a0 <HAL_RCC_OscConfig+0xe8>
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d063      	beq.n	8005a96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059ce:	4b4a      	ldr	r3, [pc, #296]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059da:	4b47      	ldr	r3, [pc, #284]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d11c      	bne.n	8005a20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e6:	4b44      	ldr	r3, [pc, #272]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d116      	bne.n	8005a20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f2:	4b41      	ldr	r3, [pc, #260]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_RCC_OscConfig+0x152>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e1c7      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0a:	4b3b      	ldr	r3, [pc, #236]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4937      	ldr	r1, [pc, #220]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1e:	e03a      	b.n	8005a96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d020      	beq.n	8005a6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a28:	4b34      	ldr	r3, [pc, #208]	@ (8005afc <HAL_RCC_OscConfig+0x244>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7ff f907 	bl	8004c40 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a36:	f7ff f903 	bl	8004c40 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e1a8      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a48:	4b2b      	ldr	r3, [pc, #172]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a54:	4b28      	ldr	r3, [pc, #160]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4925      	ldr	r1, [pc, #148]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	600b      	str	r3, [r1, #0]
 8005a68:	e015      	b.n	8005a96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a6a:	4b24      	ldr	r3, [pc, #144]	@ (8005afc <HAL_RCC_OscConfig+0x244>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7ff f8e6 	bl	8004c40 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a78:	f7ff f8e2 	bl	8004c40 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e187      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d036      	beq.n	8005b10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aaa:	4b15      	ldr	r3, [pc, #84]	@ (8005b00 <HAL_RCC_OscConfig+0x248>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7ff f8c6 	bl	8004c40 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ab8:	f7ff f8c2 	bl	8004c40 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e167      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aca:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <HAL_RCC_OscConfig+0x240>)
 8005acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x200>
 8005ad6:	e01b      	b.n	8005b10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <HAL_RCC_OscConfig+0x248>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ade:	f7ff f8af 	bl	8004c40 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae4:	e00e      	b.n	8005b04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae6:	f7ff f8ab 	bl	8004c40 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d907      	bls.n	8005b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e150      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
 8005af8:	40023800 	.word	0x40023800
 8005afc:	42470000 	.word	0x42470000
 8005b00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b04:	4b88      	ldr	r3, [pc, #544]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ea      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8097 	beq.w	8005c4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b22:	4b81      	ldr	r3, [pc, #516]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10f      	bne.n	8005b4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2e:	2300      	movs	r3, #0
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	4b7d      	ldr	r3, [pc, #500]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	4a7c      	ldr	r2, [pc, #496]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b4e:	4b77      	ldr	r3, [pc, #476]	@ (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d118      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b5a:	4b74      	ldr	r3, [pc, #464]	@ (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a73      	ldr	r2, [pc, #460]	@ (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b66:	f7ff f86b 	bl	8004c40 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b6e:	f7ff f867 	bl	8004c40 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e10c      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b80:	4b6a      	ldr	r3, [pc, #424]	@ (8005d2c <HAL_RCC_OscConfig+0x474>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d106      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x2ea>
 8005b94:	4b64      	ldr	r3, [pc, #400]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b98:	4a63      	ldr	r2, [pc, #396]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba0:	e01c      	b.n	8005bdc <HAL_RCC_OscConfig+0x324>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x30c>
 8005baa:	4b5f      	ldr	r3, [pc, #380]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	4a5e      	ldr	r2, [pc, #376]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 0304 	orr.w	r3, r3, #4
 8005bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bba:	4a5b      	ldr	r2, [pc, #364]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0x324>
 8005bc4:	4b58      	ldr	r3, [pc, #352]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bc8:	4a57      	ldr	r2, [pc, #348]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd0:	4b55      	ldr	r3, [pc, #340]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd4:	4a54      	ldr	r2, [pc, #336]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005bd6:	f023 0304 	bic.w	r3, r3, #4
 8005bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d015      	beq.n	8005c10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7ff f82c 	bl	8004c40 <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bea:	e00a      	b.n	8005c02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bec:	f7ff f828 	bl	8004c40 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e0cb      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c02:	4b49      	ldr	r3, [pc, #292]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ee      	beq.n	8005bec <HAL_RCC_OscConfig+0x334>
 8005c0e:	e014      	b.n	8005c3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c10:	f7ff f816 	bl	8004c40 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c16:	e00a      	b.n	8005c2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c18:	f7ff f812 	bl	8004c40 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e0b5      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1ee      	bne.n	8005c18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d105      	bne.n	8005c4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c40:	4b39      	ldr	r3, [pc, #228]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	4a38      	ldr	r2, [pc, #224]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a1 	beq.w	8005d98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c56:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d05c      	beq.n	8005d1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d141      	bne.n	8005cee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6a:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c70:	f7fe ffe6 	bl	8004c40 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c78:	f7fe ffe2 	bl	8004c40 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e087      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8a:	4b27      	ldr	r3, [pc, #156]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f0      	bne.n	8005c78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69da      	ldr	r2, [r3, #28]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	041b      	lsls	r3, r3, #16
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	491b      	ldr	r1, [pc, #108]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fe ffbb 	bl	8004c40 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fe ffb7 	bl	8004c40 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e05c      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce0:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x416>
 8005cec:	e054      	b.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cee:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <HAL_RCC_OscConfig+0x478>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf4:	f7fe ffa4 	bl	8004c40 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cfc:	f7fe ffa0 	bl	8004c40 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e045      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <HAL_RCC_OscConfig+0x470>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x444>
 8005d1a:	e03d      	b.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e038      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40007000 	.word	0x40007000
 8005d30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d34:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <HAL_RCC_OscConfig+0x4ec>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d028      	beq.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d121      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d11a      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d111      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40023800 	.word	0x40023800

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0cc      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b68      	ldr	r3, [pc, #416]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d90c      	bls.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b65      	ldr	r3, [pc, #404]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b63      	ldr	r3, [pc, #396]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d001      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0b8      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d020      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dfc:	4b59      	ldr	r3, [pc, #356]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4a58      	ldr	r2, [pc, #352]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e14:	4b53      	ldr	r3, [pc, #332]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	4a52      	ldr	r2, [pc, #328]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e20:	4b50      	ldr	r3, [pc, #320]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	494d      	ldr	r1, [pc, #308]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d044      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e46:	4b47      	ldr	r3, [pc, #284]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d119      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e07f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d107      	bne.n	8005e76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e66:	4b3f      	ldr	r3, [pc, #252]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d109      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e06f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e76:	4b3b      	ldr	r3, [pc, #236]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e067      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e86:	4b37      	ldr	r3, [pc, #220]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f023 0203 	bic.w	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4934      	ldr	r1, [pc, #208]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e98:	f7fe fed2 	bl	8004c40 <HAL_GetTick>
 8005e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea0:	f7fe fece 	bl	8004c40 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e04f      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 020c 	and.w	r2, r3, #12
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d1eb      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d20c      	bcs.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b22      	ldr	r3, [pc, #136]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b20      	ldr	r3, [pc, #128]	@ (8005f60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e032      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efc:	4b19      	ldr	r3, [pc, #100]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4916      	ldr	r1, [pc, #88]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	490e      	ldr	r1, [pc, #56]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f2e:	f000 f821 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b0b      	ldr	r3, [pc, #44]	@ (8005f64 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	490a      	ldr	r1, [pc, #40]	@ (8005f68 <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	5ccb      	ldrb	r3, [r1, r3]
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <HAL_RCC_ClockConfig+0x1c4>)
 8005f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_RCC_ClockConfig+0x1c8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe fe32 	bl	8004bb8 <HAL_InitTick>

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023c00 	.word	0x40023c00
 8005f64:	40023800 	.word	0x40023800
 8005f68:	0800bf4c 	.word	0x0800bf4c
 8005f6c:	20000000 	.word	0x20000000
 8005f70:	20000004 	.word	0x20000004

08005f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b094      	sub	sp, #80	@ 0x50
 8005f7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f8c:	4b79      	ldr	r3, [pc, #484]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 030c 	and.w	r3, r3, #12
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d00d      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	f200 80e1 	bhi.w	8006160 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d003      	beq.n	8005fae <HAL_RCC_GetSysClockFreq+0x3a>
 8005fa6:	e0db      	b.n	8006160 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa8:	4b73      	ldr	r3, [pc, #460]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x204>)
 8005faa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fac:	e0db      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fae:	4b72      	ldr	r3, [pc, #456]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fb2:	e0d8      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d063      	beq.n	8006092 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fca:	4b6a      	ldr	r3, [pc, #424]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	099b      	lsrs	r3, r3, #6
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fde:	2300      	movs	r3, #0
 8005fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f04f 0000 	mov.w	r0, #0
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	0159      	lsls	r1, r3, #5
 8005ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff8:	0150      	lsls	r0, r2, #5
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4621      	mov	r1, r4
 8006000:	1a51      	subs	r1, r2, r1
 8006002:	6139      	str	r1, [r7, #16]
 8006004:	4629      	mov	r1, r5
 8006006:	eb63 0301 	sbc.w	r3, r3, r1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	f04f 0200 	mov.w	r2, #0
 8006010:	f04f 0300 	mov.w	r3, #0
 8006014:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006018:	4659      	mov	r1, fp
 800601a:	018b      	lsls	r3, r1, #6
 800601c:	4651      	mov	r1, sl
 800601e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006022:	4651      	mov	r1, sl
 8006024:	018a      	lsls	r2, r1, #6
 8006026:	4651      	mov	r1, sl
 8006028:	ebb2 0801 	subs.w	r8, r2, r1
 800602c:	4659      	mov	r1, fp
 800602e:	eb63 0901 	sbc.w	r9, r3, r1
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800603e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006046:	4690      	mov	r8, r2
 8006048:	4699      	mov	r9, r3
 800604a:	4623      	mov	r3, r4
 800604c:	eb18 0303 	adds.w	r3, r8, r3
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	462b      	mov	r3, r5
 8006054:	eb49 0303 	adc.w	r3, r9, r3
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006066:	4629      	mov	r1, r5
 8006068:	028b      	lsls	r3, r1, #10
 800606a:	4621      	mov	r1, r4
 800606c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006070:	4621      	mov	r1, r4
 8006072:	028a      	lsls	r2, r1, #10
 8006074:	4610      	mov	r0, r2
 8006076:	4619      	mov	r1, r3
 8006078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607a:	2200      	movs	r2, #0
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800607e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006080:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006084:	f7fa f8a4 	bl	80001d0 <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006090:	e058      	b.n	8006144 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006092:	4b38      	ldr	r3, [pc, #224]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	2200      	movs	r2, #0
 800609a:	4618      	mov	r0, r3
 800609c:	4611      	mov	r1, r2
 800609e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	2300      	movs	r3, #0
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060ac:	4642      	mov	r2, r8
 80060ae:	464b      	mov	r3, r9
 80060b0:	f04f 0000 	mov.w	r0, #0
 80060b4:	f04f 0100 	mov.w	r1, #0
 80060b8:	0159      	lsls	r1, r3, #5
 80060ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060be:	0150      	lsls	r0, r2, #5
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4641      	mov	r1, r8
 80060c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060ca:	4649      	mov	r1, r9
 80060cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060e4:	ebb2 040a 	subs.w	r4, r2, sl
 80060e8:	eb63 050b 	sbc.w	r5, r3, fp
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	00eb      	lsls	r3, r5, #3
 80060f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fa:	00e2      	lsls	r2, r4, #3
 80060fc:	4614      	mov	r4, r2
 80060fe:	461d      	mov	r5, r3
 8006100:	4643      	mov	r3, r8
 8006102:	18e3      	adds	r3, r4, r3
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	464b      	mov	r3, r9
 8006108:	eb45 0303 	adc.w	r3, r5, r3
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	e9d7 4500 	ldrd	r4, r5, [r7]
 800611a:	4629      	mov	r1, r5
 800611c:	028b      	lsls	r3, r1, #10
 800611e:	4621      	mov	r1, r4
 8006120:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006124:	4621      	mov	r1, r4
 8006126:	028a      	lsls	r2, r1, #10
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612e:	2200      	movs	r2, #0
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006138:	f7fa f84a 	bl	80001d0 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006144:	4b0b      	ldr	r3, [pc, #44]	@ (8006174 <HAL_RCC_GetSysClockFreq+0x200>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	3301      	adds	r3, #1
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800615e:	e002      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006160:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x204>)
 8006162:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006168:	4618      	mov	r0, r3
 800616a:	3750      	adds	r7, #80	@ 0x50
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800
 8006178:	00f42400 	.word	0x00f42400

0800617c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000000 	.word	0x20000000

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006198:	f7ff fff0 	bl	800617c <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	0a9b      	lsrs	r3, r3, #10
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4903      	ldr	r1, [pc, #12]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40023800 	.word	0x40023800
 80061b8:	0800bf5c 	.word	0x0800bf5c

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c0:	f7ff ffdc 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0b5b      	lsrs	r3, r3, #13
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	@ (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	0800bf5c 	.word	0x0800bf5c

080061e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e07b      	b.n	80062ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d108      	bne.n	8006210 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006206:	d009      	beq.n	800621c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	61da      	str	r2, [r3, #28]
 800620e:	e005      	b.n	800621c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fe fa5c 	bl	80046f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006252:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	ea42 0103 	orr.w	r1, r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	0c1b      	lsrs	r3, r3, #16
 80062ba:	f003 0104 	and.w	r1, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	f003 0210 	and.w	r2, r3, #16
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b08a      	sub	sp, #40	@ 0x28
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006304:	2301      	movs	r3, #1
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006308:	f7fe fc9a 	bl	8004c40 <HAL_GetTick>
 800630c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006314:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006320:	7ffb      	ldrb	r3, [r7, #31]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d00c      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x4a>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800632c:	d106      	bne.n	800633c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <HAL_SPI_TransmitReceive+0x46>
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d001      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800633c:	2302      	movs	r3, #2
 800633e:	e17f      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x5c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x5c>
 800634c:	887b      	ldrh	r3, [r7, #2]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e174      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_SPI_TransmitReceive+0x6e>
 8006360:	2302      	movs	r3, #2
 8006362:	e16d      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b04      	cmp	r3, #4
 8006376:	d003      	beq.n	8006380 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2205      	movs	r2, #5
 800637c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	887a      	ldrh	r2, [r7, #2]
 8006396:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	887a      	ldrh	r2, [r7, #2]
 80063a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	d007      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063dc:	d17e      	bne.n	80064dc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_TransmitReceive+0xf6>
 80063e6:	8afb      	ldrh	r3, [r7, #22]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d16c      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	e059      	b.n	80064c6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b02      	cmp	r3, #2
 800641e:	d11b      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x162>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x162>
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	2b01      	cmp	r3, #1
 800642e:	d113      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b01      	cmp	r3, #1
 8006464:	d119      	bne.n	800649a <HAL_SPI_TransmitReceive+0x1a4>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d014      	beq.n	800649a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	b292      	uxth	r2, r2
 800647c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	1c9a      	adds	r2, r3, #2
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006496:	2301      	movs	r3, #1
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800649a:	f7fe fbd1 	bl	8004c40 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d80d      	bhi.n	80064c6 <HAL_SPI_TransmitReceive+0x1d0>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d009      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0bc      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1a0      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x11c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d19b      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x11c>
 80064da:	e082      	b.n	80065e2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x1f4>
 80064e4:	8afb      	ldrh	r3, [r7, #22]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d171      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006510:	e05d      	b.n	80065ce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b02      	cmp	r3, #2
 800651e:	d11c      	bne.n	800655a <HAL_SPI_TransmitReceive+0x264>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d017      	beq.n	800655a <HAL_SPI_TransmitReceive+0x264>
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	2b01      	cmp	r3, #1
 800652e:	d114      	bne.n	800655a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	330c      	adds	r3, #12
 800653a:	7812      	ldrb	r2, [r2, #0]
 800653c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d119      	bne.n	800659c <HAL_SPI_TransmitReceive+0x2a6>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d014      	beq.n	800659c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006598:	2301      	movs	r3, #1
 800659a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800659c:	f7fe fb50 	bl	8004c40 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d803      	bhi.n	80065b4 <HAL_SPI_TransmitReceive+0x2be>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b2:	d102      	bne.n	80065ba <HAL_SPI_TransmitReceive+0x2c4>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e038      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d19c      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x21c>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d197      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065e2:	6a3a      	ldr	r2, [r7, #32]
 80065e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8b6 	bl	8006758 <SPI_EndRxTxTransaction>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2220      	movs	r2, #32
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e01d      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800663e:	2300      	movs	r3, #0
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	@ 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	603b      	str	r3, [r7, #0]
 8006654:	4613      	mov	r3, r2
 8006656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006658:	f7fe faf2 	bl	8004c40 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	1a9b      	subs	r3, r3, r2
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4413      	add	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006668:	f7fe faea 	bl	8004c40 <HAL_GetTick>
 800666c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800666e:	4b39      	ldr	r3, [pc, #228]	@ (8006754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	015b      	lsls	r3, r3, #5
 8006674:	0d1b      	lsrs	r3, r3, #20
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	fb02 f303 	mul.w	r3, r2, r3
 800667c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	e055      	b.n	800672c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d051      	beq.n	800672c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006688:	f7fe fada 	bl	8004c40 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d13d      	bne.n	800671a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066b6:	d111      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c0:	d004      	beq.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ca:	d107      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e4:	d10f      	bne.n	8006706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e018      	b.n	800674c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e002      	b.n	800672c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	3b01      	subs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4013      	ands	r3, r2
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	bf0c      	ite	eq
 800673c:	2301      	moveq	r3, #1
 800673e:	2300      	movne	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	429a      	cmp	r2, r3
 8006748:	d19a      	bne.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	20000000 	.word	0x20000000

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2201      	movs	r2, #1
 800676c:	2102      	movs	r1, #2
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff ff6a 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d007      	beq.n	800678a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e032      	b.n	80067f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800678a:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <SPI_EndRxTxTransaction+0xa0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <SPI_EndRxTxTransaction+0xa4>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	0d5b      	lsrs	r3, r3, #21
 8006796:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067a8:	d112      	bne.n	80067d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2200      	movs	r2, #0
 80067b2:	2180      	movs	r1, #128	@ 0x80
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ff47 	bl	8006648 <SPI_WaitFlagStateUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d016      	beq.n	80067ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	f043 0220 	orr.w	r2, r3, #32
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e00f      	b.n	80067f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	3b01      	subs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e6:	2b80      	cmp	r3, #128	@ 0x80
 80067e8:	d0f2      	beq.n	80067d0 <SPI_EndRxTxTransaction+0x78>
 80067ea:	e000      	b.n	80067ee <SPI_EndRxTxTransaction+0x96>
        break;
 80067ec:	bf00      	nop
  }

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000000 	.word	0x20000000
 80067fc:	165e9f81 	.word	0x165e9f81

08006800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e041      	b.n	8006896 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fd ffe6 	bl	80047f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	4619      	mov	r1, r3
 800683e:	4610      	mov	r0, r2
 8006840:	f000 fae6 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d001      	beq.n	80068b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e046      	b.n	8006946 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a23      	ldr	r2, [pc, #140]	@ (8006954 <HAL_TIM_Base_Start+0xb4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d022      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d2:	d01d      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006958 <HAL_TIM_Base_Start+0xb8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d018      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1e      	ldr	r2, [pc, #120]	@ (800695c <HAL_TIM_Base_Start+0xbc>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006960 <HAL_TIM_Base_Start+0xc0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00e      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006964 <HAL_TIM_Base_Start+0xc4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a19      	ldr	r2, [pc, #100]	@ (8006968 <HAL_TIM_Base_Start+0xc8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <HAL_TIM_Base_Start+0x70>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a18      	ldr	r2, [pc, #96]	@ (800696c <HAL_TIM_Base_Start+0xcc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d111      	bne.n	8006934 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b06      	cmp	r3, #6
 8006920:	d010      	beq.n	8006944 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006932:	e007      	b.n	8006944 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40010400 	.word	0x40010400
 8006968:	40014000 	.word	0x40014000
 800696c:	40001800 	.word	0x40001800

08006970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d001      	beq.n	8006988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e04e      	b.n	8006a26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a23      	ldr	r2, [pc, #140]	@ (8006a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d022      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069b2:	d01d      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d018      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a19      	ldr	r2, [pc, #100]	@ (8006a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <HAL_TIM_Base_Start_IT+0x80>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d111      	bne.n	8006a14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d010      	beq.n	8006a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a12:	e007      	b.n	8006a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000
 8006a38:	40000400 	.word	0x40000400
 8006a3c:	40000800 	.word	0x40000800
 8006a40:	40000c00 	.word	0x40000c00
 8006a44:	40010400 	.word	0x40010400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40001800 	.word	0x40001800

08006a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d020      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01b      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0202 	mvn.w	r2, #2
 8006a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f999 	bl	8006dd2 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f98b 	bl	8006dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f99c 	bl	8006de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d020      	beq.n	8006b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0204 	mvn.w	r2, #4
 8006ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f973 	bl	8006dd2 <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f965 	bl	8006dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f976 	bl	8006de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d020      	beq.n	8006b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01b      	beq.n	8006b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0208 	mvn.w	r2, #8
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2204      	movs	r2, #4
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f94d 	bl	8006dd2 <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f93f 	bl	8006dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f950 	bl	8006de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d020      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01b      	beq.n	8006b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f927 	bl	8006dd2 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f919 	bl	8006dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f92a 	bl	8006de6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00c      	beq.n	8006bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0201 	mvn.w	r2, #1
 8006bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fd fb40 	bl	800423c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00c      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fade 	bl	800719c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8fb 	bl	8006dfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0220 	mvn.w	r2, #32
 8006c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fab0 	bl	8007188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_TIM_ConfigClockSource+0x1c>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e0b4      	b.n	8006db6 <HAL_TIM_ConfigClockSource+0x186>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c84:	d03e      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0xd4>
 8006c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8a:	f200 8087 	bhi.w	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c92:	f000 8086 	beq.w	8006da2 <HAL_TIM_ConfigClockSource+0x172>
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c9a:	d87f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b70      	cmp	r3, #112	@ 0x70
 8006c9e:	d01a      	beq.n	8006cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8006ca0:	2b70      	cmp	r3, #112	@ 0x70
 8006ca2:	d87b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b60      	cmp	r3, #96	@ 0x60
 8006ca6:	d050      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x11a>
 8006ca8:	2b60      	cmp	r3, #96	@ 0x60
 8006caa:	d877      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cac:	2b50      	cmp	r3, #80	@ 0x50
 8006cae:	d03c      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0xfa>
 8006cb0:	2b50      	cmp	r3, #80	@ 0x50
 8006cb2:	d873      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	d058      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x13a>
 8006cb8:	2b40      	cmp	r3, #64	@ 0x40
 8006cba:	d86f      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cbc:	2b30      	cmp	r3, #48	@ 0x30
 8006cbe:	d064      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc0:	2b30      	cmp	r3, #48	@ 0x30
 8006cc2:	d86b      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d060      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d867      	bhi.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d05c      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	d05a      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x15a>
 8006cd4:	e062      	b.n	8006d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ce6:	f000 f9b3 	bl	8007050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
      break;
 8006d02:	e04f      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d14:	f000 f99c 	bl	8007050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d26:	609a      	str	r2, [r3, #8]
      break;
 8006d28:	e03c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d36:	461a      	mov	r2, r3
 8006d38:	f000 f910 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2150      	movs	r1, #80	@ 0x50
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f969 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006d48:	e02c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d56:	461a      	mov	r2, r3
 8006d58:	f000 f92f 	bl	8006fba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2160      	movs	r1, #96	@ 0x60
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f959 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006d68:	e01c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 f8f0 	bl	8006f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2140      	movs	r1, #64	@ 0x40
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f949 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006d88:	e00c      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f000 f940 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006d9a:	e003      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e000      	b.n	8006da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a43      	ldr	r2, [pc, #268]	@ (8006f30 <TIM_Base_SetConfig+0x120>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e2e:	d00f      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a40      	ldr	r2, [pc, #256]	@ (8006f34 <TIM_Base_SetConfig+0x124>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8006f38 <TIM_Base_SetConfig+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a3e      	ldr	r2, [pc, #248]	@ (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f40 <TIM_Base_SetConfig+0x130>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d108      	bne.n	8006e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a32      	ldr	r2, [pc, #200]	@ (8006f30 <TIM_Base_SetConfig+0x120>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d02b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e70:	d027      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a2f      	ldr	r2, [pc, #188]	@ (8006f34 <TIM_Base_SetConfig+0x124>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d023      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f38 <TIM_Base_SetConfig+0x128>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01f      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2d      	ldr	r2, [pc, #180]	@ (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f40 <TIM_Base_SetConfig+0x130>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d017      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2b      	ldr	r2, [pc, #172]	@ (8006f44 <TIM_Base_SetConfig+0x134>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8006f48 <TIM_Base_SetConfig+0x138>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a29      	ldr	r2, [pc, #164]	@ (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a28      	ldr	r2, [pc, #160]	@ (8006f50 <TIM_Base_SetConfig+0x140>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a27      	ldr	r2, [pc, #156]	@ (8006f54 <TIM_Base_SetConfig+0x144>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a26      	ldr	r2, [pc, #152]	@ (8006f58 <TIM_Base_SetConfig+0x148>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <TIM_Base_SetConfig+0x120>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d003      	beq.n	8006f02 <TIM_Base_SetConfig+0xf2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a10      	ldr	r2, [pc, #64]	@ (8006f40 <TIM_Base_SetConfig+0x130>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d103      	bne.n	8006f0a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f043 0204 	orr.w	r2, r3, #4
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	601a      	str	r2, [r3, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40010000 	.word	0x40010000
 8006f34:	40000400 	.word	0x40000400
 8006f38:	40000800 	.word	0x40000800
 8006f3c:	40000c00 	.word	0x40000c00
 8006f40:	40010400 	.word	0x40010400
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800
 8006f50:	40001800 	.word	0x40001800
 8006f54:	40001c00 	.word	0x40001c00
 8006f58:	40002000 	.word	0x40002000

08006f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 030a 	bic.w	r3, r3, #10
 8006f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b087      	sub	sp, #28
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f023 0210 	bic.w	r2, r3, #16
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	f043 0307 	orr.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800706a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	021a      	lsls	r2, r3, #8
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	431a      	orrs	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	609a      	str	r2, [r3, #8]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e05a      	b.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a21      	ldr	r2, [pc, #132]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d022      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f4:	d01d      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d018      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1b      	ldr	r2, [pc, #108]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1a      	ldr	r2, [pc, #104]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a18      	ldr	r2, [pc, #96]	@ (800717c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a17      	ldr	r2, [pc, #92]	@ (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a15      	ldr	r2, [pc, #84]	@ (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10c      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40010400 	.word	0x40010400
 8007180:	40014000 	.word	0x40014000
 8007184:	40001800 	.word	0x40001800

08007188 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e042      	b.n	8007248 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d106      	bne.n	80071dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fd fb4a 	bl	8004870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2224      	movs	r2, #36	@ 0x24
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f973 	bl	80074e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	695a      	ldr	r2, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	@ 0x28
 8007254:	af02      	add	r7, sp, #8
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b20      	cmp	r3, #32
 800726e:	d175      	bne.n	800735c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_UART_Transmit+0x2c>
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e06e      	b.n	800735e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2221      	movs	r2, #33	@ 0x21
 800728a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800728e:	f7fd fcd7 	bl	8004c40 <HAL_GetTick>
 8007292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	88fa      	ldrh	r2, [r7, #6]
 8007298:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	88fa      	ldrh	r2, [r7, #6]
 800729e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a8:	d108      	bne.n	80072bc <HAL_UART_Transmit+0x6c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	61bb      	str	r3, [r7, #24]
 80072ba:	e003      	b.n	80072c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072c4:	e02e      	b.n	8007324 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2200      	movs	r2, #0
 80072ce:	2180      	movs	r1, #128	@ 0x80
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f848 	bl	8007366 <UART_WaitOnFlagUntilTimeout>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2220      	movs	r2, #32
 80072e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e03a      	b.n	800735e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	3302      	adds	r3, #2
 8007302:	61bb      	str	r3, [r7, #24]
 8007304:	e007      	b.n	8007316 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	3301      	adds	r3, #1
 8007314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1cb      	bne.n	80072c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	2140      	movs	r1, #64	@ 0x40
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f814 	bl	8007366 <UART_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e006      	b.n	800735e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2220      	movs	r2, #32
 8007354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	e000      	b.n	800735e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800735c:	2302      	movs	r3, #2
  }
}
 800735e:	4618      	mov	r0, r3
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	4613      	mov	r3, r2
 8007374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007376:	e03b      	b.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d037      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007380:	f7fd fc5e 	bl	8004c40 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	6a3a      	ldr	r2, [r7, #32]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <UART_WaitOnFlagUntilTimeout+0x30>
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e03a      	b.n	8007410 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d023      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b80      	cmp	r3, #128	@ 0x80
 80073ac:	d020      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b40      	cmp	r3, #64	@ 0x40
 80073b2:	d01d      	beq.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b08      	cmp	r3, #8
 80073c0:	d116      	bne.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f81d 	bl	8007418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2208      	movs	r2, #8
 80073e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e00f      	b.n	8007410 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4013      	ands	r3, r2
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	bf0c      	ite	eq
 8007400:	2301      	moveq	r3, #1
 8007402:	2300      	movne	r3, #0
 8007404:	b2db      	uxtb	r3, r3
 8007406:	461a      	mov	r2, r3
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	429a      	cmp	r2, r3
 800740c:	d0b4      	beq.n	8007378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007418:	b480      	push	{r7}
 800741a:	b095      	sub	sp, #84	@ 0x54
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	330c      	adds	r3, #12
 800743e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007440:	643a      	str	r2, [r7, #64]	@ 0x40
 8007442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007446:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e5      	bne.n	8007420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	61fb      	str	r3, [r7, #28]
   return(result);
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	f023 0301 	bic.w	r3, r3, #1
 800746a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3314      	adds	r3, #20
 8007472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007474:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007476:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800747a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e5      	bne.n	8007454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748c:	2b01      	cmp	r3, #1
 800748e:	d119      	bne.n	80074c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b0:	61ba      	str	r2, [r7, #24]
 80074b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6979      	ldr	r1, [r7, #20]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	613b      	str	r3, [r7, #16]
   return(result);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074d2:	bf00      	nop
 80074d4:	3754      	adds	r7, #84	@ 0x54
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e4:	b0c0      	sub	sp, #256	@ 0x100
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fc:	68d9      	ldr	r1, [r3, #12]
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	ea40 0301 	orr.w	r3, r0, r1
 8007508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	431a      	orrs	r2, r3
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	431a      	orrs	r2, r3
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007538:	f021 010c 	bic.w	r1, r1, #12
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007546:	430b      	orrs	r3, r1
 8007548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755a:	6999      	ldr	r1, [r3, #24]
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	ea40 0301 	orr.w	r3, r0, r1
 8007566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b8f      	ldr	r3, [pc, #572]	@ (80077ac <UART_SetConfig+0x2cc>)
 8007570:	429a      	cmp	r2, r3
 8007572:	d005      	beq.n	8007580 <UART_SetConfig+0xa0>
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b8d      	ldr	r3, [pc, #564]	@ (80077b0 <UART_SetConfig+0x2d0>)
 800757c:	429a      	cmp	r2, r3
 800757e:	d104      	bne.n	800758a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fe fe1c 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8007584:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007588:	e003      	b.n	8007592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800758a:	f7fe fe03 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 800758e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759c:	f040 810c 	bne.w	80077b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80075ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80075b2:	4622      	mov	r2, r4
 80075b4:	462b      	mov	r3, r5
 80075b6:	1891      	adds	r1, r2, r2
 80075b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80075ba:	415b      	adcs	r3, r3
 80075bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80075c2:	4621      	mov	r1, r4
 80075c4:	eb12 0801 	adds.w	r8, r2, r1
 80075c8:	4629      	mov	r1, r5
 80075ca:	eb43 0901 	adc.w	r9, r3, r1
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075e2:	4690      	mov	r8, r2
 80075e4:	4699      	mov	r9, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	eb18 0303 	adds.w	r3, r8, r3
 80075ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075f0:	462b      	mov	r3, r5
 80075f2:	eb49 0303 	adc.w	r3, r9, r3
 80075f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007606:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800760a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800760e:	460b      	mov	r3, r1
 8007610:	18db      	adds	r3, r3, r3
 8007612:	653b      	str	r3, [r7, #80]	@ 0x50
 8007614:	4613      	mov	r3, r2
 8007616:	eb42 0303 	adc.w	r3, r2, r3
 800761a:	657b      	str	r3, [r7, #84]	@ 0x54
 800761c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007624:	f7f8 fdd4 	bl	80001d0 <__aeabi_uldivmod>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4b61      	ldr	r3, [pc, #388]	@ (80077b4 <UART_SetConfig+0x2d4>)
 800762e:	fba3 2302 	umull	r2, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	011c      	lsls	r4, r3, #4
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800763a:	2200      	movs	r2, #0
 800763c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007640:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007650:	415b      	adcs	r3, r3
 8007652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007658:	4641      	mov	r1, r8
 800765a:	eb12 0a01 	adds.w	sl, r2, r1
 800765e:	4649      	mov	r1, r9
 8007660:	eb43 0b01 	adc.w	fp, r3, r1
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007678:	4692      	mov	sl, r2
 800767a:	469b      	mov	fp, r3
 800767c:	4643      	mov	r3, r8
 800767e:	eb1a 0303 	adds.w	r3, sl, r3
 8007682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007686:	464b      	mov	r3, r9
 8007688:	eb4b 0303 	adc.w	r3, fp, r3
 800768c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800769c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076a4:	460b      	mov	r3, r1
 80076a6:	18db      	adds	r3, r3, r3
 80076a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076aa:	4613      	mov	r3, r2
 80076ac:	eb42 0303 	adc.w	r3, r2, r3
 80076b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80076ba:	f7f8 fd89 	bl	80001d0 <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	4b3b      	ldr	r3, [pc, #236]	@ (80077b4 <UART_SetConfig+0x2d4>)
 80076c6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	2264      	movs	r2, #100	@ 0x64
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	1acb      	subs	r3, r1, r3
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076da:	4b36      	ldr	r3, [pc, #216]	@ (80077b4 <UART_SetConfig+0x2d4>)
 80076dc:	fba3 2302 	umull	r2, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80076e8:	441c      	add	r4, r3
 80076ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80076f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007704:	415b      	adcs	r3, r3
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800770c:	4641      	mov	r1, r8
 800770e:	1851      	adds	r1, r2, r1
 8007710:	6339      	str	r1, [r7, #48]	@ 0x30
 8007712:	4649      	mov	r1, r9
 8007714:	414b      	adcs	r3, r1
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007724:	4659      	mov	r1, fp
 8007726:	00cb      	lsls	r3, r1, #3
 8007728:	4651      	mov	r1, sl
 800772a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772e:	4651      	mov	r1, sl
 8007730:	00ca      	lsls	r2, r1, #3
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	4603      	mov	r3, r0
 8007738:	4642      	mov	r2, r8
 800773a:	189b      	adds	r3, r3, r2
 800773c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007740:	464b      	mov	r3, r9
 8007742:	460a      	mov	r2, r1
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007758:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800775c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007760:	460b      	mov	r3, r1
 8007762:	18db      	adds	r3, r3, r3
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007766:	4613      	mov	r3, r2
 8007768:	eb42 0303 	adc.w	r3, r2, r3
 800776c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800776e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007776:	f7f8 fd2b 	bl	80001d0 <__aeabi_uldivmod>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <UART_SetConfig+0x2d4>)
 8007780:	fba3 1302 	umull	r1, r3, r3, r2
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	2164      	movs	r1, #100	@ 0x64
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	3332      	adds	r3, #50	@ 0x32
 8007792:	4a08      	ldr	r2, [pc, #32]	@ (80077b4 <UART_SetConfig+0x2d4>)
 8007794:	fba2 2303 	umull	r2, r3, r2, r3
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f003 0207 	and.w	r2, r3, #7
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4422      	add	r2, r4
 80077a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077a8:	e106      	b.n	80079b8 <UART_SetConfig+0x4d8>
 80077aa:	bf00      	nop
 80077ac:	40011000 	.word	0x40011000
 80077b0:	40011400 	.word	0x40011400
 80077b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077bc:	2200      	movs	r2, #0
 80077be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80077c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80077ca:	4642      	mov	r2, r8
 80077cc:	464b      	mov	r3, r9
 80077ce:	1891      	adds	r1, r2, r2
 80077d0:	6239      	str	r1, [r7, #32]
 80077d2:	415b      	adcs	r3, r3
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077da:	4641      	mov	r1, r8
 80077dc:	1854      	adds	r4, r2, r1
 80077de:	4649      	mov	r1, r9
 80077e0:	eb43 0501 	adc.w	r5, r3, r1
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	00eb      	lsls	r3, r5, #3
 80077ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077f2:	00e2      	lsls	r2, r4, #3
 80077f4:	4614      	mov	r4, r2
 80077f6:	461d      	mov	r5, r3
 80077f8:	4643      	mov	r3, r8
 80077fa:	18e3      	adds	r3, r4, r3
 80077fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007800:	464b      	mov	r3, r9
 8007802:	eb45 0303 	adc.w	r3, r5, r3
 8007806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007826:	4629      	mov	r1, r5
 8007828:	008b      	lsls	r3, r1, #2
 800782a:	4621      	mov	r1, r4
 800782c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007830:	4621      	mov	r1, r4
 8007832:	008a      	lsls	r2, r1, #2
 8007834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007838:	f7f8 fcca 	bl	80001d0 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4b60      	ldr	r3, [pc, #384]	@ (80079c4 <UART_SetConfig+0x4e4>)
 8007842:	fba3 2302 	umull	r2, r3, r3, r2
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	011c      	lsls	r4, r3, #4
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007854:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	1891      	adds	r1, r2, r2
 8007862:	61b9      	str	r1, [r7, #24]
 8007864:	415b      	adcs	r3, r3
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800786c:	4641      	mov	r1, r8
 800786e:	1851      	adds	r1, r2, r1
 8007870:	6139      	str	r1, [r7, #16]
 8007872:	4649      	mov	r1, r9
 8007874:	414b      	adcs	r3, r1
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007884:	4659      	mov	r1, fp
 8007886:	00cb      	lsls	r3, r1, #3
 8007888:	4651      	mov	r1, sl
 800788a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800788e:	4651      	mov	r1, sl
 8007890:	00ca      	lsls	r2, r1, #3
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	4603      	mov	r3, r0
 8007898:	4642      	mov	r2, r8
 800789a:	189b      	adds	r3, r3, r2
 800789c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078a0:	464b      	mov	r3, r9
 80078a2:	460a      	mov	r2, r1
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80078c4:	4649      	mov	r1, r9
 80078c6:	008b      	lsls	r3, r1, #2
 80078c8:	4641      	mov	r1, r8
 80078ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ce:	4641      	mov	r1, r8
 80078d0:	008a      	lsls	r2, r1, #2
 80078d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80078d6:	f7f8 fc7b 	bl	80001d0 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	4b38      	ldr	r3, [pc, #224]	@ (80079c4 <UART_SetConfig+0x4e4>)
 80078e2:	fba3 2301 	umull	r2, r3, r3, r1
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	2264      	movs	r2, #100	@ 0x64
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	1acb      	subs	r3, r1, r3
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	3332      	adds	r3, #50	@ 0x32
 80078f4:	4a33      	ldr	r2, [pc, #204]	@ (80079c4 <UART_SetConfig+0x4e4>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007900:	441c      	add	r4, r3
 8007902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007906:	2200      	movs	r2, #0
 8007908:	673b      	str	r3, [r7, #112]	@ 0x70
 800790a:	677a      	str	r2, [r7, #116]	@ 0x74
 800790c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	415b      	adcs	r3, r3
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007952:	464b      	mov	r3, r9
 8007954:	460a      	mov	r2, r1
 8007956:	eb42 0303 	adc.w	r3, r2, r3
 800795a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	663b      	str	r3, [r7, #96]	@ 0x60
 8007966:	667a      	str	r2, [r7, #100]	@ 0x64
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007974:	4649      	mov	r1, r9
 8007976:	008b      	lsls	r3, r1, #2
 8007978:	4641      	mov	r1, r8
 800797a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800797e:	4641      	mov	r1, r8
 8007980:	008a      	lsls	r2, r1, #2
 8007982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007986:	f7f8 fc23 	bl	80001d0 <__aeabi_uldivmod>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <UART_SetConfig+0x4e4>)
 8007990:	fba3 1302 	umull	r1, r3, r3, r2
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	2164      	movs	r1, #100	@ 0x64
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	3332      	adds	r3, #50	@ 0x32
 80079a2:	4a08      	ldr	r2, [pc, #32]	@ (80079c4 <UART_SetConfig+0x4e4>)
 80079a4:	fba2 2303 	umull	r2, r3, r2, r3
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4422      	add	r2, r4
 80079b6:	609a      	str	r2, [r3, #8]
}
 80079b8:	bf00      	nop
 80079ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80079be:	46bd      	mov	sp, r7
 80079c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079c4:	51eb851f 	.word	0x51eb851f

080079c8 <__NVIC_SetPriority>:
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	db0a      	blt.n	80079f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	b2da      	uxtb	r2, r3
 80079e0:	490c      	ldr	r1, [pc, #48]	@ (8007a14 <__NVIC_SetPriority+0x4c>)
 80079e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e6:	0112      	lsls	r2, r2, #4
 80079e8:	b2d2      	uxtb	r2, r2
 80079ea:	440b      	add	r3, r1
 80079ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80079f0:	e00a      	b.n	8007a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	4908      	ldr	r1, [pc, #32]	@ (8007a18 <__NVIC_SetPriority+0x50>)
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	3b04      	subs	r3, #4
 8007a00:	0112      	lsls	r2, r2, #4
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	440b      	add	r3, r1
 8007a06:	761a      	strb	r2, [r3, #24]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	e000e100 	.word	0xe000e100
 8007a18:	e000ed00 	.word	0xe000ed00

08007a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a20:	2100      	movs	r1, #0
 8007a22:	f06f 0004 	mvn.w	r0, #4
 8007a26:	f7ff ffcf 	bl	80079c8 <__NVIC_SetPriority>
#endif
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a36:	f3ef 8305 	mrs	r3, IPSR
 8007a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a42:	f06f 0305 	mvn.w	r3, #5
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	e00c      	b.n	8007a64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a74 <osKernelInitialize+0x44>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a52:	4b08      	ldr	r3, [pc, #32]	@ (8007a74 <osKernelInitialize+0x44>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	607b      	str	r3, [r7, #4]
 8007a5c:	e002      	b.n	8007a64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a64:	687b      	ldr	r3, [r7, #4]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000570 	.word	0x20000570

08007a78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a7e:	f3ef 8305 	mrs	r3, IPSR
 8007a82:	603b      	str	r3, [r7, #0]
  return(result);
 8007a84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a8a:	f06f 0305 	mvn.w	r3, #5
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	e010      	b.n	8007ab4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a92:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <osKernelStart+0x48>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d109      	bne.n	8007aae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a9a:	f7ff ffbf 	bl	8007a1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a9e:	4b08      	ldr	r3, [pc, #32]	@ (8007ac0 <osKernelStart+0x48>)
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007aa4:	f001 f87a 	bl	8008b9c <vTaskStartScheduler>
      stat = osOK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	607b      	str	r3, [r7, #4]
 8007aac:	e002      	b.n	8007ab4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ab4:	687b      	ldr	r3, [r7, #4]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000570 	.word	0x20000570

08007ac4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	@ 0x38
 8007ac8:	af04      	add	r7, sp, #16
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad4:	f3ef 8305 	mrs	r3, IPSR
 8007ad8:	617b      	str	r3, [r7, #20]
  return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d17e      	bne.n	8007bde <osThreadNew+0x11a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d07b      	beq.n	8007bde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ae6:	2380      	movs	r3, #128	@ 0x80
 8007ae8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007aea:	2318      	movs	r3, #24
 8007aec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295
 8007af6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d045      	beq.n	8007b8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <osThreadNew+0x48>
        name = attr->name;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <osThreadNew+0x6e>
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b38      	cmp	r3, #56	@ 0x38
 8007b24:	d805      	bhi.n	8007b32 <osThreadNew+0x6e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <osThreadNew+0x72>
        return (NULL);
 8007b32:	2300      	movs	r3, #0
 8007b34:	e054      	b.n	8007be0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	089b      	lsrs	r3, r3, #2
 8007b44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <osThreadNew+0xa8>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b54:	d90a      	bls.n	8007b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d006      	beq.n	8007b6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <osThreadNew+0xa8>
        mem = 1;
 8007b66:	2301      	movs	r3, #1
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	e010      	b.n	8007b8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10c      	bne.n	8007b8e <osThreadNew+0xca>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d108      	bne.n	8007b8e <osThreadNew+0xca>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <osThreadNew+0xca>
          mem = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	e001      	b.n	8007b8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d110      	bne.n	8007bb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b9c:	9202      	str	r2, [sp, #8]
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fe1a 	bl	80087e4 <xTaskCreateStatic>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	e013      	b.n	8007bde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d110      	bne.n	8007bde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	f107 0310 	add.w	r3, r7, #16
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fe68 	bl	80088a4 <xTaskCreate>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d001      	beq.n	8007bde <osThreadNew+0x11a>
            hTask = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bde:	693b      	ldr	r3, [r7, #16]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3728      	adds	r7, #40	@ 0x28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bf0:	f3ef 8305 	mrs	r3, IPSR
 8007bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <osDelay+0x1c>
    stat = osErrorISR;
 8007bfc:	f06f 0305 	mvn.w	r3, #5
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e007      	b.n	8007c14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 ff8e 	bl	8008b30 <vTaskDelay>
    }
  }

  return (stat);
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4a06      	ldr	r2, [pc, #24]	@ (8007c50 <vApplicationGetIdleTaskMemory+0x30>)
 8007c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2280      	movs	r2, #128	@ 0x80
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000574 	.word	0x20000574
 8007c50:	200005d0 	.word	0x200005d0

08007c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a07      	ldr	r2, [pc, #28]	@ (8007c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a06      	ldr	r2, [pc, #24]	@ (8007c84 <vApplicationGetTimerTaskMemory+0x30>)
 8007c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200007d0 	.word	0x200007d0
 8007c84:	2000082c 	.word	0x2000082c

08007c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f103 0208 	add.w	r2, r3, #8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f103 0208 	add.w	r2, r3, #8
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f103 0208 	add.w	r2, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cd6:	bf00      	nop
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	601a      	str	r2, [r3, #0]
}
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d103      	bne.n	8007d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e00c      	b.n	8007d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e002      	b.n	8007d58 <vListInsert+0x2e>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d2f6      	bcs.n	8007d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	601a      	str	r2, [r3, #0]
}
 8007d90:	bf00      	nop
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6892      	ldr	r2, [r2, #8]
 8007db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6852      	ldr	r2, [r2, #4]
 8007dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d103      	bne.n	8007dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	1e5a      	subs	r2, r3, #1
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e1c:	f002 f884 	bl	8009f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e28:	68f9      	ldr	r1, [r7, #12]
 8007e2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	441a      	add	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e52:	fb01 f303 	mul.w	r3, r1, r3
 8007e56:	441a      	add	r2, r3
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	22ff      	movs	r2, #255	@ 0xff
 8007e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	22ff      	movs	r2, #255	@ 0xff
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d114      	bne.n	8007e9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01a      	beq.n	8007eb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3310      	adds	r3, #16
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 f922 	bl	80090c8 <xTaskRemoveFromEventList>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d012      	beq.n	8007eb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec0 <xQueueGenericReset+0xd0>)
 8007e8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	e009      	b.n	8007eb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3310      	adds	r3, #16
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fef1 	bl	8007c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3324      	adds	r3, #36	@ 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff feec 	bl	8007c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007eb0:	f002 f86c 	bl	8009f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007eb4:	2301      	movs	r3, #1
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	@ 0x38
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10b      	bne.n	8007f0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	e7fd      	b.n	8007f0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <xQueueGenericCreateStatic+0x56>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <xQueueGenericCreateStatic+0x5a>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGenericCreateStatic+0x5c>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	623b      	str	r3, [r7, #32]
}
 8007f36:	bf00      	nop
 8007f38:	bf00      	nop
 8007f3a:	e7fd      	b.n	8007f38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d102      	bne.n	8007f48 <xQueueGenericCreateStatic+0x84>
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <xQueueGenericCreateStatic+0x88>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <xQueueGenericCreateStatic+0x8a>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	61fb      	str	r3, [r7, #28]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f6a:	2350      	movs	r3, #80	@ 0x50
 8007f6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b50      	cmp	r3, #80	@ 0x50
 8007f72:	d00b      	beq.n	8007f8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61bb      	str	r3, [r7, #24]
}
 8007f86:	bf00      	nop
 8007f88:	bf00      	nop
 8007f8a:	e7fd      	b.n	8007f88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00d      	beq.n	8007fb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 f805 	bl	8007fbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3730      	adds	r7, #48	@ 0x30
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	60f8      	str	r0, [r7, #12]
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d103      	bne.n	8007fda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e002      	b.n	8007fe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fec:	2101      	movs	r1, #1
 8007fee:	69b8      	ldr	r0, [r7, #24]
 8007ff0:	f7ff fefe 	bl	8007df0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	@ 0x38
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008012:	2300      	movs	r3, #0
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10b      	bne.n	8008038 <xQueueGenericSend+0x34>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <xQueueGenericSend+0x42>
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <xQueueGenericSend+0x46>
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <xQueueGenericSend+0x48>
 800804a:	2300      	movs	r3, #0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <xQueueGenericSend+0x64>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d103      	bne.n	8008076 <xQueueGenericSend+0x72>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <xQueueGenericSend+0x76>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueGenericSend+0x78>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <xQueueGenericSend+0x94>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	623b      	str	r3, [r7, #32]
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	e7fd      	b.n	8008094 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008098:	f001 f9d8 	bl	800944c <xTaskGetSchedulerState>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <xQueueGenericSend+0xa4>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <xQueueGenericSend+0xa8>
 80080a8:	2301      	movs	r3, #1
 80080aa:	e000      	b.n	80080ae <xQueueGenericSend+0xaa>
 80080ac:	2300      	movs	r3, #0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10b      	bne.n	80080ca <xQueueGenericSend+0xc6>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	61fb      	str	r3, [r7, #28]
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop
 80080c8:	e7fd      	b.n	80080c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ca:	f001 ff2d 	bl	8009f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d302      	bcc.n	80080e0 <xQueueGenericSend+0xdc>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d129      	bne.n	8008134 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	68b9      	ldr	r1, [r7, #8]
 80080e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080e6:	f000 fa0f 	bl	8008508 <prvCopyDataToQueue>
 80080ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d010      	beq.n	8008116 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f6:	3324      	adds	r3, #36	@ 0x24
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 ffe5 	bl	80090c8 <xTaskRemoveFromEventList>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d013      	beq.n	800812c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008104:	4b3f      	ldr	r3, [pc, #252]	@ (8008204 <xQueueGenericSend+0x200>)
 8008106:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	e00a      	b.n	800812c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800811c:	4b39      	ldr	r3, [pc, #228]	@ (8008204 <xQueueGenericSend+0x200>)
 800811e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800812c:	f001 ff2e 	bl	8009f8c <vPortExitCritical>
				return pdPASS;
 8008130:	2301      	movs	r3, #1
 8008132:	e063      	b.n	80081fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800813a:	f001 ff27 	bl	8009f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800813e:	2300      	movs	r3, #0
 8008140:	e05c      	b.n	80081fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008148:	f107 0314 	add.w	r3, r7, #20
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f81f 	bl	8009190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008152:	2301      	movs	r3, #1
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008156:	f001 ff19 	bl	8009f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800815a:	f000 fd87 	bl	8008c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800815e:	f001 fee3 	bl	8009f28 <vPortEnterCritical>
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008168:	b25b      	sxtb	r3, r3
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816e:	d103      	bne.n	8008178 <xQueueGenericSend+0x174>
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800817e:	b25b      	sxtb	r3, r3
 8008180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008184:	d103      	bne.n	800818e <xQueueGenericSend+0x18a>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800818e:	f001 fefd 	bl	8009f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008192:	1d3a      	adds	r2, r7, #4
 8008194:	f107 0314 	add.w	r3, r7, #20
 8008198:	4611      	mov	r1, r2
 800819a:	4618      	mov	r0, r3
 800819c:	f001 f80e 	bl	80091bc <xTaskCheckForTimeOut>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d124      	bne.n	80081f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081a8:	f000 faa6 	bl	80086f8 <prvIsQueueFull>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d018      	beq.n	80081e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	3310      	adds	r3, #16
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 ff32 	bl	8009024 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081c2:	f000 fa31 	bl	8008628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081c6:	f000 fd5f 	bl	8008c88 <xTaskResumeAll>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f af7c 	bne.w	80080ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80081d2:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <xQueueGenericSend+0x200>)
 80081d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	e772      	b.n	80080ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081e6:	f000 fa1f 	bl	8008628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ea:	f000 fd4d 	bl	8008c88 <xTaskResumeAll>
 80081ee:	e76c      	b.n	80080ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081f2:	f000 fa19 	bl	8008628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081f6:	f000 fd47 	bl	8008c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3738      	adds	r7, #56	@ 0x38
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	e000ed04 	.word	0xe000ed04

08008208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b090      	sub	sp, #64	@ 0x40
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10b      	bne.n	8008238 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d103      	bne.n	8008246 <xQueueGenericSendFromISR+0x3e>
 800823e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <xQueueGenericSendFromISR+0x42>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueGenericSendFromISR+0x44>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <xQueueGenericSendFromISR+0x6e>
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008272:	2b01      	cmp	r3, #1
 8008274:	d101      	bne.n	800827a <xQueueGenericSendFromISR+0x72>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericSendFromISR+0x74>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	623b      	str	r3, [r7, #32]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008298:	f001 ff26 	bl	800a0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800829c:	f3ef 8211 	mrs	r2, BASEPRI
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fa      	str	r2, [r7, #28]
 80082b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d302      	bcc.n	80082ca <xQueueGenericSendFromISR+0xc2>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d12f      	bne.n	800832a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80082e0:	f000 f912 	bl	8008508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ec:	d112      	bne.n	8008314 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d016      	beq.n	8008324 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	3324      	adds	r3, #36	@ 0x24
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fee4 	bl	80090c8 <xTaskRemoveFromEventList>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00e      	beq.n	8008324 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	e007      	b.n	8008324 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008318:	3301      	adds	r3, #1
 800831a:	b2db      	uxtb	r3, r3
 800831c:	b25a      	sxtb	r2, r3
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008328:	e001      	b.n	800832e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800832e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008330:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008338:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800833a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800833c:	4618      	mov	r0, r3
 800833e:	3740      	adds	r7, #64	@ 0x40
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	@ 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10b      	bne.n	8008376 <xQueueReceive+0x32>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	623b      	str	r3, [r7, #32]
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	e7fd      	b.n	8008372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <xQueueReceive+0x40>
 800837c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <xQueueReceive+0x44>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <xQueueReceive+0x46>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <xQueueReceive+0x62>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	61fb      	str	r3, [r7, #28]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083a6:	f001 f851 	bl	800944c <xTaskGetSchedulerState>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <xQueueReceive+0x72>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <xQueueReceive+0x76>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <xQueueReceive+0x78>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10b      	bne.n	80083d8 <xQueueReceive+0x94>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	61bb      	str	r3, [r7, #24]
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	e7fd      	b.n	80083d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083d8:	f001 fda6 	bl	8009f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01f      	beq.n	8008428 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ec:	f000 f8f6 	bl	80085dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	1e5a      	subs	r2, r3, #1
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00f      	beq.n	8008420 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008402:	3310      	adds	r3, #16
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fe5f 	bl	80090c8 <xTaskRemoveFromEventList>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008410:	4b3c      	ldr	r3, [pc, #240]	@ (8008504 <xQueueReceive+0x1c0>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008420:	f001 fdb4 	bl	8009f8c <vPortExitCritical>
				return pdPASS;
 8008424:	2301      	movs	r3, #1
 8008426:	e069      	b.n	80084fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d103      	bne.n	8008436 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800842e:	f001 fdad 	bl	8009f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008432:	2300      	movs	r3, #0
 8008434:	e062      	b.n	80084fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	4618      	mov	r0, r3
 8008442:	f000 fea5 	bl	8009190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008446:	2301      	movs	r3, #1
 8008448:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800844a:	f001 fd9f 	bl	8009f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800844e:	f000 fc0d 	bl	8008c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008452:	f001 fd69 	bl	8009f28 <vPortEnterCritical>
 8008456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800845c:	b25b      	sxtb	r3, r3
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008462:	d103      	bne.n	800846c <xQueueReceive+0x128>
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008472:	b25b      	sxtb	r3, r3
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d103      	bne.n	8008482 <xQueueReceive+0x13e>
 800847a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008482:	f001 fd83 	bl	8009f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008486:	1d3a      	adds	r2, r7, #4
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fe94 	bl	80091bc <xTaskCheckForTimeOut>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d123      	bne.n	80084e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800849a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800849c:	f000 f916 	bl	80086cc <prvIsQueueEmpty>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d017      	beq.n	80084d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	3324      	adds	r3, #36	@ 0x24
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	4611      	mov	r1, r2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 fdb8 	bl	8009024 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084b6:	f000 f8b7 	bl	8008628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084ba:	f000 fbe5 	bl	8008c88 <xTaskResumeAll>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d189      	bne.n	80083d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80084c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008504 <xQueueReceive+0x1c0>)
 80084c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	e780      	b.n	80083d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084d8:	f000 f8a6 	bl	8008628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084dc:	f000 fbd4 	bl	8008c88 <xTaskResumeAll>
 80084e0:	e77a      	b.n	80083d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e4:	f000 f8a0 	bl	8008628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084e8:	f000 fbce 	bl	8008c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084ee:	f000 f8ed 	bl	80086cc <prvIsQueueEmpty>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f43f af6f 	beq.w	80083d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3730      	adds	r7, #48	@ 0x30
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10d      	bne.n	8008542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d14d      	bne.n	80085ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 ffa8 	bl	8009488 <xTaskPriorityDisinherit>
 8008538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	609a      	str	r2, [r3, #8]
 8008540:	e043      	b.n	80085ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d119      	bne.n	800857c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6858      	ldr	r0, [r3, #4]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008550:	461a      	mov	r2, r3
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	f002 f842 	bl	800a5dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008560:	441a      	add	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	429a      	cmp	r2, r3
 8008570:	d32b      	bcc.n	80085ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	e026      	b.n	80085ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68d8      	ldr	r0, [r3, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	461a      	mov	r2, r3
 8008586:	68b9      	ldr	r1, [r7, #8]
 8008588:	f002 f828 	bl	800a5dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68da      	ldr	r2, [r3, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	425b      	negs	r3, r3
 8008596:	441a      	add	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	68da      	ldr	r2, [r3, #12]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d207      	bcs.n	80085b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b0:	425b      	negs	r3, r3
 80085b2:	441a      	add	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d105      	bne.n	80085ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80085d2:	697b      	ldr	r3, [r7, #20]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d018      	beq.n	8008620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f6:	441a      	add	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	429a      	cmp	r2, r3
 8008606:	d303      	bcc.n	8008610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68d9      	ldr	r1, [r3, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	461a      	mov	r2, r3
 800861a:	6838      	ldr	r0, [r7, #0]
 800861c:	f001 ffde 	bl	800a5dc <memcpy>
	}
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008630:	f001 fc7a 	bl	8009f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800863a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800863c:	e011      	b.n	8008662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d012      	beq.n	800866c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3324      	adds	r3, #36	@ 0x24
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fd3c 	bl	80090c8 <xTaskRemoveFromEventList>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008656:	f000 fe15 	bl	8009284 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	3b01      	subs	r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dce9      	bgt.n	800863e <prvUnlockQueue+0x16>
 800866a:	e000      	b.n	800866e <prvUnlockQueue+0x46>
					break;
 800866c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	22ff      	movs	r2, #255	@ 0xff
 8008672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008676:	f001 fc89 	bl	8009f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800867a:	f001 fc55 	bl	8009f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008686:	e011      	b.n	80086ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d012      	beq.n	80086b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3310      	adds	r3, #16
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fd17 	bl	80090c8 <xTaskRemoveFromEventList>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086a0:	f000 fdf0 	bl	8009284 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dce9      	bgt.n	8008688 <prvUnlockQueue+0x60>
 80086b4:	e000      	b.n	80086b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	22ff      	movs	r2, #255	@ 0xff
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086c0:	f001 fc64 	bl	8009f8c <vPortExitCritical>
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086d4:	f001 fc28 	bl	8009f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086e0:	2301      	movs	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
 80086e4:	e001      	b.n	80086ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086ea:	f001 fc4f 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 80086ee:	68fb      	ldr	r3, [r7, #12]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008700:	f001 fc12 	bl	8009f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870c:	429a      	cmp	r2, r3
 800870e:	d102      	bne.n	8008716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e001      	b.n	800871a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800871a:	f001 fc37 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	e014      	b.n	8008762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008738:	4a0f      	ldr	r2, [pc, #60]	@ (8008778 <vQueueAddToRegistry+0x50>)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008744:	490c      	ldr	r1, [pc, #48]	@ (8008778 <vQueueAddToRegistry+0x50>)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800874e:	4a0a      	ldr	r2, [pc, #40]	@ (8008778 <vQueueAddToRegistry+0x50>)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	4413      	add	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800875a:	e006      	b.n	800876a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b07      	cmp	r3, #7
 8008766:	d9e7      	bls.n	8008738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000c2c 	.word	0x20000c2c

0800877c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800878c:	f001 fbcc 	bl	8009f28 <vPortEnterCritical>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008796:	b25b      	sxtb	r3, r3
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879c:	d103      	bne.n	80087a6 <vQueueWaitForMessageRestricted+0x2a>
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d103      	bne.n	80087bc <vQueueWaitForMessageRestricted+0x40>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087bc:	f001 fbe6 	bl	8009f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d106      	bne.n	80087d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	3324      	adds	r3, #36	@ 0x24
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fc4d 	bl	8009070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80087d6:	6978      	ldr	r0, [r7, #20]
 80087d8:	f7ff ff26 	bl	8008628 <prvUnlockQueue>
	}
 80087dc:	bf00      	nop
 80087de:	3718      	adds	r7, #24
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08e      	sub	sp, #56	@ 0x38
 80087e8:	af04      	add	r7, sp, #16
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80087f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10b      	bne.n	8008810 <xTaskCreateStatic+0x2c>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	623b      	str	r3, [r7, #32]
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	e7fd      	b.n	800880c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10b      	bne.n	800882e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800882e:	235c      	movs	r3, #92	@ 0x5c
 8008830:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b5c      	cmp	r3, #92	@ 0x5c
 8008836:	d00b      	beq.n	8008850 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	61bb      	str	r3, [r7, #24]
}
 800884a:	bf00      	nop
 800884c:	bf00      	nop
 800884e:	e7fd      	b.n	800884c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008850:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01e      	beq.n	8008896 <xTaskCreateStatic+0xb2>
 8008858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01b      	beq.n	8008896 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008866:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008870:	2300      	movs	r3, #0
 8008872:	9303      	str	r3, [sp, #12]
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	f107 0314 	add.w	r3, r7, #20
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	68b9      	ldr	r1, [r7, #8]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f850 	bl	800892e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800888e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008890:	f000 f8de 	bl	8008a50 <prvAddNewTaskToReadyList>
 8008894:	e001      	b.n	800889a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800889a:	697b      	ldr	r3, [r7, #20]
	}
 800889c:	4618      	mov	r0, r3
 800889e:	3728      	adds	r7, #40	@ 0x28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08c      	sub	sp, #48	@ 0x30
 80088a8:	af04      	add	r7, sp, #16
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4613      	mov	r3, r2
 80088b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088b4:	88fb      	ldrh	r3, [r7, #6]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 fc57 	bl	800a16c <pvPortMalloc>
 80088be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088c6:	205c      	movs	r0, #92	@ 0x5c
 80088c8:	f001 fc50 	bl	800a16c <pvPortMalloc>
 80088cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80088da:	e005      	b.n	80088e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80088dc:	6978      	ldr	r0, [r7, #20]
 80088de:	f001 fd13 	bl	800a308 <vPortFree>
 80088e2:	e001      	b.n	80088e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d017      	beq.n	800891e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	2300      	movs	r3, #0
 80088fa:	9303      	str	r3, [sp, #12]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	9302      	str	r3, [sp, #8]
 8008900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008902:	9301      	str	r3, [sp, #4]
 8008904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 f80e 	bl	800892e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008912:	69f8      	ldr	r0, [r7, #28]
 8008914:	f000 f89c 	bl	8008a50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008918:	2301      	movs	r3, #1
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	e002      	b.n	8008924 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800891e:	f04f 33ff 	mov.w	r3, #4294967295
 8008922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008924:	69bb      	ldr	r3, [r7, #24]
	}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b088      	sub	sp, #32
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	461a      	mov	r2, r3
 8008946:	21a5      	movs	r1, #165	@ 0xa5
 8008948:	f001 fdfe 	bl	800a548 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008956:	3b01      	subs	r3, #1
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00b      	beq.n	8008988 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	617b      	str	r3, [r7, #20]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d01f      	beq.n	80089ce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	e012      	b.n	80089ba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	7819      	ldrb	r1, [r3, #0]
 800899c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	3334      	adds	r3, #52	@ 0x34
 80089a4:	460a      	mov	r2, r1
 80089a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	4413      	add	r3, r2
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d006      	beq.n	80089c2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	3301      	adds	r3, #1
 80089b8:	61fb      	str	r3, [r7, #28]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	2b0f      	cmp	r3, #15
 80089be:	d9e9      	bls.n	8008994 <prvInitialiseNewTask+0x66>
 80089c0:	e000      	b.n	80089c4 <prvInitialiseNewTask+0x96>
			{
				break;
 80089c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089cc:	e003      	b.n	80089d6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d0:	2200      	movs	r2, #0
 80089d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	2b37      	cmp	r3, #55	@ 0x37
 80089da:	d901      	bls.n	80089e0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089dc:	2337      	movs	r3, #55	@ 0x37
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089ea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	2200      	movs	r2, #0
 80089f0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	3304      	adds	r3, #4
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff f966 	bl	8007cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	3318      	adds	r3, #24
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff f961 	bl	8007cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	2200      	movs	r2, #0
 8008a20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	68f9      	ldr	r1, [r7, #12]
 8008a2e:	69b8      	ldr	r0, [r7, #24]
 8008a30:	f001 f948 	bl	8009cc4 <pxPortInitialiseStack>
 8008a34:	4602      	mov	r2, r0
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a46:	bf00      	nop
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a58:	f001 fa66 	bl	8009f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008b14 <prvAddNewTaskToReadyList+0xc4>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3301      	adds	r3, #1
 8008a62:	4a2c      	ldr	r2, [pc, #176]	@ (8008b14 <prvAddNewTaskToReadyList+0xc4>)
 8008a64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a66:	4b2c      	ldr	r3, [pc, #176]	@ (8008b18 <prvAddNewTaskToReadyList+0xc8>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b18 <prvAddNewTaskToReadyList+0xc8>)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a74:	4b27      	ldr	r3, [pc, #156]	@ (8008b14 <prvAddNewTaskToReadyList+0xc4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d110      	bne.n	8008a9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a7c:	f000 fc28 	bl	80092d0 <prvInitialiseTaskLists>
 8008a80:	e00d      	b.n	8008a9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a82:	4b26      	ldr	r3, [pc, #152]	@ (8008b1c <prvAddNewTaskToReadyList+0xcc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d109      	bne.n	8008a9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a8a:	4b23      	ldr	r3, [pc, #140]	@ (8008b18 <prvAddNewTaskToReadyList+0xc8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d802      	bhi.n	8008a9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a98:	4a1f      	ldr	r2, [pc, #124]	@ (8008b18 <prvAddNewTaskToReadyList+0xc8>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a9e:	4b20      	ldr	r3, [pc, #128]	@ (8008b20 <prvAddNewTaskToReadyList+0xd0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b20 <prvAddNewTaskToReadyList+0xd0>)
 8008aa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b20 <prvAddNewTaskToReadyList+0xd0>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b24 <prvAddNewTaskToReadyList+0xd4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d903      	bls.n	8008ac4 <prvAddNewTaskToReadyList+0x74>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac0:	4a18      	ldr	r2, [pc, #96]	@ (8008b24 <prvAddNewTaskToReadyList+0xd4>)
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4a15      	ldr	r2, [pc, #84]	@ (8008b28 <prvAddNewTaskToReadyList+0xd8>)
 8008ad2:	441a      	add	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4610      	mov	r0, r2
 8008adc:	f7ff f901 	bl	8007ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ae0:	f001 fa54 	bl	8009f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <prvAddNewTaskToReadyList+0xcc>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00e      	beq.n	8008b0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aec:	4b0a      	ldr	r3, [pc, #40]	@ (8008b18 <prvAddNewTaskToReadyList+0xc8>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d207      	bcs.n	8008b0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008afa:	4b0c      	ldr	r3, [pc, #48]	@ (8008b2c <prvAddNewTaskToReadyList+0xdc>)
 8008afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20001140 	.word	0x20001140
 8008b18:	20000c6c 	.word	0x20000c6c
 8008b1c:	2000114c 	.word	0x2000114c
 8008b20:	2000115c 	.word	0x2000115c
 8008b24:	20001148 	.word	0x20001148
 8008b28:	20000c70 	.word	0x20000c70
 8008b2c:	e000ed04 	.word	0xe000ed04

08008b30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d018      	beq.n	8008b74 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b42:	4b14      	ldr	r3, [pc, #80]	@ (8008b94 <vTaskDelay+0x64>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <vTaskDelay+0x32>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	60bb      	str	r3, [r7, #8]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b62:	f000 f883 	bl	8008c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b66:	2100      	movs	r1, #0
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fcfd 	bl	8009568 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b6e:	f000 f88b 	bl	8008c88 <xTaskResumeAll>
 8008b72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d107      	bne.n	8008b8a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b7a:	4b07      	ldr	r3, [pc, #28]	@ (8008b98 <vTaskDelay+0x68>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20001168 	.word	0x20001168
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	@ 0x28
 8008ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008baa:	463a      	mov	r2, r7
 8008bac:	1d39      	adds	r1, r7, #4
 8008bae:	f107 0308 	add.w	r3, r7, #8
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7ff f834 	bl	8007c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	9202      	str	r2, [sp, #8]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	460a      	mov	r2, r1
 8008bca:	4922      	ldr	r1, [pc, #136]	@ (8008c54 <vTaskStartScheduler+0xb8>)
 8008bcc:	4822      	ldr	r0, [pc, #136]	@ (8008c58 <vTaskStartScheduler+0xbc>)
 8008bce:	f7ff fe09 	bl	80087e4 <xTaskCreateStatic>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	4a21      	ldr	r2, [pc, #132]	@ (8008c5c <vTaskStartScheduler+0xc0>)
 8008bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008bd8:	4b20      	ldr	r3, [pc, #128]	@ (8008c5c <vTaskStartScheduler+0xc0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e001      	b.n	8008bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d102      	bne.n	8008bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008bf0:	f000 fd0e 	bl	8009610 <xTimerCreateTimerTask>
 8008bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d116      	bne.n	8008c2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	613b      	str	r3, [r7, #16]
}
 8008c0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c10:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <vTaskStartScheduler+0xc4>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c18:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <vTaskStartScheduler+0xc8>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	@ (8008c68 <vTaskStartScheduler+0xcc>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c24:	f001 f8dc 	bl	8009de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c28:	e00f      	b.n	8008c4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d10b      	bne.n	8008c4a <vTaskStartScheduler+0xae>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60fb      	str	r3, [r7, #12]
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	e7fd      	b.n	8008c46 <vTaskStartScheduler+0xaa>
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	0800bd2c 	.word	0x0800bd2c
 8008c58:	0800929d 	.word	0x0800929d
 8008c5c:	20001164 	.word	0x20001164
 8008c60:	20001160 	.word	0x20001160
 8008c64:	2000114c 	.word	0x2000114c
 8008c68:	20001144 	.word	0x20001144

08008c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c70:	4b04      	ldr	r3, [pc, #16]	@ (8008c84 <vTaskSuspendAll+0x18>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a03      	ldr	r2, [pc, #12]	@ (8008c84 <vTaskSuspendAll+0x18>)
 8008c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c7a:	bf00      	nop
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	20001168 	.word	0x20001168

08008c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c96:	4b42      	ldr	r3, [pc, #264]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	603b      	str	r3, [r7, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cb6:	f001 f937 	bl	8009f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cba:	4b39      	ldr	r3, [pc, #228]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	4a37      	ldr	r2, [pc, #220]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc4:	4b36      	ldr	r3, [pc, #216]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d162      	bne.n	8008d92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ccc:	4b35      	ldr	r3, [pc, #212]	@ (8008da4 <xTaskResumeAll+0x11c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d05e      	beq.n	8008d92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cd4:	e02f      	b.n	8008d36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd6:	4b34      	ldr	r3, [pc, #208]	@ (8008da8 <xTaskResumeAll+0x120>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3318      	adds	r3, #24
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff f85a 	bl	8007d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff f855 	bl	8007d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8008dac <xTaskResumeAll+0x124>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d903      	bls.n	8008d06 <xTaskResumeAll+0x7e>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4a2a      	ldr	r2, [pc, #168]	@ (8008dac <xTaskResumeAll+0x124>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4a27      	ldr	r2, [pc, #156]	@ (8008db0 <xTaskResumeAll+0x128>)
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fe ffe0 	bl	8007ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d26:	4b23      	ldr	r3, [pc, #140]	@ (8008db4 <xTaskResumeAll+0x12c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d302      	bcc.n	8008d36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d30:	4b21      	ldr	r3, [pc, #132]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d36:	4b1c      	ldr	r3, [pc, #112]	@ (8008da8 <xTaskResumeAll+0x120>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1cb      	bne.n	8008cd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d44:	f000 fb62 	bl	800940c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d48:	4b1c      	ldr	r3, [pc, #112]	@ (8008dbc <xTaskResumeAll+0x134>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d010      	beq.n	8008d76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d54:	f000 f846 	bl	8008de4 <xTaskIncrementTick>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d5e:	4b16      	ldr	r3, [pc, #88]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1f1      	bne.n	8008d54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008d70:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <xTaskResumeAll+0x134>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d76:	4b10      	ldr	r3, [pc, #64]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d009      	beq.n	8008d92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d82:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <xTaskResumeAll+0x138>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d92:	f001 f8fb 	bl	8009f8c <vPortExitCritical>

	return xAlreadyYielded;
 8008d96:	68bb      	ldr	r3, [r7, #8]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	20001168 	.word	0x20001168
 8008da4:	20001140 	.word	0x20001140
 8008da8:	20001100 	.word	0x20001100
 8008dac:	20001148 	.word	0x20001148
 8008db0:	20000c70 	.word	0x20000c70
 8008db4:	20000c6c 	.word	0x20000c6c
 8008db8:	20001154 	.word	0x20001154
 8008dbc:	20001150 	.word	0x20001150
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008dca:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <xTaskGetTickCount+0x1c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008dd0:	687b      	ldr	r3, [r7, #4]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20001144 	.word	0x20001144

08008de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dee:	4b53      	ldr	r3, [pc, #332]	@ (8008f3c <xTaskIncrementTick+0x158>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f040 8096 	bne.w	8008f24 <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008df8:	4b51      	ldr	r3, [pc, #324]	@ (8008f40 <xTaskIncrementTick+0x15c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e00:	4a4f      	ldr	r2, [pc, #316]	@ (8008f40 <xTaskIncrementTick+0x15c>)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d121      	bne.n	8008e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8008f44 <xTaskIncrementTick+0x160>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	603b      	str	r3, [r7, #0]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <xTaskIncrementTick+0x46>
 8008e2e:	4b45      	ldr	r3, [pc, #276]	@ (8008f44 <xTaskIncrementTick+0x160>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	4b44      	ldr	r3, [pc, #272]	@ (8008f48 <xTaskIncrementTick+0x164>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a42      	ldr	r2, [pc, #264]	@ (8008f44 <xTaskIncrementTick+0x160>)
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	4a42      	ldr	r2, [pc, #264]	@ (8008f48 <xTaskIncrementTick+0x164>)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4b42      	ldr	r3, [pc, #264]	@ (8008f4c <xTaskIncrementTick+0x168>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	4a40      	ldr	r2, [pc, #256]	@ (8008f4c <xTaskIncrementTick+0x168>)
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	f000 fade 	bl	800940c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e50:	4b3f      	ldr	r3, [pc, #252]	@ (8008f50 <xTaskIncrementTick+0x16c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d349      	bcc.n	8008eee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8008f44 <xTaskIncrementTick+0x160>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e64:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <xTaskIncrementTick+0x16c>)
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	601a      	str	r2, [r3, #0]
					break;
 8008e6c:	e03f      	b.n	8008eee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6e:	4b35      	ldr	r3, [pc, #212]	@ (8008f44 <xTaskIncrementTick+0x160>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d203      	bcs.n	8008e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e86:	4a32      	ldr	r2, [pc, #200]	@ (8008f50 <xTaskIncrementTick+0x16c>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e8c:	e02f      	b.n	8008eee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	3304      	adds	r3, #4
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe ff82 	bl	8007d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	3318      	adds	r3, #24
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe ff79 	bl	8007d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eae:	4b29      	ldr	r3, [pc, #164]	@ (8008f54 <xTaskIncrementTick+0x170>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d903      	bls.n	8008ebe <xTaskIncrementTick+0xda>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eba:	4a26      	ldr	r2, [pc, #152]	@ (8008f54 <xTaskIncrementTick+0x170>)
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4a23      	ldr	r2, [pc, #140]	@ (8008f58 <xTaskIncrementTick+0x174>)
 8008ecc:	441a      	add	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	f7fe ff04 	bl	8007ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ede:	4b1f      	ldr	r3, [pc, #124]	@ (8008f5c <xTaskIncrementTick+0x178>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d3b8      	bcc.n	8008e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eec:	e7b5      	b.n	8008e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008eee:	4b1b      	ldr	r3, [pc, #108]	@ (8008f5c <xTaskIncrementTick+0x178>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef4:	4918      	ldr	r1, [pc, #96]	@ (8008f58 <xTaskIncrementTick+0x174>)
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d901      	bls.n	8008f0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f06:	2301      	movs	r3, #1
 8008f08:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8008f0a:	4b15      	ldr	r3, [pc, #84]	@ (8008f60 <xTaskIncrementTick+0x17c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 8008f12:	f7f9 fa5a 	bl	80023ca <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f16:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <xTaskIncrementTick+0x180>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d009      	beq.n	8008f32 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	e006      	b.n	8008f32 <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f24:	4b0e      	ldr	r3, [pc, #56]	@ (8008f60 <xTaskIncrementTick+0x17c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8008f60 <xTaskIncrementTick+0x17c>)
 8008f2c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008f2e:	f7f9 fa4c 	bl	80023ca <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8008f32:	697b      	ldr	r3, [r7, #20]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3718      	adds	r7, #24
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20001168 	.word	0x20001168
 8008f40:	20001144 	.word	0x20001144
 8008f44:	200010f8 	.word	0x200010f8
 8008f48:	200010fc 	.word	0x200010fc
 8008f4c:	20001158 	.word	0x20001158
 8008f50:	20001160 	.word	0x20001160
 8008f54:	20001148 	.word	0x20001148
 8008f58:	20000c70 	.word	0x20000c70
 8008f5c:	20000c6c 	.word	0x20000c6c
 8008f60:	20001150 	.word	0x20001150
 8008f64:	20001154 	.word	0x20001154

08008f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f6e:	4b28      	ldr	r3, [pc, #160]	@ (8009010 <vTaskSwitchContext+0xa8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f76:	4b27      	ldr	r3, [pc, #156]	@ (8009014 <vTaskSwitchContext+0xac>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f7c:	e042      	b.n	8009004 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008f7e:	4b25      	ldr	r3, [pc, #148]	@ (8009014 <vTaskSwitchContext+0xac>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f84:	4b24      	ldr	r3, [pc, #144]	@ (8009018 <vTaskSwitchContext+0xb0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
 8008f8a:	e011      	b.n	8008fb0 <vTaskSwitchContext+0x48>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10b      	bne.n	8008faa <vTaskSwitchContext+0x42>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	607b      	str	r3, [r7, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <vTaskSwitchContext+0x3e>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	491a      	ldr	r1, [pc, #104]	@ (800901c <vTaskSwitchContext+0xb4>)
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0e3      	beq.n	8008f8c <vTaskSwitchContext+0x24>
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4a13      	ldr	r2, [pc, #76]	@ (800901c <vTaskSwitchContext+0xb4>)
 8008fd0:	4413      	add	r3, r2
 8008fd2:	60bb      	str	r3, [r7, #8]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	605a      	str	r2, [r3, #4]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d104      	bne.n	8008ff4 <vTaskSwitchContext+0x8c>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	685a      	ldr	r2, [r3, #4]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	605a      	str	r2, [r3, #4]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	4a09      	ldr	r2, [pc, #36]	@ (8009020 <vTaskSwitchContext+0xb8>)
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	4a06      	ldr	r2, [pc, #24]	@ (8009018 <vTaskSwitchContext+0xb0>)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	20001168 	.word	0x20001168
 8009014:	20001154 	.word	0x20001154
 8009018:	20001148 	.word	0x20001148
 800901c:	20000c70 	.word	0x20000c70
 8009020:	20000c6c 	.word	0x20000c6c

08009024 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10b      	bne.n	800904c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	60fb      	str	r3, [r7, #12]
}
 8009046:	bf00      	nop
 8009048:	bf00      	nop
 800904a:	e7fd      	b.n	8009048 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800904c:	4b07      	ldr	r3, [pc, #28]	@ (800906c <vTaskPlaceOnEventList+0x48>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3318      	adds	r3, #24
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe fe68 	bl	8007d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800905a:	2101      	movs	r1, #1
 800905c:	6838      	ldr	r0, [r7, #0]
 800905e:	f000 fa83 	bl	8009568 <prvAddCurrentTaskToDelayedList>
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000c6c 	.word	0x20000c6c

08009070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10b      	bne.n	800909a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	617b      	str	r3, [r7, #20]
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	e7fd      	b.n	8009096 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800909a:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3318      	adds	r3, #24
 80090a0:	4619      	mov	r1, r3
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7fe fe1d 	bl	8007ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	68b8      	ldr	r0, [r7, #8]
 80090b8:	f000 fa56 	bl	8009568 <prvAddCurrentTaskToDelayedList>
	}
 80090bc:	bf00      	nop
 80090be:	3718      	adds	r7, #24
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20000c6c 	.word	0x20000c6c

080090c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10b      	bne.n	80090f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60fb      	str	r3, [r7, #12]
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	3318      	adds	r3, #24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fe fe4e 	bl	8007d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009100:	4b1d      	ldr	r3, [pc, #116]	@ (8009178 <xTaskRemoveFromEventList+0xb0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d11d      	bne.n	8009144 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	3304      	adds	r3, #4
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fe45 	bl	8007d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009116:	4b19      	ldr	r3, [pc, #100]	@ (800917c <xTaskRemoveFromEventList+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d903      	bls.n	8009126 <xTaskRemoveFromEventList+0x5e>
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009122:	4a16      	ldr	r2, [pc, #88]	@ (800917c <xTaskRemoveFromEventList+0xb4>)
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800912a:	4613      	mov	r3, r2
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	4413      	add	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4a13      	ldr	r2, [pc, #76]	@ (8009180 <xTaskRemoveFromEventList+0xb8>)
 8009134:	441a      	add	r2, r3
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	3304      	adds	r3, #4
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f7fe fdd0 	bl	8007ce2 <vListInsertEnd>
 8009142:	e005      	b.n	8009150 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	3318      	adds	r3, #24
 8009148:	4619      	mov	r1, r3
 800914a:	480e      	ldr	r0, [pc, #56]	@ (8009184 <xTaskRemoveFromEventList+0xbc>)
 800914c:	f7fe fdc9 	bl	8007ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009154:	4b0c      	ldr	r3, [pc, #48]	@ (8009188 <xTaskRemoveFromEventList+0xc0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915a:	429a      	cmp	r2, r3
 800915c:	d905      	bls.n	800916a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800915e:	2301      	movs	r3, #1
 8009160:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009162:	4b0a      	ldr	r3, [pc, #40]	@ (800918c <xTaskRemoveFromEventList+0xc4>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e001      	b.n	800916e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800916e:	697b      	ldr	r3, [r7, #20]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20001168 	.word	0x20001168
 800917c:	20001148 	.word	0x20001148
 8009180:	20000c70 	.word	0x20000c70
 8009184:	20001100 	.word	0x20001100
 8009188:	20000c6c 	.word	0x20000c6c
 800918c:	20001154 	.word	0x20001154

08009190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <vTaskInternalSetTimeOutState+0x24>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091a0:	4b05      	ldr	r3, [pc, #20]	@ (80091b8 <vTaskInternalSetTimeOutState+0x28>)
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	605a      	str	r2, [r3, #4]
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	20001158 	.word	0x20001158
 80091b8:	20001144 	.word	0x20001144

080091bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d10b      	bne.n	80091e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d0:	f383 8811 	msr	BASEPRI, r3
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	613b      	str	r3, [r7, #16]
}
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	e7fd      	b.n	80091e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d10b      	bne.n	8009202 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80091ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	60fb      	str	r3, [r7, #12]
}
 80091fc:	bf00      	nop
 80091fe:	bf00      	nop
 8009200:	e7fd      	b.n	80091fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009202:	f000 fe91 	bl	8009f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009206:	4b1d      	ldr	r3, [pc, #116]	@ (800927c <xTaskCheckForTimeOut+0xc0>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d102      	bne.n	8009226 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009220:	2300      	movs	r3, #0
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e023      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b15      	ldr	r3, [pc, #84]	@ (8009280 <xTaskCheckForTimeOut+0xc4>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d007      	beq.n	8009242 <xTaskCheckForTimeOut+0x86>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	61fb      	str	r3, [r7, #28]
 8009240:	e015      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	429a      	cmp	r2, r3
 800924a:	d20b      	bcs.n	8009264 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff ff99 	bl	8009190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	61fb      	str	r3, [r7, #28]
 8009262:	e004      	b.n	800926e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800926a:	2301      	movs	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800926e:	f000 fe8d 	bl	8009f8c <vPortExitCritical>

	return xReturn;
 8009272:	69fb      	ldr	r3, [r7, #28]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3720      	adds	r7, #32
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20001144 	.word	0x20001144
 8009280:	20001158 	.word	0x20001158

08009284 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <vTaskMissedYield+0x14>)
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
}
 800928e:	bf00      	nop
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	20001154 	.word	0x20001154

0800929c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092a4:	f000 f854 	bl	8009350 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <prvIdleTask+0x2c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d907      	bls.n	80092c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80092b0:	4b06      	ldr	r3, [pc, #24]	@ (80092cc <prvIdleTask+0x30>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80092c0:	f7f9 f87c 	bl	80023bc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80092c4:	e7ee      	b.n	80092a4 <prvIdleTask+0x8>
 80092c6:	bf00      	nop
 80092c8:	20000c70 	.word	0x20000c70
 80092cc:	e000ed04 	.word	0xe000ed04

080092d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092d6:	2300      	movs	r3, #0
 80092d8:	607b      	str	r3, [r7, #4]
 80092da:	e00c      	b.n	80092f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4a12      	ldr	r2, [pc, #72]	@ (8009330 <prvInitialiseTaskLists+0x60>)
 80092e8:	4413      	add	r3, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fccc 	bl	8007c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3301      	adds	r3, #1
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b37      	cmp	r3, #55	@ 0x37
 80092fa:	d9ef      	bls.n	80092dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80092fc:	480d      	ldr	r0, [pc, #52]	@ (8009334 <prvInitialiseTaskLists+0x64>)
 80092fe:	f7fe fcc3 	bl	8007c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009302:	480d      	ldr	r0, [pc, #52]	@ (8009338 <prvInitialiseTaskLists+0x68>)
 8009304:	f7fe fcc0 	bl	8007c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009308:	480c      	ldr	r0, [pc, #48]	@ (800933c <prvInitialiseTaskLists+0x6c>)
 800930a:	f7fe fcbd 	bl	8007c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800930e:	480c      	ldr	r0, [pc, #48]	@ (8009340 <prvInitialiseTaskLists+0x70>)
 8009310:	f7fe fcba 	bl	8007c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009314:	480b      	ldr	r0, [pc, #44]	@ (8009344 <prvInitialiseTaskLists+0x74>)
 8009316:	f7fe fcb7 	bl	8007c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800931a:	4b0b      	ldr	r3, [pc, #44]	@ (8009348 <prvInitialiseTaskLists+0x78>)
 800931c:	4a05      	ldr	r2, [pc, #20]	@ (8009334 <prvInitialiseTaskLists+0x64>)
 800931e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <prvInitialiseTaskLists+0x7c>)
 8009322:	4a05      	ldr	r2, [pc, #20]	@ (8009338 <prvInitialiseTaskLists+0x68>)
 8009324:	601a      	str	r2, [r3, #0]
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20000c70 	.word	0x20000c70
 8009334:	200010d0 	.word	0x200010d0
 8009338:	200010e4 	.word	0x200010e4
 800933c:	20001100 	.word	0x20001100
 8009340:	20001114 	.word	0x20001114
 8009344:	2000112c 	.word	0x2000112c
 8009348:	200010f8 	.word	0x200010f8
 800934c:	200010fc 	.word	0x200010fc

08009350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009356:	e019      	b.n	800938c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009358:	f000 fde6 	bl	8009f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935c:	4b10      	ldr	r3, [pc, #64]	@ (80093a0 <prvCheckTasksWaitingTermination+0x50>)
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3304      	adds	r3, #4
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fd17 	bl	8007d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800936e:	4b0d      	ldr	r3, [pc, #52]	@ (80093a4 <prvCheckTasksWaitingTermination+0x54>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3b01      	subs	r3, #1
 8009374:	4a0b      	ldr	r2, [pc, #44]	@ (80093a4 <prvCheckTasksWaitingTermination+0x54>)
 8009376:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009378:	4b0b      	ldr	r3, [pc, #44]	@ (80093a8 <prvCheckTasksWaitingTermination+0x58>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3b01      	subs	r3, #1
 800937e:	4a0a      	ldr	r2, [pc, #40]	@ (80093a8 <prvCheckTasksWaitingTermination+0x58>)
 8009380:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009382:	f000 fe03 	bl	8009f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f810 	bl	80093ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <prvCheckTasksWaitingTermination+0x58>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e1      	bne.n	8009358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20001114 	.word	0x20001114
 80093a4:	20001140 	.word	0x20001140
 80093a8:	20001128 	.word	0x20001128

080093ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d108      	bne.n	80093d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 ffa0 	bl	800a308 <vPortFree>
				vPortFree( pxTCB );
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 ff9d 	bl	800a308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80093ce:	e019      	b.n	8009404 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d103      	bne.n	80093e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 ff94 	bl	800a308 <vPortFree>
	}
 80093e0:	e010      	b.n	8009404 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d00b      	beq.n	8009404 <prvDeleteTCB+0x58>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <prvDeleteTCB+0x54>
	}
 8009404:	bf00      	nop
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009412:	4b0c      	ldr	r3, [pc, #48]	@ (8009444 <prvResetNextTaskUnblockTime+0x38>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d104      	bne.n	8009426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800941c:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <prvResetNextTaskUnblockTime+0x3c>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009424:	e008      	b.n	8009438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009426:	4b07      	ldr	r3, [pc, #28]	@ (8009444 <prvResetNextTaskUnblockTime+0x38>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4a04      	ldr	r2, [pc, #16]	@ (8009448 <prvResetNextTaskUnblockTime+0x3c>)
 8009436:	6013      	str	r3, [r2, #0]
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	200010f8 	.word	0x200010f8
 8009448:	20001160 	.word	0x20001160

0800944c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009452:	4b0b      	ldr	r3, [pc, #44]	@ (8009480 <xTaskGetSchedulerState+0x34>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800945a:	2301      	movs	r3, #1
 800945c:	607b      	str	r3, [r7, #4]
 800945e:	e008      	b.n	8009472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009460:	4b08      	ldr	r3, [pc, #32]	@ (8009484 <xTaskGetSchedulerState+0x38>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009468:	2302      	movs	r3, #2
 800946a:	607b      	str	r3, [r7, #4]
 800946c:	e001      	b.n	8009472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009472:	687b      	ldr	r3, [r7, #4]
	}
 8009474:	4618      	mov	r0, r3
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	2000114c 	.word	0x2000114c
 8009484:	20001168 	.word	0x20001168

08009488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d058      	beq.n	8009550 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800949e:	4b2f      	ldr	r3, [pc, #188]	@ (800955c <xTaskPriorityDisinherit+0xd4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d00b      	beq.n	80094c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60fb      	str	r3, [r7, #12]
}
 80094ba:	bf00      	nop
 80094bc:	bf00      	nop
 80094be:	e7fd      	b.n	80094bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10b      	bne.n	80094e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	60bb      	str	r3, [r7, #8]
}
 80094da:	bf00      	nop
 80094dc:	bf00      	nop
 80094de:	e7fd      	b.n	80094dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094e4:	1e5a      	subs	r2, r3, #1
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d02c      	beq.n	8009550 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d128      	bne.n	8009550 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fc4a 	bl	8007d9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009514:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009520:	4b0f      	ldr	r3, [pc, #60]	@ (8009560 <xTaskPriorityDisinherit+0xd8>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d903      	bls.n	8009530 <xTaskPriorityDisinherit+0xa8>
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800952c:	4a0c      	ldr	r2, [pc, #48]	@ (8009560 <xTaskPriorityDisinherit+0xd8>)
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4a09      	ldr	r2, [pc, #36]	@ (8009564 <xTaskPriorityDisinherit+0xdc>)
 800953e:	441a      	add	r2, r3
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3304      	adds	r3, #4
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7fe fbcb 	bl	8007ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009550:	697b      	ldr	r3, [r7, #20]
	}
 8009552:	4618      	mov	r0, r3
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000c6c 	.word	0x20000c6c
 8009560:	20001148 	.word	0x20001148
 8009564:	20000c70 	.word	0x20000c70

08009568 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009572:	4b21      	ldr	r3, [pc, #132]	@ (80095f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009578:	4b20      	ldr	r3, [pc, #128]	@ (80095fc <prvAddCurrentTaskToDelayedList+0x94>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3304      	adds	r3, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fc0c 	bl	8007d9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958a:	d10a      	bne.n	80095a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009592:	4b1a      	ldr	r3, [pc, #104]	@ (80095fc <prvAddCurrentTaskToDelayedList+0x94>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4819      	ldr	r0, [pc, #100]	@ (8009600 <prvAddCurrentTaskToDelayedList+0x98>)
 800959c:	f7fe fba1 	bl	8007ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095a0:	e026      	b.n	80095f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4413      	add	r3, r2
 80095a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095aa:	4b14      	ldr	r3, [pc, #80]	@ (80095fc <prvAddCurrentTaskToDelayedList+0x94>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d209      	bcs.n	80095ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ba:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b0f      	ldr	r3, [pc, #60]	@ (80095fc <prvAddCurrentTaskToDelayedList+0x94>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4619      	mov	r1, r3
 80095c6:	4610      	mov	r0, r2
 80095c8:	f7fe fbaf 	bl	8007d2a <vListInsert>
}
 80095cc:	e010      	b.n	80095f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <prvAddCurrentTaskToDelayedList+0xa0>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	4b0a      	ldr	r3, [pc, #40]	@ (80095fc <prvAddCurrentTaskToDelayedList+0x94>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4619      	mov	r1, r3
 80095da:	4610      	mov	r0, r2
 80095dc:	f7fe fba5 	bl	8007d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095e0:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <prvAddCurrentTaskToDelayedList+0xa4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d202      	bcs.n	80095f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095ea:	4a08      	ldr	r2, [pc, #32]	@ (800960c <prvAddCurrentTaskToDelayedList+0xa4>)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	6013      	str	r3, [r2, #0]
}
 80095f0:	bf00      	nop
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20001144 	.word	0x20001144
 80095fc:	20000c6c 	.word	0x20000c6c
 8009600:	2000112c 	.word	0x2000112c
 8009604:	200010fc 	.word	0x200010fc
 8009608:	200010f8 	.word	0x200010f8
 800960c:	20001160 	.word	0x20001160

08009610 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08a      	sub	sp, #40	@ 0x28
 8009614:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800961a:	f000 fb13 	bl	8009c44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800961e:	4b1d      	ldr	r3, [pc, #116]	@ (8009694 <xTimerCreateTimerTask+0x84>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d021      	beq.n	800966a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009626:	2300      	movs	r3, #0
 8009628:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800962a:	2300      	movs	r3, #0
 800962c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800962e:	1d3a      	adds	r2, r7, #4
 8009630:	f107 0108 	add.w	r1, r7, #8
 8009634:	f107 030c 	add.w	r3, r7, #12
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fb0b 	bl	8007c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	9202      	str	r2, [sp, #8]
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	2302      	movs	r3, #2
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	2300      	movs	r3, #0
 800964e:	460a      	mov	r2, r1
 8009650:	4911      	ldr	r1, [pc, #68]	@ (8009698 <xTimerCreateTimerTask+0x88>)
 8009652:	4812      	ldr	r0, [pc, #72]	@ (800969c <xTimerCreateTimerTask+0x8c>)
 8009654:	f7ff f8c6 	bl	80087e4 <xTaskCreateStatic>
 8009658:	4603      	mov	r3, r0
 800965a:	4a11      	ldr	r2, [pc, #68]	@ (80096a0 <xTimerCreateTimerTask+0x90>)
 800965c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800965e:	4b10      	ldr	r3, [pc, #64]	@ (80096a0 <xTimerCreateTimerTask+0x90>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009666:	2301      	movs	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10b      	bne.n	8009688 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	613b      	str	r3, [r7, #16]
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	e7fd      	b.n	8009684 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009688:	697b      	ldr	r3, [r7, #20]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	2000119c 	.word	0x2000119c
 8009698:	0800bd34 	.word	0x0800bd34
 800969c:	080097dd 	.word	0x080097dd
 80096a0:	200011a0 	.word	0x200011a0

080096a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08a      	sub	sp, #40	@ 0x28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <xTimerGenericCommand+0x30>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	623b      	str	r3, [r7, #32]
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096d4:	4b19      	ldr	r3, [pc, #100]	@ (800973c <xTimerGenericCommand+0x98>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d02a      	beq.n	8009732 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	dc18      	bgt.n	8009720 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096ee:	f7ff fead 	bl	800944c <xTaskGetSchedulerState>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d109      	bne.n	800970c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096f8:	4b10      	ldr	r3, [pc, #64]	@ (800973c <xTimerGenericCommand+0x98>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	f107 0110 	add.w	r1, r7, #16
 8009700:	2300      	movs	r3, #0
 8009702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009704:	f7fe fc7e 	bl	8008004 <xQueueGenericSend>
 8009708:	6278      	str	r0, [r7, #36]	@ 0x24
 800970a:	e012      	b.n	8009732 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800970c:	4b0b      	ldr	r3, [pc, #44]	@ (800973c <xTimerGenericCommand+0x98>)
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	f107 0110 	add.w	r1, r7, #16
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	f7fe fc74 	bl	8008004 <xQueueGenericSend>
 800971c:	6278      	str	r0, [r7, #36]	@ 0x24
 800971e:	e008      	b.n	8009732 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009720:	4b06      	ldr	r3, [pc, #24]	@ (800973c <xTimerGenericCommand+0x98>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	f107 0110 	add.w	r1, r7, #16
 8009728:	2300      	movs	r3, #0
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	f7fe fd6c 	bl	8008208 <xQueueGenericSendFromISR>
 8009730:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009734:	4618      	mov	r0, r3
 8009736:	3728      	adds	r7, #40	@ 0x28
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	2000119c 	.word	0x2000119c

08009740 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af02      	add	r7, sp, #8
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974a:	4b23      	ldr	r3, [pc, #140]	@ (80097d8 <prvProcessExpiredTimer+0x98>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fe fb1f 	bl	8007d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d023      	beq.n	80097b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	18d1      	adds	r1, r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	6978      	ldr	r0, [r7, #20]
 800977a:	f000 f8d5 	bl	8009928 <prvInsertTimerInActiveList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d020      	beq.n	80097c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009784:	2300      	movs	r3, #0
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2300      	movs	r3, #0
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	2100      	movs	r1, #0
 800978e:	6978      	ldr	r0, [r7, #20]
 8009790:	f7ff ff88 	bl	80096a4 <xTimerGenericCommand>
 8009794:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d114      	bne.n	80097c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	60fb      	str	r3, [r7, #12]
}
 80097ae:	bf00      	nop
 80097b0:	bf00      	nop
 80097b2:	e7fd      	b.n	80097b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	6978      	ldr	r0, [r7, #20]
 80097cc:	4798      	blx	r3
}
 80097ce:	bf00      	nop
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20001194 	.word	0x20001194

080097dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 f859 	bl	80098a0 <prvGetNextExpireTime>
 80097ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	4619      	mov	r1, r3
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f805 	bl	8009804 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097fa:	f000 f8d7 	bl	80099ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097fe:	bf00      	nop
 8009800:	e7f0      	b.n	80097e4 <prvTimerTask+0x8>
	...

08009804 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800980e:	f7ff fa2d 	bl	8008c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	4618      	mov	r0, r3
 8009818:	f000 f866 	bl	80098e8 <prvSampleTimeNow>
 800981c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d130      	bne.n	8009886 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <prvProcessTimerOrBlockTask+0x3c>
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	429a      	cmp	r2, r3
 8009830:	d806      	bhi.n	8009840 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009832:	f7ff fa29 	bl	8008c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ff81 	bl	8009740 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800983e:	e024      	b.n	800988a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d008      	beq.n	8009858 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009846:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <prvProcessTimerOrBlockTask+0x90>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <prvProcessTimerOrBlockTask+0x50>
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <prvProcessTimerOrBlockTask+0x52>
 8009854:	2300      	movs	r3, #0
 8009856:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009858:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <prvProcessTimerOrBlockTask+0x94>)
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4619      	mov	r1, r3
 8009866:	f7fe ff89 	bl	800877c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800986a:	f7ff fa0d 	bl	8008c88 <xTaskResumeAll>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009874:	4b09      	ldr	r3, [pc, #36]	@ (800989c <prvProcessTimerOrBlockTask+0x98>)
 8009876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	f3bf 8f6f 	isb	sy
}
 8009884:	e001      	b.n	800988a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009886:	f7ff f9ff 	bl	8008c88 <xTaskResumeAll>
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20001198 	.word	0x20001198
 8009898:	2000119c 	.word	0x2000119c
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <prvGetNextExpireTime+0x44>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d101      	bne.n	80098b6 <prvGetNextExpireTime+0x16>
 80098b2:	2201      	movs	r2, #1
 80098b4:	e000      	b.n	80098b8 <prvGetNextExpireTime+0x18>
 80098b6:	2200      	movs	r2, #0
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098c4:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <prvGetNextExpireTime+0x44>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	60fb      	str	r3, [r7, #12]
 80098ce:	e001      	b.n	80098d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098d4:	68fb      	ldr	r3, [r7, #12]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20001194 	.word	0x20001194

080098e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098f0:	f7ff fa68 	bl	8008dc4 <xTaskGetTickCount>
 80098f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009924 <prvSampleTimeNow+0x3c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d205      	bcs.n	800990c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009900:	f000 f93a 	bl	8009b78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e002      	b.n	8009912 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009912:	4a04      	ldr	r2, [pc, #16]	@ (8009924 <prvSampleTimeNow+0x3c>)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009918:	68fb      	ldr	r3, [r7, #12]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	200011a4 	.word	0x200011a4

08009928 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009936:	2300      	movs	r3, #0
 8009938:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	429a      	cmp	r2, r3
 800994c:	d812      	bhi.n	8009974 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	1ad2      	subs	r2, r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	e01b      	b.n	800999a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009962:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <prvInsertTimerInActiveList+0x7c>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3304      	adds	r3, #4
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7fe f9dc 	bl	8007d2a <vListInsert>
 8009972:	e012      	b.n	800999a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d206      	bcs.n	800998a <prvInsertTimerInActiveList+0x62>
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d302      	bcc.n	800998a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e007      	b.n	800999a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800998a:	4b07      	ldr	r3, [pc, #28]	@ (80099a8 <prvInsertTimerInActiveList+0x80>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3304      	adds	r3, #4
 8009992:	4619      	mov	r1, r3
 8009994:	4610      	mov	r0, r2
 8009996:	f7fe f9c8 	bl	8007d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800999a:	697b      	ldr	r3, [r7, #20]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20001198 	.word	0x20001198
 80099a8:	20001194 	.word	0x20001194

080099ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08e      	sub	sp, #56	@ 0x38
 80099b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099b2:	e0ce      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da19      	bge.n	80099ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099ba:	1d3b      	adds	r3, r7, #4
 80099bc:	3304      	adds	r3, #4
 80099be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10b      	bne.n	80099de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	61fb      	str	r3, [r7, #28]
}
 80099d8:	bf00      	nop
 80099da:	bf00      	nop
 80099dc:	e7fd      	b.n	80099da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e4:	6850      	ldr	r0, [r2, #4]
 80099e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e8:	6892      	ldr	r2, [r2, #8]
 80099ea:	4611      	mov	r1, r2
 80099ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f2c0 80ae 	blt.w	8009b52 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d004      	beq.n	8009a0c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe f9c8 	bl	8007d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff ff6a 	bl	80098e8 <prvSampleTimeNow>
 8009a14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b09      	cmp	r3, #9
 8009a1a:	f200 8097 	bhi.w	8009b4c <prvProcessReceivedCommands+0x1a0>
 8009a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <prvProcessReceivedCommands+0x78>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a4d 	.word	0x08009a4d
 8009a2c:	08009a4d 	.word	0x08009a4d
 8009a30:	08009ac3 	.word	0x08009ac3
 8009a34:	08009ad7 	.word	0x08009ad7
 8009a38:	08009b23 	.word	0x08009b23
 8009a3c:	08009a4d 	.word	0x08009a4d
 8009a40:	08009a4d 	.word	0x08009a4d
 8009a44:	08009ac3 	.word	0x08009ac3
 8009a48:	08009ad7 	.word	0x08009ad7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	18d1      	adds	r1, r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a6c:	f7ff ff5c 	bl	8009928 <prvInsertTimerInActiveList>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d06c      	beq.n	8009b50 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a84:	f003 0304 	and.w	r3, r3, #4
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d061      	beq.n	8009b50 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	699b      	ldr	r3, [r3, #24]
 8009a92:	441a      	add	r2, r3
 8009a94:	2300      	movs	r3, #0
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a9e:	f7ff fe01 	bl	80096a4 <xTimerGenericCommand>
 8009aa2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d152      	bne.n	8009b50 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	61bb      	str	r3, [r7, #24]
}
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	e7fd      	b.n	8009abe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ac8:	f023 0301 	bic.w	r3, r3, #1
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ad4:	e03d      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009adc:	f043 0301 	orr.w	r3, r3, #1
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	617b      	str	r3, [r7, #20]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	18d1      	adds	r1, r2, r3
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1c:	f7ff ff04 	bl	8009928 <prvInsertTimerInActiveList>
					break;
 8009b20:	e017      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b32:	f000 fbe9 	bl	800a308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b36:	e00c      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b3e:	f023 0301 	bic.w	r3, r3, #1
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b4a:	e002      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009b4c:	bf00      	nop
 8009b4e:	e000      	b.n	8009b52 <prvProcessReceivedCommands+0x1a6>
					break;
 8009b50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b52:	4b08      	ldr	r3, [pc, #32]	@ (8009b74 <prvProcessReceivedCommands+0x1c8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	1d39      	adds	r1, r7, #4
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fbf2 	bl	8008344 <xQueueReceive>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f47f af26 	bne.w	80099b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	3730      	adds	r7, #48	@ 0x30
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	2000119c 	.word	0x2000119c

08009b78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b088      	sub	sp, #32
 8009b7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b7e:	e049      	b.n	8009c14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b80:	4b2e      	ldr	r3, [pc, #184]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	3304      	adds	r3, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f8ff 	bl	8007d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bac:	f003 0304 	and.w	r3, r3, #4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d02f      	beq.n	8009c14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	4413      	add	r3, r2
 8009bbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d90e      	bls.n	8009be4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe f8a4 	bl	8007d2a <vListInsert>
 8009be2:	e017      	b.n	8009c14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009be4:	2300      	movs	r3, #0
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	2300      	movs	r3, #0
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fd58 	bl	80096a4 <xTimerGenericCommand>
 8009bf4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10b      	bne.n	8009c14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c00:	f383 8811 	msr	BASEPRI, r3
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	603b      	str	r3, [r7, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	e7fd      	b.n	8009c10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c14:	4b09      	ldr	r3, [pc, #36]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1b0      	bne.n	8009b80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c1e:	4b07      	ldr	r3, [pc, #28]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c24:	4b06      	ldr	r3, [pc, #24]	@ (8009c40 <prvSwitchTimerLists+0xc8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a04      	ldr	r2, [pc, #16]	@ (8009c3c <prvSwitchTimerLists+0xc4>)
 8009c2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c2c:	4a04      	ldr	r2, [pc, #16]	@ (8009c40 <prvSwitchTimerLists+0xc8>)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	6013      	str	r3, [r2, #0]
}
 8009c32:	bf00      	nop
 8009c34:	3718      	adds	r7, #24
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20001194 	.word	0x20001194
 8009c40:	20001198 	.word	0x20001198

08009c44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c4a:	f000 f96d 	bl	8009f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d120      	bne.n	8009c98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c56:	4814      	ldr	r0, [pc, #80]	@ (8009ca8 <prvCheckForValidListAndQueue+0x64>)
 8009c58:	f7fe f816 	bl	8007c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c5c:	4813      	ldr	r0, [pc, #76]	@ (8009cac <prvCheckForValidListAndQueue+0x68>)
 8009c5e:	f7fe f813 	bl	8007c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c62:	4b13      	ldr	r3, [pc, #76]	@ (8009cb0 <prvCheckForValidListAndQueue+0x6c>)
 8009c64:	4a10      	ldr	r2, [pc, #64]	@ (8009ca8 <prvCheckForValidListAndQueue+0x64>)
 8009c66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c68:	4b12      	ldr	r3, [pc, #72]	@ (8009cb4 <prvCheckForValidListAndQueue+0x70>)
 8009c6a:	4a10      	ldr	r2, [pc, #64]	@ (8009cac <prvCheckForValidListAndQueue+0x68>)
 8009c6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c6e:	2300      	movs	r3, #0
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4b11      	ldr	r3, [pc, #68]	@ (8009cb8 <prvCheckForValidListAndQueue+0x74>)
 8009c74:	4a11      	ldr	r2, [pc, #68]	@ (8009cbc <prvCheckForValidListAndQueue+0x78>)
 8009c76:	2110      	movs	r1, #16
 8009c78:	200a      	movs	r0, #10
 8009c7a:	f7fe f923 	bl	8007ec4 <xQueueGenericCreateStatic>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a08      	ldr	r2, [pc, #32]	@ (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c84:	4b07      	ldr	r3, [pc, #28]	@ (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ca4 <prvCheckForValidListAndQueue+0x60>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	490b      	ldr	r1, [pc, #44]	@ (8009cc0 <prvCheckForValidListAndQueue+0x7c>)
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fd48 	bl	8008728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c98:	f000 f978 	bl	8009f8c <vPortExitCritical>
}
 8009c9c:	bf00      	nop
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	2000119c 	.word	0x2000119c
 8009ca8:	2000116c 	.word	0x2000116c
 8009cac:	20001180 	.word	0x20001180
 8009cb0:	20001194 	.word	0x20001194
 8009cb4:	20001198 	.word	0x20001198
 8009cb8:	20001248 	.word	0x20001248
 8009cbc:	200011a8 	.word	0x200011a8
 8009cc0:	0800bd3c 	.word	0x0800bd3c

08009cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3b04      	subs	r3, #4
 8009cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3b04      	subs	r3, #4
 8009ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f023 0201 	bic.w	r2, r3, #1
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8009d28 <pxPortInitialiseStack+0x64>)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	3b14      	subs	r3, #20
 8009cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3b04      	subs	r3, #4
 8009d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f06f 0202 	mvn.w	r2, #2
 8009d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3b20      	subs	r3, #32
 8009d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	08009d2d 	.word	0x08009d2d

08009d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <prvTaskExitError+0x58>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d00b      	beq.n	8009d58 <prvTaskExitError+0x2c>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	60fb      	str	r3, [r7, #12]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <prvTaskExitError+0x28>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	60bb      	str	r3, [r7, #8]
}
 8009d6a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d6c:	bf00      	nop
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0fc      	beq.n	8009d6e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	2000000c 	.word	0x2000000c
	...

08009d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d90:	4b07      	ldr	r3, [pc, #28]	@ (8009db0 <pxCurrentTCBConst2>)
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f380 8809 	msr	PSP, r0
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	4770      	bx	lr
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst2>:
 8009db0:	20000c6c 	.word	0x20000c6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009db8:	4808      	ldr	r0, [pc, #32]	@ (8009ddc <prvPortStartFirstTask+0x24>)
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	6800      	ldr	r0, [r0, #0]
 8009dbe:	f380 8808 	msr	MSP, r0
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8814 	msr	CONTROL, r0
 8009dca:	b662      	cpsie	i
 8009dcc:	b661      	cpsie	f
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	df00      	svc	0
 8009dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dda:	bf00      	nop
 8009ddc:	e000ed08 	.word	0xe000ed08

08009de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009de6:	4b47      	ldr	r3, [pc, #284]	@ (8009f04 <xPortStartScheduler+0x124>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a47      	ldr	r2, [pc, #284]	@ (8009f08 <xPortStartScheduler+0x128>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d10b      	bne.n	8009e08 <xPortStartScheduler+0x28>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	60fb      	str	r3, [r7, #12]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e08:	4b3e      	ldr	r3, [pc, #248]	@ (8009f04 <xPortStartScheduler+0x124>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f0c <xPortStartScheduler+0x12c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d10b      	bne.n	8009e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	613b      	str	r3, [r7, #16]
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e2a:	4b39      	ldr	r3, [pc, #228]	@ (8009f10 <xPortStartScheduler+0x130>)
 8009e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	22ff      	movs	r2, #255	@ 0xff
 8009e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	4b31      	ldr	r3, [pc, #196]	@ (8009f14 <xPortStartScheduler+0x134>)
 8009e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e52:	4b31      	ldr	r3, [pc, #196]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e54:	2207      	movs	r2, #7
 8009e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e58:	e009      	b.n	8009e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	4a2d      	ldr	r2, [pc, #180]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e76:	2b80      	cmp	r3, #128	@ 0x80
 8009e78:	d0ef      	beq.n	8009e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e7a:	4b27      	ldr	r3, [pc, #156]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f1c3 0307 	rsb	r3, r3, #7
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d00b      	beq.n	8009e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60bb      	str	r3, [r7, #8]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	021b      	lsls	r3, r3, #8
 8009ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009eb0:	4a19      	ldr	r2, [pc, #100]	@ (8009f18 <xPortStartScheduler+0x138>)
 8009eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ebc:	4b17      	ldr	r3, [pc, #92]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a16      	ldr	r2, [pc, #88]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ec8:	4b14      	ldr	r3, [pc, #80]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a13      	ldr	r2, [pc, #76]	@ (8009f1c <xPortStartScheduler+0x13c>)
 8009ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ed4:	f000 f8da 	bl	800a08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ed8:	4b11      	ldr	r3, [pc, #68]	@ (8009f20 <xPortStartScheduler+0x140>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ede:	f000 f8f9 	bl	800a0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ee2:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <xPortStartScheduler+0x144>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f24 <xPortStartScheduler+0x144>)
 8009ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eee:	f7ff ff63 	bl	8009db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ef2:	f7ff f839 	bl	8008f68 <vTaskSwitchContext>
	prvTaskExitError();
 8009ef6:	f7ff ff19 	bl	8009d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	e000ed00 	.word	0xe000ed00
 8009f08:	410fc271 	.word	0x410fc271
 8009f0c:	410fc270 	.word	0x410fc270
 8009f10:	e000e400 	.word	0xe000e400
 8009f14:	20001298 	.word	0x20001298
 8009f18:	2000129c 	.word	0x2000129c
 8009f1c:	e000ed20 	.word	0xe000ed20
 8009f20:	2000000c 	.word	0x2000000c
 8009f24:	e000ef34 	.word	0xe000ef34

08009f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	607b      	str	r3, [r7, #4]
}
 8009f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f42:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	4a0e      	ldr	r2, [pc, #56]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f84 <vPortEnterCritical+0x5c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d110      	bne.n	8009f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f54:	4b0c      	ldr	r3, [pc, #48]	@ (8009f88 <vPortEnterCritical+0x60>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00b      	beq.n	8009f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	603b      	str	r3, [r7, #0]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <vPortEnterCritical+0x4a>
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	2000000c 	.word	0x2000000c
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f92:	4b12      	ldr	r3, [pc, #72]	@ (8009fdc <vPortExitCritical+0x50>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10b      	bne.n	8009fb2 <vPortExitCritical+0x26>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	607b      	str	r3, [r7, #4]
}
 8009fac:	bf00      	nop
 8009fae:	bf00      	nop
 8009fb0:	e7fd      	b.n	8009fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	4a08      	ldr	r2, [pc, #32]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fbc:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <vPortExitCritical+0x50>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d105      	bne.n	8009fd0 <vPortExitCritical+0x44>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	f383 8811 	msr	BASEPRI, r3
}
 8009fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000000c 	.word	0x2000000c

08009fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fe0:	f3ef 8009 	mrs	r0, PSP
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4b15      	ldr	r3, [pc, #84]	@ (800a040 <pxCurrentTCBConst>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f01e 0f10 	tst.w	lr, #16
 8009ff0:	bf08      	it	eq
 8009ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffa:	6010      	str	r0, [r2, #0]
 8009ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a004:	f380 8811 	msr	BASEPRI, r0
 800a008:	f3bf 8f4f 	dsb	sy
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f7fe ffaa 	bl	8008f68 <vTaskSwitchContext>
 800a014:	f04f 0000 	mov.w	r0, #0
 800a018:	f380 8811 	msr	BASEPRI, r0
 800a01c:	bc09      	pop	{r0, r3}
 800a01e:	6819      	ldr	r1, [r3, #0]
 800a020:	6808      	ldr	r0, [r1, #0]
 800a022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a026:	f01e 0f10 	tst.w	lr, #16
 800a02a:	bf08      	it	eq
 800a02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a030:	f380 8809 	msr	PSP, r0
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	f3af 8000 	nop.w

0800a040 <pxCurrentTCBConst>:
 800a040:	20000c6c 	.word	0x20000c6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop

0800a048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a062:	f7fe febf 	bl	8008de4 <xTaskIncrementTick>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d003      	beq.n	800a074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a06c:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <xPortSysTickHandler+0x40>)
 800a06e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f383 8811 	msr	BASEPRI, r3
}
 800a07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a090:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a096:	4b0b      	ldr	r3, [pc, #44]	@ (800a0c4 <vPortSetupTimerInterrupt+0x38>)
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a09c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0c8 <vPortSetupTimerInterrupt+0x3c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0cc <vPortSetupTimerInterrupt+0x40>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	099b      	lsrs	r3, r3, #6
 800a0a8:	4a09      	ldr	r2, [pc, #36]	@ (800a0d0 <vPortSetupTimerInterrupt+0x44>)
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0ae:	4b04      	ldr	r3, [pc, #16]	@ (800a0c0 <vPortSetupTimerInterrupt+0x34>)
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	601a      	str	r2, [r3, #0]
}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	e000e010 	.word	0xe000e010
 800a0c4:	e000e018 	.word	0xe000e018
 800a0c8:	20000000 	.word	0x20000000
 800a0cc:	10624dd3 	.word	0x10624dd3
 800a0d0:	e000e014 	.word	0xe000e014

0800a0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0e4 <vPortEnableVFP+0x10>
 800a0d8:	6801      	ldr	r1, [r0, #0]
 800a0da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0de:	6001      	str	r1, [r0, #0]
 800a0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0e2:	bf00      	nop
 800a0e4:	e000ed88 	.word	0xe000ed88

0800a0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0ee:	f3ef 8305 	mrs	r3, IPSR
 800a0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b0f      	cmp	r3, #15
 800a0f8:	d915      	bls.n	800a126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0fa:	4a18      	ldr	r2, [pc, #96]	@ (800a15c <vPortValidateInterruptPriority+0x74>)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a104:	4b16      	ldr	r3, [pc, #88]	@ (800a160 <vPortValidateInterruptPriority+0x78>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	7afa      	ldrb	r2, [r7, #11]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d20b      	bcs.n	800a126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a126:	4b0f      	ldr	r3, [pc, #60]	@ (800a164 <vPortValidateInterruptPriority+0x7c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a12e:	4b0e      	ldr	r3, [pc, #56]	@ (800a168 <vPortValidateInterruptPriority+0x80>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d90b      	bls.n	800a14e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	603b      	str	r3, [r7, #0]
}
 800a148:	bf00      	nop
 800a14a:	bf00      	nop
 800a14c:	e7fd      	b.n	800a14a <vPortValidateInterruptPriority+0x62>
	}
 800a14e:	bf00      	nop
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	e000e3f0 	.word	0xe000e3f0
 800a160:	20001298 	.word	0x20001298
 800a164:	e000ed0c 	.word	0xe000ed0c
 800a168:	2000129c 	.word	0x2000129c

0800a16c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08a      	sub	sp, #40	@ 0x28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a178:	f7fe fd78 	bl	8008c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a17c:	4b5c      	ldr	r3, [pc, #368]	@ (800a2f0 <pvPortMalloc+0x184>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a184:	f000 f924 	bl	800a3d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a188:	4b5a      	ldr	r3, [pc, #360]	@ (800a2f4 <pvPortMalloc+0x188>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4013      	ands	r3, r2
 800a190:	2b00      	cmp	r3, #0
 800a192:	f040 8095 	bne.w	800a2c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d01e      	beq.n	800a1da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a19c:	2208      	movs	r2, #8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d015      	beq.n	800a1da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f023 0307 	bic.w	r3, r3, #7
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00b      	beq.n	800a1da <pvPortMalloc+0x6e>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	617b      	str	r3, [r7, #20]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d06f      	beq.n	800a2c0 <pvPortMalloc+0x154>
 800a1e0:	4b45      	ldr	r3, [pc, #276]	@ (800a2f8 <pvPortMalloc+0x18c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d86a      	bhi.n	800a2c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1ea:	4b44      	ldr	r3, [pc, #272]	@ (800a2fc <pvPortMalloc+0x190>)
 800a1ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1ee:	4b43      	ldr	r3, [pc, #268]	@ (800a2fc <pvPortMalloc+0x190>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1f4:	e004      	b.n	800a200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	429a      	cmp	r2, r3
 800a208:	d903      	bls.n	800a212 <pvPortMalloc+0xa6>
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f1      	bne.n	800a1f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a212:	4b37      	ldr	r3, [pc, #220]	@ (800a2f0 <pvPortMalloc+0x184>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a218:	429a      	cmp	r2, r3
 800a21a:	d051      	beq.n	800a2c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2208      	movs	r2, #8
 800a222:	4413      	add	r3, r2
 800a224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	1ad2      	subs	r2, r2, r3
 800a236:	2308      	movs	r3, #8
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d920      	bls.n	800a280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4413      	add	r3, r2
 800a244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	f003 0307 	and.w	r3, r3, #7
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00b      	beq.n	800a268 <pvPortMalloc+0xfc>
	__asm volatile
 800a250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a254:	f383 8811 	msr	BASEPRI, r3
 800a258:	f3bf 8f6f 	isb	sy
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	613b      	str	r3, [r7, #16]
}
 800a262:	bf00      	nop
 800a264:	bf00      	nop
 800a266:	e7fd      	b.n	800a264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a27a:	69b8      	ldr	r0, [r7, #24]
 800a27c:	f000 f90a 	bl	800a494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a280:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f8 <pvPortMalloc+0x18c>)
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f8 <pvPortMalloc+0x18c>)
 800a28c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a28e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f8 <pvPortMalloc+0x18c>)
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	4b1b      	ldr	r3, [pc, #108]	@ (800a300 <pvPortMalloc+0x194>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d203      	bcs.n	800a2a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a29a:	4b17      	ldr	r3, [pc, #92]	@ (800a2f8 <pvPortMalloc+0x18c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a18      	ldr	r2, [pc, #96]	@ (800a300 <pvPortMalloc+0x194>)
 800a2a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	4b13      	ldr	r3, [pc, #76]	@ (800a2f4 <pvPortMalloc+0x188>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2b6:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <pvPortMalloc+0x198>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	4a11      	ldr	r2, [pc, #68]	@ (800a304 <pvPortMalloc+0x198>)
 800a2be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2c0:	f7fe fce2 	bl	8008c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00b      	beq.n	800a2e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60fb      	str	r3, [r7, #12]
}
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
 800a2e4:	e7fd      	b.n	800a2e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20004ea8 	.word	0x20004ea8
 800a2f4:	20004ebc 	.word	0x20004ebc
 800a2f8:	20004eac 	.word	0x20004eac
 800a2fc:	20004ea0 	.word	0x20004ea0
 800a300:	20004eb0 	.word	0x20004eb0
 800a304:	20004eb4 	.word	0x20004eb4

0800a308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d04f      	beq.n	800a3ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a31a:	2308      	movs	r3, #8
 800a31c:	425b      	negs	r3, r3
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4413      	add	r3, r2
 800a322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4b25      	ldr	r3, [pc, #148]	@ (800a3c4 <vPortFree+0xbc>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4013      	ands	r3, r2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10b      	bne.n	800a34e <vPortFree+0x46>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	60fb      	str	r3, [r7, #12]
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	e7fd      	b.n	800a34a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00b      	beq.n	800a36e <vPortFree+0x66>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60bb      	str	r3, [r7, #8]
}
 800a368:	bf00      	nop
 800a36a:	bf00      	nop
 800a36c:	e7fd      	b.n	800a36a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	4b14      	ldr	r3, [pc, #80]	@ (800a3c4 <vPortFree+0xbc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01e      	beq.n	800a3ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d11a      	bne.n	800a3ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c4 <vPortFree+0xbc>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	43db      	mvns	r3, r3
 800a38e:	401a      	ands	r2, r3
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a394:	f7fe fc6a 	bl	8008c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c8 <vPortFree+0xc0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4a09      	ldr	r2, [pc, #36]	@ (800a3c8 <vPortFree+0xc0>)
 800a3a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f000 f874 	bl	800a494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3ac:	4b07      	ldr	r3, [pc, #28]	@ (800a3cc <vPortFree+0xc4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	4a06      	ldr	r2, [pc, #24]	@ (800a3cc <vPortFree+0xc4>)
 800a3b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3b6:	f7fe fc67 	bl	8008c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3ba:	bf00      	nop
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	20004ebc 	.word	0x20004ebc
 800a3c8:	20004eac 	.word	0x20004eac
 800a3cc:	20004eb8 	.word	0x20004eb8

0800a3d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a3da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3dc:	4b27      	ldr	r3, [pc, #156]	@ (800a47c <prvHeapInit+0xac>)
 800a3de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00c      	beq.n	800a404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	3307      	adds	r3, #7
 800a3ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 0307 	bic.w	r3, r3, #7
 800a3f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a47c <prvHeapInit+0xac>)
 800a400:	4413      	add	r3, r2
 800a402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a408:	4a1d      	ldr	r2, [pc, #116]	@ (800a480 <prvHeapInit+0xb0>)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a40e:	4b1c      	ldr	r3, [pc, #112]	@ (800a480 <prvHeapInit+0xb0>)
 800a410:	2200      	movs	r2, #0
 800a412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a41c:	2208      	movs	r2, #8
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1a9b      	subs	r3, r3, r2
 800a422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0307 	bic.w	r3, r3, #7
 800a42a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <prvHeapInit+0xb4>)
 800a430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a432:	4b14      	ldr	r3, [pc, #80]	@ (800a484 <prvHeapInit+0xb4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2200      	movs	r2, #0
 800a438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a43a:	4b12      	ldr	r3, [pc, #72]	@ (800a484 <prvHeapInit+0xb4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a450:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <prvHeapInit+0xb4>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	4a0a      	ldr	r2, [pc, #40]	@ (800a488 <prvHeapInit+0xb8>)
 800a45e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	4a09      	ldr	r2, [pc, #36]	@ (800a48c <prvHeapInit+0xbc>)
 800a466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a468:	4b09      	ldr	r3, [pc, #36]	@ (800a490 <prvHeapInit+0xc0>)
 800a46a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a46e:	601a      	str	r2, [r3, #0]
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	200012a0 	.word	0x200012a0
 800a480:	20004ea0 	.word	0x20004ea0
 800a484:	20004ea8 	.word	0x20004ea8
 800a488:	20004eb0 	.word	0x20004eb0
 800a48c:	20004eac 	.word	0x20004eac
 800a490:	20004ebc 	.word	0x20004ebc

0800a494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a49c:	4b28      	ldr	r3, [pc, #160]	@ (800a540 <prvInsertBlockIntoFreeList+0xac>)
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e002      	b.n	800a4a8 <prvInsertBlockIntoFreeList+0x14>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d8f7      	bhi.n	800a4a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d108      	bne.n	800a4d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	441a      	add	r2, r3
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	441a      	add	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d118      	bne.n	800a51c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b15      	ldr	r3, [pc, #84]	@ (800a544 <prvInsertBlockIntoFreeList+0xb0>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d00d      	beq.n	800a512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	441a      	add	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	e008      	b.n	800a524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a512:	4b0c      	ldr	r3, [pc, #48]	@ (800a544 <prvInsertBlockIntoFreeList+0xb0>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	e003      	b.n	800a524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d002      	beq.n	800a532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20004ea0 	.word	0x20004ea0
 800a544:	20004ea8 	.word	0x20004ea8

0800a548 <memset>:
 800a548:	4402      	add	r2, r0
 800a54a:	4603      	mov	r3, r0
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d100      	bne.n	800a552 <memset+0xa>
 800a550:	4770      	bx	lr
 800a552:	f803 1b01 	strb.w	r1, [r3], #1
 800a556:	e7f9      	b.n	800a54c <memset+0x4>

0800a558 <clock>:
 800a558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a55a:	4b08      	ldr	r3, [pc, #32]	@ (800a57c <clock+0x24>)
 800a55c:	4669      	mov	r1, sp
 800a55e:	6818      	ldr	r0, [r3, #0]
 800a560:	f000 f80e 	bl	800a580 <_times_r>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d006      	beq.n	800a576 <clock+0x1e>
 800a568:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a56c:	4418      	add	r0, r3
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	4418      	add	r0, r3
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	4418      	add	r0, r3
 800a576:	b005      	add	sp, #20
 800a578:	f85d fb04 	ldr.w	pc, [sp], #4
 800a57c:	20000010 	.word	0x20000010

0800a580 <_times_r>:
 800a580:	4608      	mov	r0, r1
 800a582:	f7fa baaf 	b.w	8004ae4 <_times>
	...

0800a588 <__errno>:
 800a588:	4b01      	ldr	r3, [pc, #4]	@ (800a590 <__errno+0x8>)
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000010 	.word	0x20000010

0800a594 <__libc_init_array>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	4d0d      	ldr	r5, [pc, #52]	@ (800a5cc <__libc_init_array+0x38>)
 800a598:	4c0d      	ldr	r4, [pc, #52]	@ (800a5d0 <__libc_init_array+0x3c>)
 800a59a:	1b64      	subs	r4, r4, r5
 800a59c:	10a4      	asrs	r4, r4, #2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	42a6      	cmp	r6, r4
 800a5a2:	d109      	bne.n	800a5b8 <__libc_init_array+0x24>
 800a5a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a5d4 <__libc_init_array+0x40>)
 800a5a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a5d8 <__libc_init_array+0x44>)
 800a5a8:	f001 fb80 	bl	800bcac <_init>
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	d105      	bne.n	800a5c2 <__libc_init_array+0x2e>
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5bc:	4798      	blx	r3
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__libc_init_array+0xc>
 800a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c6:	4798      	blx	r3
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	e7f2      	b.n	800a5b2 <__libc_init_array+0x1e>
 800a5cc:	0800c398 	.word	0x0800c398
 800a5d0:	0800c398 	.word	0x0800c398
 800a5d4:	0800c398 	.word	0x0800c398
 800a5d8:	0800c39c 	.word	0x0800c39c

0800a5dc <memcpy>:
 800a5dc:	440a      	add	r2, r1
 800a5de:	4291      	cmp	r1, r2
 800a5e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5e4:	d100      	bne.n	800a5e8 <memcpy+0xc>
 800a5e6:	4770      	bx	lr
 800a5e8:	b510      	push	{r4, lr}
 800a5ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5f2:	4291      	cmp	r1, r2
 800a5f4:	d1f9      	bne.n	800a5ea <memcpy+0xe>
 800a5f6:	bd10      	pop	{r4, pc}

0800a5f8 <asinf>:
 800a5f8:	b508      	push	{r3, lr}
 800a5fa:	ed2d 8b02 	vpush	{d8}
 800a5fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a602:	f000 f9c5 	bl	800a990 <__ieee754_asinf>
 800a606:	eeb4 8a48 	vcmp.f32	s16, s16
 800a60a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60e:	eef0 8a40 	vmov.f32	s17, s0
 800a612:	d615      	bvs.n	800a640 <asinf+0x48>
 800a614:	eeb0 0a48 	vmov.f32	s0, s16
 800a618:	f000 f8b8 	bl	800a78c <fabsf>
 800a61c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a620:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a628:	dd0a      	ble.n	800a640 <asinf+0x48>
 800a62a:	f7ff ffad 	bl	800a588 <__errno>
 800a62e:	ecbd 8b02 	vpop	{d8}
 800a632:	2321      	movs	r3, #33	@ 0x21
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a63a:	4804      	ldr	r0, [pc, #16]	@ (800a64c <asinf+0x54>)
 800a63c:	f000 b8fe 	b.w	800a83c <nanf>
 800a640:	eeb0 0a68 	vmov.f32	s0, s17
 800a644:	ecbd 8b02 	vpop	{d8}
 800a648:	bd08      	pop	{r3, pc}
 800a64a:	bf00      	nop
 800a64c:	0800bf6c 	.word	0x0800bf6c

0800a650 <atan2f>:
 800a650:	f000 ba82 	b.w	800ab58 <__ieee754_atan2f>

0800a654 <powf>:
 800a654:	b508      	push	{r3, lr}
 800a656:	ed2d 8b04 	vpush	{d8-d9}
 800a65a:	eeb0 8a60 	vmov.f32	s16, s1
 800a65e:	eeb0 9a40 	vmov.f32	s18, s0
 800a662:	f000 fb19 	bl	800ac98 <__ieee754_powf>
 800a666:	eeb4 8a48 	vcmp.f32	s16, s16
 800a66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66e:	eef0 8a40 	vmov.f32	s17, s0
 800a672:	d63e      	bvs.n	800a6f2 <powf+0x9e>
 800a674:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67c:	d112      	bne.n	800a6a4 <powf+0x50>
 800a67e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a686:	d039      	beq.n	800a6fc <powf+0xa8>
 800a688:	eeb0 0a48 	vmov.f32	s0, s16
 800a68c:	f000 f8cc 	bl	800a828 <finitef>
 800a690:	b378      	cbz	r0, 800a6f2 <powf+0x9e>
 800a692:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	d52a      	bpl.n	800a6f2 <powf+0x9e>
 800a69c:	f7ff ff74 	bl	800a588 <__errno>
 800a6a0:	2322      	movs	r3, #34	@ 0x22
 800a6a2:	e014      	b.n	800a6ce <powf+0x7a>
 800a6a4:	f000 f8c0 	bl	800a828 <finitef>
 800a6a8:	b998      	cbnz	r0, 800a6d2 <powf+0x7e>
 800a6aa:	eeb0 0a49 	vmov.f32	s0, s18
 800a6ae:	f000 f8bb 	bl	800a828 <finitef>
 800a6b2:	b170      	cbz	r0, 800a6d2 <powf+0x7e>
 800a6b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b8:	f000 f8b6 	bl	800a828 <finitef>
 800a6bc:	b148      	cbz	r0, 800a6d2 <powf+0x7e>
 800a6be:	eef4 8a68 	vcmp.f32	s17, s17
 800a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c6:	d7e9      	bvc.n	800a69c <powf+0x48>
 800a6c8:	f7ff ff5e 	bl	800a588 <__errno>
 800a6cc:	2321      	movs	r3, #33	@ 0x21
 800a6ce:	6003      	str	r3, [r0, #0]
 800a6d0:	e00f      	b.n	800a6f2 <powf+0x9e>
 800a6d2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	d10a      	bne.n	800a6f2 <powf+0x9e>
 800a6dc:	eeb0 0a49 	vmov.f32	s0, s18
 800a6e0:	f000 f8a2 	bl	800a828 <finitef>
 800a6e4:	b128      	cbz	r0, 800a6f2 <powf+0x9e>
 800a6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ea:	f000 f89d 	bl	800a828 <finitef>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d1d4      	bne.n	800a69c <powf+0x48>
 800a6f2:	eeb0 0a68 	vmov.f32	s0, s17
 800a6f6:	ecbd 8b04 	vpop	{d8-d9}
 800a6fa:	bd08      	pop	{r3, pc}
 800a6fc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a700:	e7f7      	b.n	800a6f2 <powf+0x9e>
	...

0800a704 <cosf>:
 800a704:	ee10 3a10 	vmov	r3, s0
 800a708:	b507      	push	{r0, r1, r2, lr}
 800a70a:	4a1e      	ldr	r2, [pc, #120]	@ (800a784 <cosf+0x80>)
 800a70c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a710:	4293      	cmp	r3, r2
 800a712:	d806      	bhi.n	800a722 <cosf+0x1e>
 800a714:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a788 <cosf+0x84>
 800a718:	b003      	add	sp, #12
 800a71a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a71e:	f000 b897 	b.w	800a850 <__kernel_cosf>
 800a722:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a726:	d304      	bcc.n	800a732 <cosf+0x2e>
 800a728:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a72c:	b003      	add	sp, #12
 800a72e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a732:	4668      	mov	r0, sp
 800a734:	f000 fd7e 	bl	800b234 <__ieee754_rem_pio2f>
 800a738:	f000 0003 	and.w	r0, r0, #3
 800a73c:	2801      	cmp	r0, #1
 800a73e:	d009      	beq.n	800a754 <cosf+0x50>
 800a740:	2802      	cmp	r0, #2
 800a742:	d010      	beq.n	800a766 <cosf+0x62>
 800a744:	b9b0      	cbnz	r0, 800a774 <cosf+0x70>
 800a746:	eddd 0a01 	vldr	s1, [sp, #4]
 800a74a:	ed9d 0a00 	vldr	s0, [sp]
 800a74e:	f000 f87f 	bl	800a850 <__kernel_cosf>
 800a752:	e7eb      	b.n	800a72c <cosf+0x28>
 800a754:	eddd 0a01 	vldr	s1, [sp, #4]
 800a758:	ed9d 0a00 	vldr	s0, [sp]
 800a75c:	f000 f8d0 	bl	800a900 <__kernel_sinf>
 800a760:	eeb1 0a40 	vneg.f32	s0, s0
 800a764:	e7e2      	b.n	800a72c <cosf+0x28>
 800a766:	eddd 0a01 	vldr	s1, [sp, #4]
 800a76a:	ed9d 0a00 	vldr	s0, [sp]
 800a76e:	f000 f86f 	bl	800a850 <__kernel_cosf>
 800a772:	e7f5      	b.n	800a760 <cosf+0x5c>
 800a774:	eddd 0a01 	vldr	s1, [sp, #4]
 800a778:	ed9d 0a00 	vldr	s0, [sp]
 800a77c:	2001      	movs	r0, #1
 800a77e:	f000 f8bf 	bl	800a900 <__kernel_sinf>
 800a782:	e7d3      	b.n	800a72c <cosf+0x28>
 800a784:	3f490fd8 	.word	0x3f490fd8
 800a788:	00000000 	.word	0x00000000

0800a78c <fabsf>:
 800a78c:	ee10 3a10 	vmov	r3, s0
 800a790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a794:	ee00 3a10 	vmov	s0, r3
 800a798:	4770      	bx	lr
	...

0800a79c <sinf>:
 800a79c:	ee10 3a10 	vmov	r3, s0
 800a7a0:	b507      	push	{r0, r1, r2, lr}
 800a7a2:	4a1f      	ldr	r2, [pc, #124]	@ (800a820 <sinf+0x84>)
 800a7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d807      	bhi.n	800a7bc <sinf+0x20>
 800a7ac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a824 <sinf+0x88>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	b003      	add	sp, #12
 800a7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b8:	f000 b8a2 	b.w	800a900 <__kernel_sinf>
 800a7bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a7c0:	d304      	bcc.n	800a7cc <sinf+0x30>
 800a7c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a7c6:	b003      	add	sp, #12
 800a7c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7cc:	4668      	mov	r0, sp
 800a7ce:	f000 fd31 	bl	800b234 <__ieee754_rem_pio2f>
 800a7d2:	f000 0003 	and.w	r0, r0, #3
 800a7d6:	2801      	cmp	r0, #1
 800a7d8:	d00a      	beq.n	800a7f0 <sinf+0x54>
 800a7da:	2802      	cmp	r0, #2
 800a7dc:	d00f      	beq.n	800a7fe <sinf+0x62>
 800a7de:	b9c0      	cbnz	r0, 800a812 <sinf+0x76>
 800a7e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7e4:	ed9d 0a00 	vldr	s0, [sp]
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	f000 f889 	bl	800a900 <__kernel_sinf>
 800a7ee:	e7ea      	b.n	800a7c6 <sinf+0x2a>
 800a7f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a7f4:	ed9d 0a00 	vldr	s0, [sp]
 800a7f8:	f000 f82a 	bl	800a850 <__kernel_cosf>
 800a7fc:	e7e3      	b.n	800a7c6 <sinf+0x2a>
 800a7fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800a802:	ed9d 0a00 	vldr	s0, [sp]
 800a806:	2001      	movs	r0, #1
 800a808:	f000 f87a 	bl	800a900 <__kernel_sinf>
 800a80c:	eeb1 0a40 	vneg.f32	s0, s0
 800a810:	e7d9      	b.n	800a7c6 <sinf+0x2a>
 800a812:	eddd 0a01 	vldr	s1, [sp, #4]
 800a816:	ed9d 0a00 	vldr	s0, [sp]
 800a81a:	f000 f819 	bl	800a850 <__kernel_cosf>
 800a81e:	e7f5      	b.n	800a80c <sinf+0x70>
 800a820:	3f490fd8 	.word	0x3f490fd8
 800a824:	00000000 	.word	0x00000000

0800a828 <finitef>:
 800a828:	ee10 3a10 	vmov	r3, s0
 800a82c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a830:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a834:	bfac      	ite	ge
 800a836:	2000      	movge	r0, #0
 800a838:	2001      	movlt	r0, #1
 800a83a:	4770      	bx	lr

0800a83c <nanf>:
 800a83c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a844 <nanf+0x8>
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	7fc00000 	.word	0x7fc00000

0800a848 <__ieee754_sqrtf>:
 800a848:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a84c:	4770      	bx	lr
	...

0800a850 <__kernel_cosf>:
 800a850:	ee10 3a10 	vmov	r3, s0
 800a854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a858:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a85c:	eef0 6a40 	vmov.f32	s13, s0
 800a860:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a864:	d204      	bcs.n	800a870 <__kernel_cosf+0x20>
 800a866:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a86a:	ee17 2a90 	vmov	r2, s15
 800a86e:	b342      	cbz	r2, 800a8c2 <__kernel_cosf+0x72>
 800a870:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a874:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800a8e0 <__kernel_cosf+0x90>
 800a878:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800a8e4 <__kernel_cosf+0x94>
 800a87c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8e8 <__kernel_cosf+0x98>)
 800a87e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a882:	4293      	cmp	r3, r2
 800a884:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a8ec <__kernel_cosf+0x9c>
 800a888:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a88c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800a8f0 <__kernel_cosf+0xa0>
 800a890:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a894:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a8f4 <__kernel_cosf+0xa4>
 800a898:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a89c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800a8f8 <__kernel_cosf+0xa8>
 800a8a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a8a4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800a8a8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a8ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a8b0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b8:	d804      	bhi.n	800a8c4 <__kernel_cosf+0x74>
 800a8ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a8be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8c2:	4770      	bx	lr
 800a8c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8fc <__kernel_cosf+0xac>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	bf9a      	itte	ls
 800a8ca:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800a8ce:	ee07 3a10 	vmovls	s14, r3
 800a8d2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800a8d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a8da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8de:	e7ec      	b.n	800a8ba <__kernel_cosf+0x6a>
 800a8e0:	ad47d74e 	.word	0xad47d74e
 800a8e4:	310f74f6 	.word	0x310f74f6
 800a8e8:	3e999999 	.word	0x3e999999
 800a8ec:	b493f27c 	.word	0xb493f27c
 800a8f0:	37d00d01 	.word	0x37d00d01
 800a8f4:	bab60b61 	.word	0xbab60b61
 800a8f8:	3d2aaaab 	.word	0x3d2aaaab
 800a8fc:	3f480000 	.word	0x3f480000

0800a900 <__kernel_sinf>:
 800a900:	ee10 3a10 	vmov	r3, s0
 800a904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a908:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a90c:	d204      	bcs.n	800a918 <__kernel_sinf+0x18>
 800a90e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a912:	ee17 3a90 	vmov	r3, s15
 800a916:	b35b      	cbz	r3, 800a970 <__kernel_sinf+0x70>
 800a918:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a91c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a974 <__kernel_sinf+0x74>
 800a920:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a978 <__kernel_sinf+0x78>
 800a924:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a928:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800a97c <__kernel_sinf+0x7c>
 800a92c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a930:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a980 <__kernel_sinf+0x80>
 800a934:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a938:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a984 <__kernel_sinf+0x84>
 800a93c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a940:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a944:	b930      	cbnz	r0, 800a954 <__kernel_sinf+0x54>
 800a946:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800a988 <__kernel_sinf+0x88>
 800a94a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a94e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a952:	4770      	bx	lr
 800a954:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a958:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a95c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a960:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a964:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a98c <__kernel_sinf+0x8c>
 800a968:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a96c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop
 800a974:	2f2ec9d3 	.word	0x2f2ec9d3
 800a978:	b2d72f34 	.word	0xb2d72f34
 800a97c:	3638ef1b 	.word	0x3638ef1b
 800a980:	b9500d01 	.word	0xb9500d01
 800a984:	3c088889 	.word	0x3c088889
 800a988:	be2aaaab 	.word	0xbe2aaaab
 800a98c:	3e2aaaab 	.word	0x3e2aaaab

0800a990 <__ieee754_asinf>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	ee10 5a10 	vmov	r5, s0
 800a996:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a99a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800a99e:	ed2d 8b04 	vpush	{d8-d9}
 800a9a2:	d10c      	bne.n	800a9be <__ieee754_asinf+0x2e>
 800a9a4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ab18 <__ieee754_asinf+0x188>
 800a9a8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800ab1c <__ieee754_asinf+0x18c>
 800a9ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a9b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a9b4:	eeb0 0a67 	vmov.f32	s0, s15
 800a9b8:	ecbd 8b04 	vpop	{d8-d9}
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	d904      	bls.n	800a9ca <__ieee754_asinf+0x3a>
 800a9c0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a9c4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a9c8:	e7f6      	b.n	800a9b8 <__ieee754_asinf+0x28>
 800a9ca:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800a9ce:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a9d2:	d20b      	bcs.n	800a9ec <__ieee754_asinf+0x5c>
 800a9d4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800a9d8:	d252      	bcs.n	800aa80 <__ieee754_asinf+0xf0>
 800a9da:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800ab20 <__ieee754_asinf+0x190>
 800a9de:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a9e2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ea:	dce5      	bgt.n	800a9b8 <__ieee754_asinf+0x28>
 800a9ec:	f7ff fece 	bl	800a78c <fabsf>
 800a9f0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800a9f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a9f8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a9fc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ab24 <__ieee754_asinf+0x194>
 800aa00:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800ab28 <__ieee754_asinf+0x198>
 800aa04:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800ab2c <__ieee754_asinf+0x19c>
 800aa08:	eea8 7a27 	vfma.f32	s14, s16, s15
 800aa0c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800ab30 <__ieee754_asinf+0x1a0>
 800aa10:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa14:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800ab34 <__ieee754_asinf+0x1a4>
 800aa18:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa1c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800ab38 <__ieee754_asinf+0x1a8>
 800aa20:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa24:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800ab3c <__ieee754_asinf+0x1ac>
 800aa28:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aa2c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800ab40 <__ieee754_asinf+0x1b0>
 800aa30:	eee8 7a07 	vfma.f32	s15, s16, s14
 800aa34:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800ab44 <__ieee754_asinf+0x1b4>
 800aa38:	eea7 7a88 	vfma.f32	s14, s15, s16
 800aa3c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800ab48 <__ieee754_asinf+0x1b8>
 800aa40:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aa44:	eeb0 0a48 	vmov.f32	s0, s16
 800aa48:	eee7 8a88 	vfma.f32	s17, s15, s16
 800aa4c:	f7ff fefc 	bl	800a848 <__ieee754_sqrtf>
 800aa50:	4b3e      	ldr	r3, [pc, #248]	@ (800ab4c <__ieee754_asinf+0x1bc>)
 800aa52:	ee29 9a08 	vmul.f32	s18, s18, s16
 800aa56:	429c      	cmp	r4, r3
 800aa58:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800aa5c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800aa60:	d93d      	bls.n	800aade <__ieee754_asinf+0x14e>
 800aa62:	eea0 0a06 	vfma.f32	s0, s0, s12
 800aa66:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800ab50 <__ieee754_asinf+0x1c0>
 800aa6a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800aa6e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800ab1c <__ieee754_asinf+0x18c>
 800aa72:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	bfd8      	it	le
 800aa7a:	eeb1 0a40 	vnegle.f32	s0, s0
 800aa7e:	e79b      	b.n	800a9b8 <__ieee754_asinf+0x28>
 800aa80:	ee60 7a00 	vmul.f32	s15, s0, s0
 800aa84:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800ab28 <__ieee754_asinf+0x198>
 800aa88:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ab24 <__ieee754_asinf+0x194>
 800aa8c:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800ab3c <__ieee754_asinf+0x1ac>
 800aa90:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800aa94:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ab30 <__ieee754_asinf+0x1a0>
 800aa98:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aa9c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800ab34 <__ieee754_asinf+0x1a4>
 800aaa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aaa4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800ab38 <__ieee754_asinf+0x1a8>
 800aaa8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aaac:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800ab2c <__ieee754_asinf+0x19c>
 800aab0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aab4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800ab40 <__ieee754_asinf+0x1b0>
 800aab8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800aabc:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800ab44 <__ieee754_asinf+0x1b4>
 800aac0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800aac4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800ab48 <__ieee754_asinf+0x1b8>
 800aac8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aacc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aad0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800aad4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800aad8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800aadc:	e76c      	b.n	800a9b8 <__ieee754_asinf+0x28>
 800aade:	ee10 3a10 	vmov	r3, s0
 800aae2:	f36f 030b 	bfc	r3, #0, #12
 800aae6:	ee07 3a10 	vmov	s14, r3
 800aaea:	eea7 8a47 	vfms.f32	s16, s14, s14
 800aaee:	ee70 5a00 	vadd.f32	s11, s0, s0
 800aaf2:	ee30 0a07 	vadd.f32	s0, s0, s14
 800aaf6:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ab18 <__ieee754_asinf+0x188>
 800aafa:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800aafe:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800ab54 <__ieee754_asinf+0x1c4>
 800ab02:	eee5 7a66 	vfms.f32	s15, s10, s13
 800ab06:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ab0a:	eeb0 6a40 	vmov.f32	s12, s0
 800ab0e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ab12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ab16:	e7ac      	b.n	800aa72 <__ieee754_asinf+0xe2>
 800ab18:	b33bbd2e 	.word	0xb33bbd2e
 800ab1c:	3fc90fdb 	.word	0x3fc90fdb
 800ab20:	7149f2ca 	.word	0x7149f2ca
 800ab24:	3a4f7f04 	.word	0x3a4f7f04
 800ab28:	3811ef08 	.word	0x3811ef08
 800ab2c:	3e2aaaab 	.word	0x3e2aaaab
 800ab30:	bd241146 	.word	0xbd241146
 800ab34:	3e4e0aa8 	.word	0x3e4e0aa8
 800ab38:	bea6b090 	.word	0xbea6b090
 800ab3c:	3d9dc62e 	.word	0x3d9dc62e
 800ab40:	bf303361 	.word	0xbf303361
 800ab44:	4001572d 	.word	0x4001572d
 800ab48:	c019d139 	.word	0xc019d139
 800ab4c:	3f799999 	.word	0x3f799999
 800ab50:	333bbd2e 	.word	0x333bbd2e
 800ab54:	3f490fdb 	.word	0x3f490fdb

0800ab58 <__ieee754_atan2f>:
 800ab58:	ee10 2a90 	vmov	r2, s1
 800ab5c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800ab60:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ab64:	b510      	push	{r4, lr}
 800ab66:	eef0 7a40 	vmov.f32	s15, s0
 800ab6a:	d806      	bhi.n	800ab7a <__ieee754_atan2f+0x22>
 800ab6c:	ee10 0a10 	vmov	r0, s0
 800ab70:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ab74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab78:	d904      	bls.n	800ab84 <__ieee754_atan2f+0x2c>
 800ab7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ab7e:	eeb0 0a67 	vmov.f32	s0, s15
 800ab82:	bd10      	pop	{r4, pc}
 800ab84:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ab88:	d103      	bne.n	800ab92 <__ieee754_atan2f+0x3a>
 800ab8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab8e:	f000 bc81 	b.w	800b494 <atanf>
 800ab92:	1794      	asrs	r4, r2, #30
 800ab94:	f004 0402 	and.w	r4, r4, #2
 800ab98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab9c:	b943      	cbnz	r3, 800abb0 <__ieee754_atan2f+0x58>
 800ab9e:	2c02      	cmp	r4, #2
 800aba0:	d05e      	beq.n	800ac60 <__ieee754_atan2f+0x108>
 800aba2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ac74 <__ieee754_atan2f+0x11c>
 800aba6:	2c03      	cmp	r4, #3
 800aba8:	bf08      	it	eq
 800abaa:	eef0 7a47 	vmoveq.f32	s15, s14
 800abae:	e7e6      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abb0:	b941      	cbnz	r1, 800abc4 <__ieee754_atan2f+0x6c>
 800abb2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800ac78 <__ieee754_atan2f+0x120>
 800abb6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ac7c <__ieee754_atan2f+0x124>
 800abba:	2800      	cmp	r0, #0
 800abbc:	bfa8      	it	ge
 800abbe:	eef0 7a47 	vmovge.f32	s15, s14
 800abc2:	e7dc      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abc4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800abc8:	d110      	bne.n	800abec <__ieee754_atan2f+0x94>
 800abca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800abce:	f104 34ff 	add.w	r4, r4, #4294967295
 800abd2:	d107      	bne.n	800abe4 <__ieee754_atan2f+0x8c>
 800abd4:	2c02      	cmp	r4, #2
 800abd6:	d846      	bhi.n	800ac66 <__ieee754_atan2f+0x10e>
 800abd8:	4b29      	ldr	r3, [pc, #164]	@ (800ac80 <__ieee754_atan2f+0x128>)
 800abda:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800abde:	edd3 7a00 	vldr	s15, [r3]
 800abe2:	e7cc      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800abe4:	2c02      	cmp	r4, #2
 800abe6:	d841      	bhi.n	800ac6c <__ieee754_atan2f+0x114>
 800abe8:	4b26      	ldr	r3, [pc, #152]	@ (800ac84 <__ieee754_atan2f+0x12c>)
 800abea:	e7f6      	b.n	800abda <__ieee754_atan2f+0x82>
 800abec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800abf0:	d0df      	beq.n	800abb2 <__ieee754_atan2f+0x5a>
 800abf2:	1a5b      	subs	r3, r3, r1
 800abf4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800abf8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800abfc:	da1a      	bge.n	800ac34 <__ieee754_atan2f+0xdc>
 800abfe:	2a00      	cmp	r2, #0
 800ac00:	da01      	bge.n	800ac06 <__ieee754_atan2f+0xae>
 800ac02:	313c      	adds	r1, #60	@ 0x3c
 800ac04:	db19      	blt.n	800ac3a <__ieee754_atan2f+0xe2>
 800ac06:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ac0a:	f7ff fdbf 	bl	800a78c <fabsf>
 800ac0e:	f000 fc41 	bl	800b494 <atanf>
 800ac12:	eef0 7a40 	vmov.f32	s15, s0
 800ac16:	2c01      	cmp	r4, #1
 800ac18:	d012      	beq.n	800ac40 <__ieee754_atan2f+0xe8>
 800ac1a:	2c02      	cmp	r4, #2
 800ac1c:	d017      	beq.n	800ac4e <__ieee754_atan2f+0xf6>
 800ac1e:	2c00      	cmp	r4, #0
 800ac20:	d0ad      	beq.n	800ab7e <__ieee754_atan2f+0x26>
 800ac22:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ac88 <__ieee754_atan2f+0x130>
 800ac26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac2a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac32:	e7a4      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac34:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ac7c <__ieee754_atan2f+0x124>
 800ac38:	e7ed      	b.n	800ac16 <__ieee754_atan2f+0xbe>
 800ac3a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ac90 <__ieee754_atan2f+0x138>
 800ac3e:	e7ea      	b.n	800ac16 <__ieee754_atan2f+0xbe>
 800ac40:	ee17 3a90 	vmov	r3, s15
 800ac44:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ac48:	ee07 3a90 	vmov	s15, r3
 800ac4c:	e797      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac4e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ac88 <__ieee754_atan2f+0x130>
 800ac52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac56:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac5e:	e78e      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac60:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800ac8c <__ieee754_atan2f+0x134>
 800ac64:	e78b      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac66:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800ac94 <__ieee754_atan2f+0x13c>
 800ac6a:	e788      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac6c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ac90 <__ieee754_atan2f+0x138>
 800ac70:	e785      	b.n	800ab7e <__ieee754_atan2f+0x26>
 800ac72:	bf00      	nop
 800ac74:	c0490fdb 	.word	0xc0490fdb
 800ac78:	bfc90fdb 	.word	0xbfc90fdb
 800ac7c:	3fc90fdb 	.word	0x3fc90fdb
 800ac80:	0800bf7c 	.word	0x0800bf7c
 800ac84:	0800bf70 	.word	0x0800bf70
 800ac88:	33bbbd2e 	.word	0x33bbbd2e
 800ac8c:	40490fdb 	.word	0x40490fdb
 800ac90:	00000000 	.word	0x00000000
 800ac94:	3f490fdb 	.word	0x3f490fdb

0800ac98 <__ieee754_powf>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	ee10 4a90 	vmov	r4, s1
 800aca0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800aca4:	ed2d 8b02 	vpush	{d8}
 800aca8:	ee10 6a10 	vmov	r6, s0
 800acac:	eeb0 8a40 	vmov.f32	s16, s0
 800acb0:	eef0 8a60 	vmov.f32	s17, s1
 800acb4:	d10c      	bne.n	800acd0 <__ieee754_powf+0x38>
 800acb6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800acba:	0076      	lsls	r6, r6, #1
 800acbc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800acc0:	f240 8274 	bls.w	800b1ac <__ieee754_powf+0x514>
 800acc4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800acc8:	ecbd 8b02 	vpop	{d8}
 800accc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800acd4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800acd8:	d802      	bhi.n	800ace0 <__ieee754_powf+0x48>
 800acda:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800acde:	d908      	bls.n	800acf2 <__ieee754_powf+0x5a>
 800ace0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ace4:	d1ee      	bne.n	800acc4 <__ieee754_powf+0x2c>
 800ace6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800acea:	0064      	lsls	r4, r4, #1
 800acec:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800acf0:	e7e6      	b.n	800acc0 <__ieee754_powf+0x28>
 800acf2:	2e00      	cmp	r6, #0
 800acf4:	da1f      	bge.n	800ad36 <__ieee754_powf+0x9e>
 800acf6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800acfa:	f080 8260 	bcs.w	800b1be <__ieee754_powf+0x526>
 800acfe:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ad02:	d32f      	bcc.n	800ad64 <__ieee754_powf+0xcc>
 800ad04:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ad08:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ad0c:	fa49 f503 	asr.w	r5, r9, r3
 800ad10:	fa05 f303 	lsl.w	r3, r5, r3
 800ad14:	454b      	cmp	r3, r9
 800ad16:	d123      	bne.n	800ad60 <__ieee754_powf+0xc8>
 800ad18:	f005 0501 	and.w	r5, r5, #1
 800ad1c:	f1c5 0502 	rsb	r5, r5, #2
 800ad20:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ad24:	d11f      	bne.n	800ad66 <__ieee754_powf+0xce>
 800ad26:	2c00      	cmp	r4, #0
 800ad28:	f280 8246 	bge.w	800b1b8 <__ieee754_powf+0x520>
 800ad2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ad30:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ad34:	e7c8      	b.n	800acc8 <__ieee754_powf+0x30>
 800ad36:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ad3a:	d111      	bne.n	800ad60 <__ieee754_powf+0xc8>
 800ad3c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ad40:	f000 8234 	beq.w	800b1ac <__ieee754_powf+0x514>
 800ad44:	d906      	bls.n	800ad54 <__ieee754_powf+0xbc>
 800ad46:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800b05c <__ieee754_powf+0x3c4>
 800ad4a:	2c00      	cmp	r4, #0
 800ad4c:	bfa8      	it	ge
 800ad4e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ad52:	e7b9      	b.n	800acc8 <__ieee754_powf+0x30>
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	f280 822c 	bge.w	800b1b2 <__ieee754_powf+0x51a>
 800ad5a:	eeb1 0a68 	vneg.f32	s0, s17
 800ad5e:	e7b3      	b.n	800acc8 <__ieee754_powf+0x30>
 800ad60:	2500      	movs	r5, #0
 800ad62:	e7dd      	b.n	800ad20 <__ieee754_powf+0x88>
 800ad64:	2500      	movs	r5, #0
 800ad66:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ad6a:	d102      	bne.n	800ad72 <__ieee754_powf+0xda>
 800ad6c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ad70:	e7aa      	b.n	800acc8 <__ieee754_powf+0x30>
 800ad72:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ad76:	f040 8227 	bne.w	800b1c8 <__ieee754_powf+0x530>
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	f2c0 8224 	blt.w	800b1c8 <__ieee754_powf+0x530>
 800ad80:	eeb0 0a48 	vmov.f32	s0, s16
 800ad84:	ecbd 8b02 	vpop	{d8}
 800ad88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	f7ff bd5c 	b.w	800a848 <__ieee754_sqrtf>
 800ad90:	2d01      	cmp	r5, #1
 800ad92:	d199      	bne.n	800acc8 <__ieee754_powf+0x30>
 800ad94:	eeb1 0a40 	vneg.f32	s0, s0
 800ad98:	e796      	b.n	800acc8 <__ieee754_powf+0x30>
 800ad9a:	0ff0      	lsrs	r0, r6, #31
 800ad9c:	3801      	subs	r0, #1
 800ad9e:	ea55 0300 	orrs.w	r3, r5, r0
 800ada2:	d104      	bne.n	800adae <__ieee754_powf+0x116>
 800ada4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ada8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800adac:	e78c      	b.n	800acc8 <__ieee754_powf+0x30>
 800adae:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800adb2:	d96d      	bls.n	800ae90 <__ieee754_powf+0x1f8>
 800adb4:	4baa      	ldr	r3, [pc, #680]	@ (800b060 <__ieee754_powf+0x3c8>)
 800adb6:	4598      	cmp	r8, r3
 800adb8:	d808      	bhi.n	800adcc <__ieee754_powf+0x134>
 800adba:	2c00      	cmp	r4, #0
 800adbc:	da0b      	bge.n	800add6 <__ieee754_powf+0x13e>
 800adbe:	2000      	movs	r0, #0
 800adc0:	ecbd 8b02 	vpop	{d8}
 800adc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	f000 bcbe 	b.w	800b748 <__math_oflowf>
 800adcc:	4ba5      	ldr	r3, [pc, #660]	@ (800b064 <__ieee754_powf+0x3cc>)
 800adce:	4598      	cmp	r8, r3
 800add0:	d908      	bls.n	800ade4 <__ieee754_powf+0x14c>
 800add2:	2c00      	cmp	r4, #0
 800add4:	dcf3      	bgt.n	800adbe <__ieee754_powf+0x126>
 800add6:	2000      	movs	r0, #0
 800add8:	ecbd 8b02 	vpop	{d8}
 800addc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade0:	f000 bcac 	b.w	800b73c <__math_uflowf>
 800ade4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ade8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800adec:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800b068 <__ieee754_powf+0x3d0>
 800adf0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800adf4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800adf8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800adfc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ae00:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae04:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800b06c <__ieee754_powf+0x3d4>
 800ae08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae0c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800b070 <__ieee754_powf+0x3d8>
 800ae10:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800ae14:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800b074 <__ieee754_powf+0x3dc>
 800ae18:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae1c:	eeb0 7a67 	vmov.f32	s14, s15
 800ae20:	eea0 7a26 	vfma.f32	s14, s0, s13
 800ae24:	ee17 3a10 	vmov	r3, s14
 800ae28:	f36f 030b 	bfc	r3, #0, #12
 800ae2c:	ee07 3a10 	vmov	s14, r3
 800ae30:	eeb0 6a47 	vmov.f32	s12, s14
 800ae34:	eea0 6a66 	vfms.f32	s12, s0, s13
 800ae38:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ae3c:	3d01      	subs	r5, #1
 800ae3e:	4305      	orrs	r5, r0
 800ae40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae44:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800ae48:	f36f 040b 	bfc	r4, #0, #12
 800ae4c:	bf18      	it	ne
 800ae4e:	eeb0 8a66 	vmovne.f32	s16, s13
 800ae52:	ee06 4a90 	vmov	s13, r4
 800ae56:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ae5a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800ae5e:	ee67 7a26 	vmul.f32	s15, s14, s13
 800ae62:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ae66:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ae6a:	ee17 1a10 	vmov	r1, s14
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae74:	f340 80dd 	ble.w	800b032 <__ieee754_powf+0x39a>
 800ae78:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ae7c:	f240 80ca 	bls.w	800b014 <__ieee754_powf+0x37c>
 800ae80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ae84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae88:	bf4c      	ite	mi
 800ae8a:	2001      	movmi	r0, #1
 800ae8c:	2000      	movpl	r0, #0
 800ae8e:	e797      	b.n	800adc0 <__ieee754_powf+0x128>
 800ae90:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ae94:	bf01      	itttt	eq
 800ae96:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b078 <__ieee754_powf+0x3e0>
 800ae9a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ae9e:	f06f 0317 	mvneq.w	r3, #23
 800aea2:	ee17 7a90 	vmoveq	r7, s15
 800aea6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800aeaa:	bf18      	it	ne
 800aeac:	2300      	movne	r3, #0
 800aeae:	3a7f      	subs	r2, #127	@ 0x7f
 800aeb0:	441a      	add	r2, r3
 800aeb2:	4b72      	ldr	r3, [pc, #456]	@ (800b07c <__ieee754_powf+0x3e4>)
 800aeb4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800aeb8:	429f      	cmp	r7, r3
 800aeba:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800aebe:	dd06      	ble.n	800aece <__ieee754_powf+0x236>
 800aec0:	4b6f      	ldr	r3, [pc, #444]	@ (800b080 <__ieee754_powf+0x3e8>)
 800aec2:	429f      	cmp	r7, r3
 800aec4:	f340 80a4 	ble.w	800b010 <__ieee754_powf+0x378>
 800aec8:	3201      	adds	r2, #1
 800aeca:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800aece:	2600      	movs	r6, #0
 800aed0:	4b6c      	ldr	r3, [pc, #432]	@ (800b084 <__ieee754_powf+0x3ec>)
 800aed2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800aed6:	ee07 1a10 	vmov	s14, r1
 800aeda:	edd3 5a00 	vldr	s11, [r3]
 800aede:	4b6a      	ldr	r3, [pc, #424]	@ (800b088 <__ieee754_powf+0x3f0>)
 800aee0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800aee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aee8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800aeec:	1049      	asrs	r1, r1, #1
 800aeee:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800aef2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800aef6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800aefa:	ee37 6a65 	vsub.f32	s12, s14, s11
 800aefe:	ee07 1a90 	vmov	s15, r1
 800af02:	ee26 5a24 	vmul.f32	s10, s12, s9
 800af06:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800af0a:	ee15 7a10 	vmov	r7, s10
 800af0e:	401f      	ands	r7, r3
 800af10:	ee06 7a90 	vmov	s13, r7
 800af14:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800af18:	ee37 7a65 	vsub.f32	s14, s14, s11
 800af1c:	ee65 7a05 	vmul.f32	s15, s10, s10
 800af20:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800af24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b08c <__ieee754_powf+0x3f4>
 800af28:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b090 <__ieee754_powf+0x3f8>
 800af2c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800af30:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b094 <__ieee754_powf+0x3fc>
 800af34:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800af38:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b068 <__ieee754_powf+0x3d0>
 800af3c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800af40:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b098 <__ieee754_powf+0x400>
 800af44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800af48:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b09c <__ieee754_powf+0x404>
 800af4c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800af50:	eee7 5a27 	vfma.f32	s11, s14, s15
 800af54:	ee35 7a26 	vadd.f32	s14, s10, s13
 800af58:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800af5c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800af60:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800af64:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800af68:	eef0 5a67 	vmov.f32	s11, s15
 800af6c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800af70:	ee75 5a87 	vadd.f32	s11, s11, s14
 800af74:	ee15 1a90 	vmov	r1, s11
 800af78:	4019      	ands	r1, r3
 800af7a:	ee05 1a90 	vmov	s11, r1
 800af7e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800af82:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800af86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800af8e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800af92:	eeb0 6a67 	vmov.f32	s12, s15
 800af96:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800af9a:	ee16 1a10 	vmov	r1, s12
 800af9e:	4019      	ands	r1, r3
 800afa0:	ee06 1a10 	vmov	s12, r1
 800afa4:	eeb0 7a46 	vmov.f32	s14, s12
 800afa8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800afac:	493c      	ldr	r1, [pc, #240]	@ (800b0a0 <__ieee754_powf+0x408>)
 800afae:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800afb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afb6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b0a4 <__ieee754_powf+0x40c>
 800afba:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b0a8 <__ieee754_powf+0x410>
 800afbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b0ac <__ieee754_powf+0x414>
 800afc6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800afca:	ed91 7a00 	vldr	s14, [r1]
 800afce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afd2:	ee07 2a10 	vmov	s14, r2
 800afd6:	4a36      	ldr	r2, [pc, #216]	@ (800b0b0 <__ieee754_powf+0x418>)
 800afd8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800afdc:	eeb0 7a67 	vmov.f32	s14, s15
 800afe0:	eea6 7a25 	vfma.f32	s14, s12, s11
 800afe4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800afe8:	ed92 5a00 	vldr	s10, [r2]
 800afec:	ee37 7a05 	vadd.f32	s14, s14, s10
 800aff0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800aff4:	ee17 2a10 	vmov	r2, s14
 800aff8:	401a      	ands	r2, r3
 800affa:	ee07 2a10 	vmov	s14, r2
 800affe:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b002:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800b006:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b00a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b00e:	e715      	b.n	800ae3c <__ieee754_powf+0x1a4>
 800b010:	2601      	movs	r6, #1
 800b012:	e75d      	b.n	800aed0 <__ieee754_powf+0x238>
 800b014:	d152      	bne.n	800b0bc <__ieee754_powf+0x424>
 800b016:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b0b4 <__ieee754_powf+0x41c>
 800b01a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b01e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b022:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	f73f af29 	bgt.w	800ae80 <__ieee754_powf+0x1e8>
 800b02e:	2386      	movs	r3, #134	@ 0x86
 800b030:	e048      	b.n	800b0c4 <__ieee754_powf+0x42c>
 800b032:	4a21      	ldr	r2, [pc, #132]	@ (800b0b8 <__ieee754_powf+0x420>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d907      	bls.n	800b048 <__ieee754_powf+0x3b0>
 800b038:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b040:	bf4c      	ite	mi
 800b042:	2001      	movmi	r0, #1
 800b044:	2000      	movpl	r0, #0
 800b046:	e6c7      	b.n	800add8 <__ieee754_powf+0x140>
 800b048:	d138      	bne.n	800b0bc <__ieee754_powf+0x424>
 800b04a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b04e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b056:	dbea      	blt.n	800b02e <__ieee754_powf+0x396>
 800b058:	e7ee      	b.n	800b038 <__ieee754_powf+0x3a0>
 800b05a:	bf00      	nop
 800b05c:	00000000 	.word	0x00000000
 800b060:	3f7ffff3 	.word	0x3f7ffff3
 800b064:	3f800007 	.word	0x3f800007
 800b068:	3eaaaaab 	.word	0x3eaaaaab
 800b06c:	3fb8aa00 	.word	0x3fb8aa00
 800b070:	3fb8aa3b 	.word	0x3fb8aa3b
 800b074:	36eca570 	.word	0x36eca570
 800b078:	4b800000 	.word	0x4b800000
 800b07c:	001cc471 	.word	0x001cc471
 800b080:	005db3d6 	.word	0x005db3d6
 800b084:	0800bf98 	.word	0x0800bf98
 800b088:	fffff000 	.word	0xfffff000
 800b08c:	3e6c3255 	.word	0x3e6c3255
 800b090:	3e53f142 	.word	0x3e53f142
 800b094:	3e8ba305 	.word	0x3e8ba305
 800b098:	3edb6db7 	.word	0x3edb6db7
 800b09c:	3f19999a 	.word	0x3f19999a
 800b0a0:	0800bf88 	.word	0x0800bf88
 800b0a4:	3f76384f 	.word	0x3f76384f
 800b0a8:	3f763800 	.word	0x3f763800
 800b0ac:	369dc3a0 	.word	0x369dc3a0
 800b0b0:	0800bf90 	.word	0x0800bf90
 800b0b4:	3338aa3c 	.word	0x3338aa3c
 800b0b8:	43160000 	.word	0x43160000
 800b0bc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b0c0:	d96f      	bls.n	800b1a2 <__ieee754_powf+0x50a>
 800b0c2:	15db      	asrs	r3, r3, #23
 800b0c4:	3b7e      	subs	r3, #126	@ 0x7e
 800b0c6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b0ca:	4118      	asrs	r0, r3
 800b0cc:	4408      	add	r0, r1
 800b0ce:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b0d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b20c <__ieee754_powf+0x574>)
 800b0d4:	3b7f      	subs	r3, #127	@ 0x7f
 800b0d6:	411a      	asrs	r2, r3
 800b0d8:	4002      	ands	r2, r0
 800b0da:	ee07 2a10 	vmov	s14, r2
 800b0de:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b0e2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b0e6:	f1c3 0317 	rsb	r3, r3, #23
 800b0ea:	4118      	asrs	r0, r3
 800b0ec:	2900      	cmp	r1, #0
 800b0ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0f2:	bfb8      	it	lt
 800b0f4:	4240      	neglt	r0, r0
 800b0f6:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800b0fa:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800b210 <__ieee754_powf+0x578>
 800b0fe:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800b214 <__ieee754_powf+0x57c>
 800b102:	ee16 3a90 	vmov	r3, s13
 800b106:	f36f 030b 	bfc	r3, #0, #12
 800b10a:	ee06 3a90 	vmov	s13, r3
 800b10e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b112:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b116:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b11a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800b218 <__ieee754_powf+0x580>
 800b11e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b122:	eee0 7a87 	vfma.f32	s15, s1, s14
 800b126:	eeb0 7a67 	vmov.f32	s14, s15
 800b12a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800b12e:	eef0 5a47 	vmov.f32	s11, s14
 800b132:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800b136:	ee67 6a07 	vmul.f32	s13, s14, s14
 800b13a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b13e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800b21c <__ieee754_powf+0x584>
 800b142:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800b220 <__ieee754_powf+0x588>
 800b146:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b14a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800b224 <__ieee754_powf+0x58c>
 800b14e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b152:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800b228 <__ieee754_powf+0x590>
 800b156:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800b15a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b22c <__ieee754_powf+0x594>
 800b15e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800b162:	eeb0 6a47 	vmov.f32	s12, s14
 800b166:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800b16a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800b16e:	ee67 5a06 	vmul.f32	s11, s14, s12
 800b172:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b176:	eee7 7a27 	vfma.f32	s15, s14, s15
 800b17a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b17e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b186:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b18a:	ee10 3a10 	vmov	r3, s0
 800b18e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b196:	da06      	bge.n	800b1a6 <__ieee754_powf+0x50e>
 800b198:	f000 fa50 	bl	800b63c <scalbnf>
 800b19c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b1a0:	e592      	b.n	800acc8 <__ieee754_powf+0x30>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e7a7      	b.n	800b0f6 <__ieee754_powf+0x45e>
 800b1a6:	ee00 3a10 	vmov	s0, r3
 800b1aa:	e7f7      	b.n	800b19c <__ieee754_powf+0x504>
 800b1ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b1b0:	e58a      	b.n	800acc8 <__ieee754_powf+0x30>
 800b1b2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800b230 <__ieee754_powf+0x598>
 800b1b6:	e587      	b.n	800acc8 <__ieee754_powf+0x30>
 800b1b8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1bc:	e584      	b.n	800acc8 <__ieee754_powf+0x30>
 800b1be:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b1c2:	f43f adbb 	beq.w	800ad3c <__ieee754_powf+0xa4>
 800b1c6:	2502      	movs	r5, #2
 800b1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1cc:	f7ff fade 	bl	800a78c <fabsf>
 800b1d0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800b1d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b1d8:	4647      	mov	r7, r8
 800b1da:	d003      	beq.n	800b1e4 <__ieee754_powf+0x54c>
 800b1dc:	f1b8 0f00 	cmp.w	r8, #0
 800b1e0:	f47f addb 	bne.w	800ad9a <__ieee754_powf+0x102>
 800b1e4:	2c00      	cmp	r4, #0
 800b1e6:	bfbc      	itt	lt
 800b1e8:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800b1ec:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b1f0:	2e00      	cmp	r6, #0
 800b1f2:	f6bf ad69 	bge.w	800acc8 <__ieee754_powf+0x30>
 800b1f6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800b1fa:	ea58 0805 	orrs.w	r8, r8, r5
 800b1fe:	f47f adc7 	bne.w	800ad90 <__ieee754_powf+0xf8>
 800b202:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b206:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b20a:	e55d      	b.n	800acc8 <__ieee754_powf+0x30>
 800b20c:	ff800000 	.word	0xff800000
 800b210:	3f317218 	.word	0x3f317218
 800b214:	3f317200 	.word	0x3f317200
 800b218:	35bfbe8c 	.word	0x35bfbe8c
 800b21c:	b5ddea0e 	.word	0xb5ddea0e
 800b220:	3331bb4c 	.word	0x3331bb4c
 800b224:	388ab355 	.word	0x388ab355
 800b228:	bb360b61 	.word	0xbb360b61
 800b22c:	3e2aaaab 	.word	0x3e2aaaab
 800b230:	00000000 	.word	0x00000000

0800b234 <__ieee754_rem_pio2f>:
 800b234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b236:	ee10 6a10 	vmov	r6, s0
 800b23a:	4b88      	ldr	r3, [pc, #544]	@ (800b45c <__ieee754_rem_pio2f+0x228>)
 800b23c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b240:	429d      	cmp	r5, r3
 800b242:	b087      	sub	sp, #28
 800b244:	4604      	mov	r4, r0
 800b246:	d805      	bhi.n	800b254 <__ieee754_rem_pio2f+0x20>
 800b248:	2300      	movs	r3, #0
 800b24a:	ed80 0a00 	vstr	s0, [r0]
 800b24e:	6043      	str	r3, [r0, #4]
 800b250:	2000      	movs	r0, #0
 800b252:	e022      	b.n	800b29a <__ieee754_rem_pio2f+0x66>
 800b254:	4b82      	ldr	r3, [pc, #520]	@ (800b460 <__ieee754_rem_pio2f+0x22c>)
 800b256:	429d      	cmp	r5, r3
 800b258:	d83a      	bhi.n	800b2d0 <__ieee754_rem_pio2f+0x9c>
 800b25a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b25e:	2e00      	cmp	r6, #0
 800b260:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b464 <__ieee754_rem_pio2f+0x230>
 800b264:	4a80      	ldr	r2, [pc, #512]	@ (800b468 <__ieee754_rem_pio2f+0x234>)
 800b266:	f023 030f 	bic.w	r3, r3, #15
 800b26a:	dd18      	ble.n	800b29e <__ieee754_rem_pio2f+0x6a>
 800b26c:	4293      	cmp	r3, r2
 800b26e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b272:	bf09      	itett	eq
 800b274:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b46c <__ieee754_rem_pio2f+0x238>
 800b278:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b470 <__ieee754_rem_pio2f+0x23c>
 800b27c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b474 <__ieee754_rem_pio2f+0x240>
 800b280:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b284:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b28c:	ed80 7a00 	vstr	s14, [r0]
 800b290:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b294:	edc0 7a01 	vstr	s15, [r0, #4]
 800b298:	2001      	movs	r0, #1
 800b29a:	b007      	add	sp, #28
 800b29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b2a4:	bf09      	itett	eq
 800b2a6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b46c <__ieee754_rem_pio2f+0x238>
 800b2aa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b470 <__ieee754_rem_pio2f+0x23c>
 800b2ae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b474 <__ieee754_rem_pio2f+0x240>
 800b2b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b2b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b2ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2be:	ed80 7a00 	vstr	s14, [r0]
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ce:	e7e4      	b.n	800b29a <__ieee754_rem_pio2f+0x66>
 800b2d0:	4b69      	ldr	r3, [pc, #420]	@ (800b478 <__ieee754_rem_pio2f+0x244>)
 800b2d2:	429d      	cmp	r5, r3
 800b2d4:	d873      	bhi.n	800b3be <__ieee754_rem_pio2f+0x18a>
 800b2d6:	f7ff fa59 	bl	800a78c <fabsf>
 800b2da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b47c <__ieee754_rem_pio2f+0x248>
 800b2de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b2e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b2e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2ee:	ee17 0a90 	vmov	r0, s15
 800b2f2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b464 <__ieee754_rem_pio2f+0x230>
 800b2f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b2fa:	281f      	cmp	r0, #31
 800b2fc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b470 <__ieee754_rem_pio2f+0x23c>
 800b300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b304:	eeb1 6a47 	vneg.f32	s12, s14
 800b308:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b30c:	ee16 1a90 	vmov	r1, s13
 800b310:	dc09      	bgt.n	800b326 <__ieee754_rem_pio2f+0xf2>
 800b312:	4a5b      	ldr	r2, [pc, #364]	@ (800b480 <__ieee754_rem_pio2f+0x24c>)
 800b314:	1e47      	subs	r7, r0, #1
 800b316:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b31a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b31e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b322:	4293      	cmp	r3, r2
 800b324:	d107      	bne.n	800b336 <__ieee754_rem_pio2f+0x102>
 800b326:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b32a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b32e:	2a08      	cmp	r2, #8
 800b330:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b334:	dc14      	bgt.n	800b360 <__ieee754_rem_pio2f+0x12c>
 800b336:	6021      	str	r1, [r4, #0]
 800b338:	ed94 7a00 	vldr	s14, [r4]
 800b33c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b340:	2e00      	cmp	r6, #0
 800b342:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b346:	ed84 0a01 	vstr	s0, [r4, #4]
 800b34a:	daa6      	bge.n	800b29a <__ieee754_rem_pio2f+0x66>
 800b34c:	eeb1 7a47 	vneg.f32	s14, s14
 800b350:	eeb1 0a40 	vneg.f32	s0, s0
 800b354:	ed84 7a00 	vstr	s14, [r4]
 800b358:	ed84 0a01 	vstr	s0, [r4, #4]
 800b35c:	4240      	negs	r0, r0
 800b35e:	e79c      	b.n	800b29a <__ieee754_rem_pio2f+0x66>
 800b360:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b46c <__ieee754_rem_pio2f+0x238>
 800b364:	eef0 6a40 	vmov.f32	s13, s0
 800b368:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b36c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b370:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b374:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b474 <__ieee754_rem_pio2f+0x240>
 800b378:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b37c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b380:	ee15 2a90 	vmov	r2, s11
 800b384:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b388:	1a5b      	subs	r3, r3, r1
 800b38a:	2b19      	cmp	r3, #25
 800b38c:	dc04      	bgt.n	800b398 <__ieee754_rem_pio2f+0x164>
 800b38e:	edc4 5a00 	vstr	s11, [r4]
 800b392:	eeb0 0a66 	vmov.f32	s0, s13
 800b396:	e7cf      	b.n	800b338 <__ieee754_rem_pio2f+0x104>
 800b398:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b484 <__ieee754_rem_pio2f+0x250>
 800b39c:	eeb0 0a66 	vmov.f32	s0, s13
 800b3a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b3a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b3a8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b488 <__ieee754_rem_pio2f+0x254>
 800b3ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b3b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b3b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b3b8:	ed84 7a00 	vstr	s14, [r4]
 800b3bc:	e7bc      	b.n	800b338 <__ieee754_rem_pio2f+0x104>
 800b3be:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b3c2:	d306      	bcc.n	800b3d2 <__ieee754_rem_pio2f+0x19e>
 800b3c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b3c8:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3cc:	edc0 7a00 	vstr	s15, [r0]
 800b3d0:	e73e      	b.n	800b250 <__ieee754_rem_pio2f+0x1c>
 800b3d2:	15ea      	asrs	r2, r5, #23
 800b3d4:	3a86      	subs	r2, #134	@ 0x86
 800b3d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b3e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b48c <__ieee754_rem_pio2f+0x258>
 800b3e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b3ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b3f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b3f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b3fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b3fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b402:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b406:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b40a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	edcd 7a05 	vstr	s15, [sp, #20]
 800b416:	d11e      	bne.n	800b456 <__ieee754_rem_pio2f+0x222>
 800b418:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	bf0c      	ite	eq
 800b422:	2301      	moveq	r3, #1
 800b424:	2302      	movne	r3, #2
 800b426:	491a      	ldr	r1, [pc, #104]	@ (800b490 <__ieee754_rem_pio2f+0x25c>)
 800b428:	9101      	str	r1, [sp, #4]
 800b42a:	2102      	movs	r1, #2
 800b42c:	9100      	str	r1, [sp, #0]
 800b42e:	a803      	add	r0, sp, #12
 800b430:	4621      	mov	r1, r4
 800b432:	f000 f98f 	bl	800b754 <__kernel_rem_pio2f>
 800b436:	2e00      	cmp	r6, #0
 800b438:	f6bf af2f 	bge.w	800b29a <__ieee754_rem_pio2f+0x66>
 800b43c:	edd4 7a00 	vldr	s15, [r4]
 800b440:	eef1 7a67 	vneg.f32	s15, s15
 800b444:	edc4 7a00 	vstr	s15, [r4]
 800b448:	edd4 7a01 	vldr	s15, [r4, #4]
 800b44c:	eef1 7a67 	vneg.f32	s15, s15
 800b450:	edc4 7a01 	vstr	s15, [r4, #4]
 800b454:	e782      	b.n	800b35c <__ieee754_rem_pio2f+0x128>
 800b456:	2303      	movs	r3, #3
 800b458:	e7e5      	b.n	800b426 <__ieee754_rem_pio2f+0x1f2>
 800b45a:	bf00      	nop
 800b45c:	3f490fd8 	.word	0x3f490fd8
 800b460:	4016cbe3 	.word	0x4016cbe3
 800b464:	3fc90f80 	.word	0x3fc90f80
 800b468:	3fc90fd0 	.word	0x3fc90fd0
 800b46c:	37354400 	.word	0x37354400
 800b470:	37354443 	.word	0x37354443
 800b474:	2e85a308 	.word	0x2e85a308
 800b478:	43490f80 	.word	0x43490f80
 800b47c:	3f22f984 	.word	0x3f22f984
 800b480:	0800bfa0 	.word	0x0800bfa0
 800b484:	2e85a300 	.word	0x2e85a300
 800b488:	248d3132 	.word	0x248d3132
 800b48c:	43800000 	.word	0x43800000
 800b490:	0800c020 	.word	0x0800c020

0800b494 <atanf>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	ee10 5a10 	vmov	r5, s0
 800b49a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b49e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800b4a2:	eef0 7a40 	vmov.f32	s15, s0
 800b4a6:	d310      	bcc.n	800b4ca <atanf+0x36>
 800b4a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800b4ac:	d904      	bls.n	800b4b8 <atanf+0x24>
 800b4ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 800b4b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800b5f0 <atanf+0x15c>
 800b4bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b5f4 <atanf+0x160>
 800b4c0:	2d00      	cmp	r5, #0
 800b4c2:	bfc8      	it	gt
 800b4c4:	eef0 7a47 	vmovgt.f32	s15, s14
 800b4c8:	e7f3      	b.n	800b4b2 <atanf+0x1e>
 800b4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b5f8 <atanf+0x164>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	d810      	bhi.n	800b4f2 <atanf+0x5e>
 800b4d0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800b4d4:	d20a      	bcs.n	800b4ec <atanf+0x58>
 800b4d6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800b5fc <atanf+0x168>
 800b4da:	ee30 7a07 	vadd.f32	s14, s0, s14
 800b4de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ea:	dce2      	bgt.n	800b4b2 <atanf+0x1e>
 800b4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f0:	e013      	b.n	800b51a <atanf+0x86>
 800b4f2:	f7ff f94b 	bl	800a78c <fabsf>
 800b4f6:	4b42      	ldr	r3, [pc, #264]	@ (800b600 <atanf+0x16c>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	d84f      	bhi.n	800b59c <atanf+0x108>
 800b4fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b500:	429c      	cmp	r4, r3
 800b502:	d841      	bhi.n	800b588 <atanf+0xf4>
 800b504:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b508:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b50c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b510:	2300      	movs	r3, #0
 800b512:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b516:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b520:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b604 <atanf+0x170>
 800b524:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800b608 <atanf+0x174>
 800b528:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800b60c <atanf+0x178>
 800b52c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b530:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b534:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800b610 <atanf+0x17c>
 800b538:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b53c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b614 <atanf+0x180>
 800b540:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b544:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b618 <atanf+0x184>
 800b548:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b54c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b61c <atanf+0x188>
 800b550:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b554:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800b620 <atanf+0x18c>
 800b558:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b55c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800b624 <atanf+0x190>
 800b560:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b564:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800b628 <atanf+0x194>
 800b568:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b56c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800b62c <atanf+0x198>
 800b570:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b574:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b578:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b57c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b580:	d121      	bne.n	800b5c6 <atanf+0x132>
 800b582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b586:	e794      	b.n	800b4b2 <atanf+0x1e>
 800b588:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b58c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b590:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b594:	2301      	movs	r3, #1
 800b596:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b59a:	e7be      	b.n	800b51a <atanf+0x86>
 800b59c:	4b24      	ldr	r3, [pc, #144]	@ (800b630 <atanf+0x19c>)
 800b59e:	429c      	cmp	r4, r3
 800b5a0:	d80b      	bhi.n	800b5ba <atanf+0x126>
 800b5a2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800b5a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b8:	e7af      	b.n	800b51a <atanf+0x86>
 800b5ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b5be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e7a9      	b.n	800b51a <atanf+0x86>
 800b5c6:	4a1b      	ldr	r2, [pc, #108]	@ (800b634 <atanf+0x1a0>)
 800b5c8:	491b      	ldr	r1, [pc, #108]	@ (800b638 <atanf+0x1a4>)
 800b5ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b5ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b5d2:	edd3 6a00 	vldr	s13, [r3]
 800b5d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b5da:	2d00      	cmp	r5, #0
 800b5dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b5e0:	edd2 7a00 	vldr	s15, [r2]
 800b5e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5e8:	bfb8      	it	lt
 800b5ea:	eef1 7a67 	vneglt.f32	s15, s15
 800b5ee:	e760      	b.n	800b4b2 <atanf+0x1e>
 800b5f0:	bfc90fdb 	.word	0xbfc90fdb
 800b5f4:	3fc90fdb 	.word	0x3fc90fdb
 800b5f8:	3edfffff 	.word	0x3edfffff
 800b5fc:	7149f2ca 	.word	0x7149f2ca
 800b600:	3f97ffff 	.word	0x3f97ffff
 800b604:	3c8569d7 	.word	0x3c8569d7
 800b608:	3d4bda59 	.word	0x3d4bda59
 800b60c:	bd6ef16b 	.word	0xbd6ef16b
 800b610:	3d886b35 	.word	0x3d886b35
 800b614:	3dba2e6e 	.word	0x3dba2e6e
 800b618:	3e124925 	.word	0x3e124925
 800b61c:	3eaaaaab 	.word	0x3eaaaaab
 800b620:	bd15a221 	.word	0xbd15a221
 800b624:	bd9d8795 	.word	0xbd9d8795
 800b628:	bde38e38 	.word	0xbde38e38
 800b62c:	be4ccccd 	.word	0xbe4ccccd
 800b630:	401bffff 	.word	0x401bffff
 800b634:	0800c348 	.word	0x0800c348
 800b638:	0800c338 	.word	0x0800c338

0800b63c <scalbnf>:
 800b63c:	ee10 3a10 	vmov	r3, s0
 800b640:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b644:	d02b      	beq.n	800b69e <scalbnf+0x62>
 800b646:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b64a:	d302      	bcc.n	800b652 <scalbnf+0x16>
 800b64c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b650:	4770      	bx	lr
 800b652:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b656:	d123      	bne.n	800b6a0 <scalbnf+0x64>
 800b658:	4b24      	ldr	r3, [pc, #144]	@ (800b6ec <scalbnf+0xb0>)
 800b65a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b6f0 <scalbnf+0xb4>
 800b65e:	4298      	cmp	r0, r3
 800b660:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b664:	db17      	blt.n	800b696 <scalbnf+0x5a>
 800b666:	ee10 3a10 	vmov	r3, s0
 800b66a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b66e:	3a19      	subs	r2, #25
 800b670:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b674:	4288      	cmp	r0, r1
 800b676:	dd15      	ble.n	800b6a4 <scalbnf+0x68>
 800b678:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b6f4 <scalbnf+0xb8>
 800b67c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b6f8 <scalbnf+0xbc>
 800b680:	ee10 3a10 	vmov	r3, s0
 800b684:	eeb0 7a67 	vmov.f32	s14, s15
 800b688:	2b00      	cmp	r3, #0
 800b68a:	bfb8      	it	lt
 800b68c:	eef0 7a66 	vmovlt.f32	s15, s13
 800b690:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b694:	4770      	bx	lr
 800b696:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b6fc <scalbnf+0xc0>
 800b69a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b69e:	4770      	bx	lr
 800b6a0:	0dd2      	lsrs	r2, r2, #23
 800b6a2:	e7e5      	b.n	800b670 <scalbnf+0x34>
 800b6a4:	4410      	add	r0, r2
 800b6a6:	28fe      	cmp	r0, #254	@ 0xfe
 800b6a8:	dce6      	bgt.n	800b678 <scalbnf+0x3c>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dd06      	ble.n	800b6bc <scalbnf+0x80>
 800b6ae:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6b2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6b6:	ee00 3a10 	vmov	s0, r3
 800b6ba:	4770      	bx	lr
 800b6bc:	f110 0f16 	cmn.w	r0, #22
 800b6c0:	da09      	bge.n	800b6d6 <scalbnf+0x9a>
 800b6c2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b6fc <scalbnf+0xc0>
 800b6c6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b700 <scalbnf+0xc4>
 800b6ca:	ee10 3a10 	vmov	r3, s0
 800b6ce:	eeb0 7a67 	vmov.f32	s14, s15
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	e7d9      	b.n	800b68a <scalbnf+0x4e>
 800b6d6:	3019      	adds	r0, #25
 800b6d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6dc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6e0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b704 <scalbnf+0xc8>
 800b6e4:	ee07 3a90 	vmov	s15, r3
 800b6e8:	e7d7      	b.n	800b69a <scalbnf+0x5e>
 800b6ea:	bf00      	nop
 800b6ec:	ffff3cb0 	.word	0xffff3cb0
 800b6f0:	4c000000 	.word	0x4c000000
 800b6f4:	7149f2ca 	.word	0x7149f2ca
 800b6f8:	f149f2ca 	.word	0xf149f2ca
 800b6fc:	0da24260 	.word	0x0da24260
 800b700:	8da24260 	.word	0x8da24260
 800b704:	33000000 	.word	0x33000000

0800b708 <with_errnof>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	ed2d 8b02 	vpush	{d8}
 800b70e:	eeb0 8a40 	vmov.f32	s16, s0
 800b712:	4604      	mov	r4, r0
 800b714:	f7fe ff38 	bl	800a588 <__errno>
 800b718:	eeb0 0a48 	vmov.f32	s0, s16
 800b71c:	ecbd 8b02 	vpop	{d8}
 800b720:	6004      	str	r4, [r0, #0]
 800b722:	bd10      	pop	{r4, pc}

0800b724 <xflowf>:
 800b724:	b130      	cbz	r0, 800b734 <xflowf+0x10>
 800b726:	eef1 7a40 	vneg.f32	s15, s0
 800b72a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b72e:	2022      	movs	r0, #34	@ 0x22
 800b730:	f7ff bfea 	b.w	800b708 <with_errnof>
 800b734:	eef0 7a40 	vmov.f32	s15, s0
 800b738:	e7f7      	b.n	800b72a <xflowf+0x6>
	...

0800b73c <__math_uflowf>:
 800b73c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b744 <__math_uflowf+0x8>
 800b740:	f7ff bff0 	b.w	800b724 <xflowf>
 800b744:	10000000 	.word	0x10000000

0800b748 <__math_oflowf>:
 800b748:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b750 <__math_oflowf+0x8>
 800b74c:	f7ff bfea 	b.w	800b724 <xflowf>
 800b750:	70000000 	.word	0x70000000

0800b754 <__kernel_rem_pio2f>:
 800b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	ed2d 8b04 	vpush	{d8-d9}
 800b75c:	b0d9      	sub	sp, #356	@ 0x164
 800b75e:	4690      	mov	r8, r2
 800b760:	9001      	str	r0, [sp, #4]
 800b762:	4ab6      	ldr	r2, [pc, #728]	@ (800ba3c <__kernel_rem_pio2f+0x2e8>)
 800b764:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b766:	f118 0f04 	cmn.w	r8, #4
 800b76a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b76e:	460f      	mov	r7, r1
 800b770:	f103 3bff 	add.w	fp, r3, #4294967295
 800b774:	db26      	blt.n	800b7c4 <__kernel_rem_pio2f+0x70>
 800b776:	f1b8 0203 	subs.w	r2, r8, #3
 800b77a:	bf48      	it	mi
 800b77c:	f108 0204 	addmi.w	r2, r8, #4
 800b780:	10d2      	asrs	r2, r2, #3
 800b782:	1c55      	adds	r5, r2, #1
 800b784:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b786:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800b78a:	00e8      	lsls	r0, r5, #3
 800b78c:	eba2 060b 	sub.w	r6, r2, fp
 800b790:	9002      	str	r0, [sp, #8]
 800b792:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b796:	eb0a 0c0b 	add.w	ip, sl, fp
 800b79a:	ac1c      	add	r4, sp, #112	@ 0x70
 800b79c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	4560      	cmp	r0, ip
 800b7a4:	dd10      	ble.n	800b7c8 <__kernel_rem_pio2f+0x74>
 800b7a6:	a91c      	add	r1, sp, #112	@ 0x70
 800b7a8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b7ac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	4556      	cmp	r6, sl
 800b7b4:	dc24      	bgt.n	800b800 <__kernel_rem_pio2f+0xac>
 800b7b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7ba:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800b7be:	4684      	mov	ip, r0
 800b7c0:	2400      	movs	r4, #0
 800b7c2:	e016      	b.n	800b7f2 <__kernel_rem_pio2f+0x9e>
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	e7dc      	b.n	800b782 <__kernel_rem_pio2f+0x2e>
 800b7c8:	42c6      	cmn	r6, r0
 800b7ca:	bf5d      	ittte	pl
 800b7cc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b7d0:	ee07 1a90 	vmovpl	s15, r1
 800b7d4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b7d8:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7dc:	ece4 7a01 	vstmia	r4!, {s15}
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	e7de      	b.n	800b7a2 <__kernel_rem_pio2f+0x4e>
 800b7e4:	ecfe 6a01 	vldmia	lr!, {s13}
 800b7e8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b7ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7f0:	3401      	adds	r4, #1
 800b7f2:	455c      	cmp	r4, fp
 800b7f4:	ddf6      	ble.n	800b7e4 <__kernel_rem_pio2f+0x90>
 800b7f6:	ece9 7a01 	vstmia	r9!, {s15}
 800b7fa:	3601      	adds	r6, #1
 800b7fc:	3004      	adds	r0, #4
 800b7fe:	e7d8      	b.n	800b7b2 <__kernel_rem_pio2f+0x5e>
 800b800:	a908      	add	r1, sp, #32
 800b802:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b806:	9104      	str	r1, [sp, #16]
 800b808:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b80a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ba48 <__kernel_rem_pio2f+0x2f4>
 800b80e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ba44 <__kernel_rem_pio2f+0x2f0>
 800b812:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b816:	9203      	str	r2, [sp, #12]
 800b818:	4654      	mov	r4, sl
 800b81a:	00a2      	lsls	r2, r4, #2
 800b81c:	9205      	str	r2, [sp, #20]
 800b81e:	aa58      	add	r2, sp, #352	@ 0x160
 800b820:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b824:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b828:	a944      	add	r1, sp, #272	@ 0x110
 800b82a:	aa08      	add	r2, sp, #32
 800b82c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b830:	4694      	mov	ip, r2
 800b832:	4626      	mov	r6, r4
 800b834:	2e00      	cmp	r6, #0
 800b836:	dc4c      	bgt.n	800b8d2 <__kernel_rem_pio2f+0x17e>
 800b838:	4628      	mov	r0, r5
 800b83a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b83e:	f7ff fefd 	bl	800b63c <scalbnf>
 800b842:	eeb0 8a40 	vmov.f32	s16, s0
 800b846:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b84a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b84e:	f000 f9e9 	bl	800bc24 <floorf>
 800b852:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b856:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b85a:	2d00      	cmp	r5, #0
 800b85c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b860:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b864:	ee17 9a90 	vmov	r9, s15
 800b868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b86c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b870:	dd41      	ble.n	800b8f6 <__kernel_rem_pio2f+0x1a2>
 800b872:	f104 3cff 	add.w	ip, r4, #4294967295
 800b876:	a908      	add	r1, sp, #32
 800b878:	f1c5 0e08 	rsb	lr, r5, #8
 800b87c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b880:	fa46 f00e 	asr.w	r0, r6, lr
 800b884:	4481      	add	r9, r0
 800b886:	fa00 f00e 	lsl.w	r0, r0, lr
 800b88a:	1a36      	subs	r6, r6, r0
 800b88c:	f1c5 0007 	rsb	r0, r5, #7
 800b890:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b894:	4106      	asrs	r6, r0
 800b896:	2e00      	cmp	r6, #0
 800b898:	dd3c      	ble.n	800b914 <__kernel_rem_pio2f+0x1c0>
 800b89a:	f04f 0e00 	mov.w	lr, #0
 800b89e:	f109 0901 	add.w	r9, r9, #1
 800b8a2:	4670      	mov	r0, lr
 800b8a4:	4574      	cmp	r4, lr
 800b8a6:	dc68      	bgt.n	800b97a <__kernel_rem_pio2f+0x226>
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	dd03      	ble.n	800b8b4 <__kernel_rem_pio2f+0x160>
 800b8ac:	2d01      	cmp	r5, #1
 800b8ae:	d074      	beq.n	800b99a <__kernel_rem_pio2f+0x246>
 800b8b0:	2d02      	cmp	r5, #2
 800b8b2:	d07d      	beq.n	800b9b0 <__kernel_rem_pio2f+0x25c>
 800b8b4:	2e02      	cmp	r6, #2
 800b8b6:	d12d      	bne.n	800b914 <__kernel_rem_pio2f+0x1c0>
 800b8b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8bc:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b8c0:	b340      	cbz	r0, 800b914 <__kernel_rem_pio2f+0x1c0>
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	9306      	str	r3, [sp, #24]
 800b8c6:	f7ff feb9 	bl	800b63c <scalbnf>
 800b8ca:	9b06      	ldr	r3, [sp, #24]
 800b8cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b8d0:	e020      	b.n	800b914 <__kernel_rem_pio2f+0x1c0>
 800b8d2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b8d6:	3e01      	subs	r6, #1
 800b8d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8e0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b8e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b8e8:	ecac 0a01 	vstmia	ip!, {s0}
 800b8ec:	ed30 0a01 	vldmdb	r0!, {s0}
 800b8f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8f4:	e79e      	b.n	800b834 <__kernel_rem_pio2f+0xe0>
 800b8f6:	d105      	bne.n	800b904 <__kernel_rem_pio2f+0x1b0>
 800b8f8:	1e60      	subs	r0, r4, #1
 800b8fa:	a908      	add	r1, sp, #32
 800b8fc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b900:	11f6      	asrs	r6, r6, #7
 800b902:	e7c8      	b.n	800b896 <__kernel_rem_pio2f+0x142>
 800b904:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b908:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b910:	da31      	bge.n	800b976 <__kernel_rem_pio2f+0x222>
 800b912:	2600      	movs	r6, #0
 800b914:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91c:	f040 8098 	bne.w	800ba50 <__kernel_rem_pio2f+0x2fc>
 800b920:	1e60      	subs	r0, r4, #1
 800b922:	2200      	movs	r2, #0
 800b924:	4550      	cmp	r0, sl
 800b926:	da4b      	bge.n	800b9c0 <__kernel_rem_pio2f+0x26c>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	d065      	beq.n	800b9f8 <__kernel_rem_pio2f+0x2a4>
 800b92c:	3c01      	subs	r4, #1
 800b92e:	ab08      	add	r3, sp, #32
 800b930:	3d08      	subs	r5, #8
 800b932:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0f8      	beq.n	800b92c <__kernel_rem_pio2f+0x1d8>
 800b93a:	4628      	mov	r0, r5
 800b93c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b940:	f7ff fe7c 	bl	800b63c <scalbnf>
 800b944:	1c63      	adds	r3, r4, #1
 800b946:	aa44      	add	r2, sp, #272	@ 0x110
 800b948:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ba48 <__kernel_rem_pio2f+0x2f4>
 800b94c:	0099      	lsls	r1, r3, #2
 800b94e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b952:	4623      	mov	r3, r4
 800b954:	2b00      	cmp	r3, #0
 800b956:	f280 80a9 	bge.w	800baac <__kernel_rem_pio2f+0x358>
 800b95a:	4623      	mov	r3, r4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f2c0 80c7 	blt.w	800baf0 <__kernel_rem_pio2f+0x39c>
 800b962:	aa44      	add	r2, sp, #272	@ 0x110
 800b964:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b968:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ba40 <__kernel_rem_pio2f+0x2ec>
 800b96c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800b970:	2000      	movs	r0, #0
 800b972:	1ae2      	subs	r2, r4, r3
 800b974:	e0b1      	b.n	800bada <__kernel_rem_pio2f+0x386>
 800b976:	2602      	movs	r6, #2
 800b978:	e78f      	b.n	800b89a <__kernel_rem_pio2f+0x146>
 800b97a:	f852 1b04 	ldr.w	r1, [r2], #4
 800b97e:	b948      	cbnz	r0, 800b994 <__kernel_rem_pio2f+0x240>
 800b980:	b121      	cbz	r1, 800b98c <__kernel_rem_pio2f+0x238>
 800b982:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b986:	f842 1c04 	str.w	r1, [r2, #-4]
 800b98a:	2101      	movs	r1, #1
 800b98c:	f10e 0e01 	add.w	lr, lr, #1
 800b990:	4608      	mov	r0, r1
 800b992:	e787      	b.n	800b8a4 <__kernel_rem_pio2f+0x150>
 800b994:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b998:	e7f5      	b.n	800b986 <__kernel_rem_pio2f+0x232>
 800b99a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b99e:	aa08      	add	r2, sp, #32
 800b9a0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9a8:	a908      	add	r1, sp, #32
 800b9aa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b9ae:	e781      	b.n	800b8b4 <__kernel_rem_pio2f+0x160>
 800b9b0:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9b4:	aa08      	add	r2, sp, #32
 800b9b6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b9be:	e7f3      	b.n	800b9a8 <__kernel_rem_pio2f+0x254>
 800b9c0:	a908      	add	r1, sp, #32
 800b9c2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b9c6:	3801      	subs	r0, #1
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	e7ab      	b.n	800b924 <__kernel_rem_pio2f+0x1d0>
 800b9cc:	3201      	adds	r2, #1
 800b9ce:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b9d2:	2e00      	cmp	r6, #0
 800b9d4:	d0fa      	beq.n	800b9cc <__kernel_rem_pio2f+0x278>
 800b9d6:	9905      	ldr	r1, [sp, #20]
 800b9d8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b9dc:	eb0d 0001 	add.w	r0, sp, r1
 800b9e0:	18e6      	adds	r6, r4, r3
 800b9e2:	a91c      	add	r1, sp, #112	@ 0x70
 800b9e4:	f104 0c01 	add.w	ip, r4, #1
 800b9e8:	384c      	subs	r0, #76	@ 0x4c
 800b9ea:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b9ee:	4422      	add	r2, r4
 800b9f0:	4562      	cmp	r2, ip
 800b9f2:	da04      	bge.n	800b9fe <__kernel_rem_pio2f+0x2aa>
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	e710      	b.n	800b81a <__kernel_rem_pio2f+0xc6>
 800b9f8:	9804      	ldr	r0, [sp, #16]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	e7e7      	b.n	800b9ce <__kernel_rem_pio2f+0x27a>
 800b9fe:	9903      	ldr	r1, [sp, #12]
 800ba00:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ba04:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ba08:	9105      	str	r1, [sp, #20]
 800ba0a:	ee07 1a90 	vmov	s15, r1
 800ba0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba12:	2400      	movs	r4, #0
 800ba14:	ece6 7a01 	vstmia	r6!, {s15}
 800ba18:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800ba1c:	46b1      	mov	r9, r6
 800ba1e:	455c      	cmp	r4, fp
 800ba20:	dd04      	ble.n	800ba2c <__kernel_rem_pio2f+0x2d8>
 800ba22:	ece0 7a01 	vstmia	r0!, {s15}
 800ba26:	f10c 0c01 	add.w	ip, ip, #1
 800ba2a:	e7e1      	b.n	800b9f0 <__kernel_rem_pio2f+0x29c>
 800ba2c:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba30:	ed39 7a01 	vldmdb	r9!, {s14}
 800ba34:	3401      	adds	r4, #1
 800ba36:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba3a:	e7f0      	b.n	800ba1e <__kernel_rem_pio2f+0x2ca>
 800ba3c:	0800c384 	.word	0x0800c384
 800ba40:	0800c358 	.word	0x0800c358
 800ba44:	43800000 	.word	0x43800000
 800ba48:	3b800000 	.word	0x3b800000
 800ba4c:	00000000 	.word	0x00000000
 800ba50:	9b02      	ldr	r3, [sp, #8]
 800ba52:	eeb0 0a48 	vmov.f32	s0, s16
 800ba56:	eba3 0008 	sub.w	r0, r3, r8
 800ba5a:	f7ff fdef 	bl	800b63c <scalbnf>
 800ba5e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ba44 <__kernel_rem_pio2f+0x2f0>
 800ba62:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6a:	db19      	blt.n	800baa0 <__kernel_rem_pio2f+0x34c>
 800ba6c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ba48 <__kernel_rem_pio2f+0x2f4>
 800ba70:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba74:	aa08      	add	r2, sp, #32
 800ba76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba7a:	3508      	adds	r5, #8
 800ba7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba8c:	ee10 3a10 	vmov	r3, s0
 800ba90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba94:	ee17 3a90 	vmov	r3, s15
 800ba98:	3401      	adds	r4, #1
 800ba9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba9e:	e74c      	b.n	800b93a <__kernel_rem_pio2f+0x1e6>
 800baa0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800baa4:	aa08      	add	r2, sp, #32
 800baa6:	ee10 3a10 	vmov	r3, s0
 800baaa:	e7f6      	b.n	800ba9a <__kernel_rem_pio2f+0x346>
 800baac:	a808      	add	r0, sp, #32
 800baae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bab2:	9001      	str	r0, [sp, #4]
 800bab4:	ee07 0a90 	vmov	s15, r0
 800bab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800babc:	3b01      	subs	r3, #1
 800babe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bac2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bac6:	ed62 7a01 	vstmdb	r2!, {s15}
 800baca:	e743      	b.n	800b954 <__kernel_rem_pio2f+0x200>
 800bacc:	ecfc 6a01 	vldmia	ip!, {s13}
 800bad0:	ecb5 7a01 	vldmia	r5!, {s14}
 800bad4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bad8:	3001      	adds	r0, #1
 800bada:	4550      	cmp	r0, sl
 800badc:	dc01      	bgt.n	800bae2 <__kernel_rem_pio2f+0x38e>
 800bade:	4290      	cmp	r0, r2
 800bae0:	ddf4      	ble.n	800bacc <__kernel_rem_pio2f+0x378>
 800bae2:	a858      	add	r0, sp, #352	@ 0x160
 800bae4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bae8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800baec:	3b01      	subs	r3, #1
 800baee:	e735      	b.n	800b95c <__kernel_rem_pio2f+0x208>
 800baf0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	dc09      	bgt.n	800bb0a <__kernel_rem_pio2f+0x3b6>
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	dc27      	bgt.n	800bb4a <__kernel_rem_pio2f+0x3f6>
 800bafa:	d040      	beq.n	800bb7e <__kernel_rem_pio2f+0x42a>
 800bafc:	f009 0007 	and.w	r0, r9, #7
 800bb00:	b059      	add	sp, #356	@ 0x164
 800bb02:	ecbd 8b04 	vpop	{d8-d9}
 800bb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d1f5      	bne.n	800bafc <__kernel_rem_pio2f+0x3a8>
 800bb10:	aa30      	add	r2, sp, #192	@ 0xc0
 800bb12:	1f0b      	subs	r3, r1, #4
 800bb14:	4413      	add	r3, r2
 800bb16:	461a      	mov	r2, r3
 800bb18:	4620      	mov	r0, r4
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	dc50      	bgt.n	800bbc0 <__kernel_rem_pio2f+0x46c>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	2a01      	cmp	r2, #1
 800bb22:	dc5d      	bgt.n	800bbe0 <__kernel_rem_pio2f+0x48c>
 800bb24:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb26:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800bb2a:	440b      	add	r3, r1
 800bb2c:	2c01      	cmp	r4, #1
 800bb2e:	dc67      	bgt.n	800bc00 <__kernel_rem_pio2f+0x4ac>
 800bb30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bb34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bb38:	2e00      	cmp	r6, #0
 800bb3a:	d167      	bne.n	800bc0c <__kernel_rem_pio2f+0x4b8>
 800bb3c:	edc7 6a00 	vstr	s13, [r7]
 800bb40:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb44:	edc7 7a02 	vstr	s15, [r7, #8]
 800bb48:	e7d8      	b.n	800bafc <__kernel_rem_pio2f+0x3a8>
 800bb4a:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb4c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800bb50:	440b      	add	r3, r1
 800bb52:	4622      	mov	r2, r4
 800bb54:	2a00      	cmp	r2, #0
 800bb56:	da24      	bge.n	800bba2 <__kernel_rem_pio2f+0x44e>
 800bb58:	b34e      	cbz	r6, 800bbae <__kernel_rem_pio2f+0x45a>
 800bb5a:	eef1 7a47 	vneg.f32	s15, s14
 800bb5e:	edc7 7a00 	vstr	s15, [r7]
 800bb62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb6a:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	429c      	cmp	r4, r3
 800bb70:	da20      	bge.n	800bbb4 <__kernel_rem_pio2f+0x460>
 800bb72:	b10e      	cbz	r6, 800bb78 <__kernel_rem_pio2f+0x424>
 800bb74:	eef1 7a67 	vneg.f32	s15, s15
 800bb78:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb7c:	e7be      	b.n	800bafc <__kernel_rem_pio2f+0x3a8>
 800bb7e:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb80:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ba4c <__kernel_rem_pio2f+0x2f8>
 800bb84:	440b      	add	r3, r1
 800bb86:	2c00      	cmp	r4, #0
 800bb88:	da05      	bge.n	800bb96 <__kernel_rem_pio2f+0x442>
 800bb8a:	b10e      	cbz	r6, 800bb90 <__kernel_rem_pio2f+0x43c>
 800bb8c:	eef1 7a67 	vneg.f32	s15, s15
 800bb90:	edc7 7a00 	vstr	s15, [r7]
 800bb94:	e7b2      	b.n	800bafc <__kernel_rem_pio2f+0x3a8>
 800bb96:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb9a:	3c01      	subs	r4, #1
 800bb9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bba0:	e7f1      	b.n	800bb86 <__kernel_rem_pio2f+0x432>
 800bba2:	ed73 7a01 	vldmdb	r3!, {s15}
 800bba6:	3a01      	subs	r2, #1
 800bba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bbac:	e7d2      	b.n	800bb54 <__kernel_rem_pio2f+0x400>
 800bbae:	eef0 7a47 	vmov.f32	s15, s14
 800bbb2:	e7d4      	b.n	800bb5e <__kernel_rem_pio2f+0x40a>
 800bbb4:	ecb2 7a01 	vldmia	r2!, {s14}
 800bbb8:	3301      	adds	r3, #1
 800bbba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbbe:	e7d6      	b.n	800bb6e <__kernel_rem_pio2f+0x41a>
 800bbc0:	ed72 7a01 	vldmdb	r2!, {s15}
 800bbc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800bbc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbcc:	3801      	subs	r0, #1
 800bbce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbd2:	ed82 7a00 	vstr	s14, [r2]
 800bbd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbda:	edc2 7a01 	vstr	s15, [r2, #4]
 800bbde:	e79c      	b.n	800bb1a <__kernel_rem_pio2f+0x3c6>
 800bbe0:	ed73 7a01 	vldmdb	r3!, {s15}
 800bbe4:	edd3 6a01 	vldr	s13, [r3, #4]
 800bbe8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbec:	3a01      	subs	r2, #1
 800bbee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbf2:	ed83 7a00 	vstr	s14, [r3]
 800bbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfa:	edc3 7a01 	vstr	s15, [r3, #4]
 800bbfe:	e78f      	b.n	800bb20 <__kernel_rem_pio2f+0x3cc>
 800bc00:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc04:	3c01      	subs	r4, #1
 800bc06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc0a:	e78f      	b.n	800bb2c <__kernel_rem_pio2f+0x3d8>
 800bc0c:	eef1 6a66 	vneg.f32	s13, s13
 800bc10:	eeb1 7a47 	vneg.f32	s14, s14
 800bc14:	edc7 6a00 	vstr	s13, [r7]
 800bc18:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc1c:	eef1 7a67 	vneg.f32	s15, s15
 800bc20:	e790      	b.n	800bb44 <__kernel_rem_pio2f+0x3f0>
 800bc22:	bf00      	nop

0800bc24 <floorf>:
 800bc24:	ee10 3a10 	vmov	r3, s0
 800bc28:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc2c:	3a7f      	subs	r2, #127	@ 0x7f
 800bc2e:	2a16      	cmp	r2, #22
 800bc30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc34:	dc2b      	bgt.n	800bc8e <floorf+0x6a>
 800bc36:	2a00      	cmp	r2, #0
 800bc38:	da12      	bge.n	800bc60 <floorf+0x3c>
 800bc3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bca0 <floorf+0x7c>
 800bc3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	dd06      	ble.n	800bc5a <floorf+0x36>
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	da24      	bge.n	800bc9a <floorf+0x76>
 800bc50:	2900      	cmp	r1, #0
 800bc52:	4b14      	ldr	r3, [pc, #80]	@ (800bca4 <floorf+0x80>)
 800bc54:	bf08      	it	eq
 800bc56:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc5a:	ee00 3a10 	vmov	s0, r3
 800bc5e:	4770      	bx	lr
 800bc60:	4911      	ldr	r1, [pc, #68]	@ (800bca8 <floorf+0x84>)
 800bc62:	4111      	asrs	r1, r2
 800bc64:	420b      	tst	r3, r1
 800bc66:	d0fa      	beq.n	800bc5e <floorf+0x3a>
 800bc68:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bca0 <floorf+0x7c>
 800bc6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc78:	ddef      	ble.n	800bc5a <floorf+0x36>
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbe      	ittt	lt
 800bc7e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc82:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc86:	189b      	addlt	r3, r3, r2
 800bc88:	ea23 0301 	bic.w	r3, r3, r1
 800bc8c:	e7e5      	b.n	800bc5a <floorf+0x36>
 800bc8e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc92:	d3e4      	bcc.n	800bc5e <floorf+0x3a>
 800bc94:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc98:	4770      	bx	lr
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e7dd      	b.n	800bc5a <floorf+0x36>
 800bc9e:	bf00      	nop
 800bca0:	7149f2ca 	.word	0x7149f2ca
 800bca4:	bf800000 	.word	0xbf800000
 800bca8:	007fffff 	.word	0x007fffff

0800bcac <_init>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr

0800bcb8 <_fini>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr
